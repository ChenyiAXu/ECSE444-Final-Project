
444final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001672c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002fe98  080168c0  080168c0  000268c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046758  08046758  00060bb4  2**0
                  CONTENTS
  4 .ARM          00000008  08046758  08046758  00056758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08046760  08046760  00060bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08046760  08046760  00056760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08046764  08046764  00056764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bb4  20000000  08046768  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005140  20000bb4  0804731c  00060bb4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20005cf4  0804731c  00065cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060bb4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00060be4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000301e5  00000000  00000000  00060c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c8b  00000000  00000000  00090e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022e0  00000000  00000000  00096ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a97  00000000  00000000  00098dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd3f  00000000  00000000  0009a85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b57b  00000000  00000000  000c859e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103e7c  00000000  00000000  000f3b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a9fc  00000000  00000000  001f7998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00202394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000bb4 	.word	0x20000bb4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080168a4 	.word	0x080168a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000bb8 	.word	0x20000bb8
 80001cc:	080168a4 	.word	0x080168a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	f2ad 7dc4 	subw	sp, sp, #1988	; 0x7c4
 8000ff6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 fe9b 	bl	8002d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f9ac 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 fa4e 	bl	80014a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001004:	f000 fa1c 	bl	8001440 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001008:	f007 ffd6 	bl	8008fb8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800100c:	f00d fd56 	bl	800eabc <MX_USB_HOST_Init>
  MX_CRC_Init();
 8001010:	f000 f9f4 	bl	80013fc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 8001014:	4bbc      	ldr	r3, [pc, #752]	; (8001308 <main+0x318>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 800101a:	f000 fafd 	bl	8001618 <MEMS_Init>
  AI_Init();
 800101e:	f000 fb45 	bl	80016ac <AI_Init>
  // USB START
  char  USBHPath[4];
  uint32_t status = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
  UINT bw;
  char USBbuffer[50];

  int i=0;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
  int count=0;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3798 	str.w	r3, [r7, #1944]	; 0x798
  extern ApplicationTypeDef Appli_state;
  USBH_HandleTypeDef hUsbHostFS;

  FIL myfile;
  FATFS myUsbFATFS;
if (mode==0){
 8001034:	4bb5      	ldr	r3, [pc, #724]	; (800130c <main+0x31c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13a      	bne.n	80010b2 <main+0xc2>
  for(int i=0;i<1000;i++) {
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8001042:	e031      	b.n	80010a8 <main+0xb8>

	  LSM6DSL_Axes_t acc_axe;
	  LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axe);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	48b1      	ldr	r0, [pc, #708]	; (8001310 <main+0x320>)
 800104c:	f001 f880 	bl	8002150 <LSM6DSL_ACC_GetAxes>
	  HAL_SuspendTick();
 8001050:	f001 ff08 	bl	8002e64 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001054:	2101      	movs	r1, #1
 8001056:	2000      	movs	r0, #0
 8001058:	f004 ff44 	bl	8005ee4 <HAL_PWR_EnterSLEEPMode>
//	  for(int i=0;i<190000;i++);
	  HAL_Delay(38);
 800105c:	2026      	movs	r0, #38	; 0x26
 800105e:	f001 fedd 	bl	8002e1c <HAL_Delay>
	  buffx[i]=acc_axe.x;
 8001062:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8001066:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	49a9      	ldr	r1, [pc, #676]	; (8001314 <main+0x324>)
 800106e:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  buffy[i]=acc_axe.y;
 8001076:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800107a:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	49a5      	ldr	r1, [pc, #660]	; (8001318 <main+0x328>)
 8001082:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  buffz[i]=acc_axe.z;
 800108a:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800108e:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	49a1      	ldr	r1, [pc, #644]	; (800131c <main+0x32c>)
 8001096:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<1000;i++) {
 800109e:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 80010a8:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 80010ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b0:	dbc8      	blt.n	8001044 <main+0x54>
  //USB END
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0

  while (1){
   if(mode==1){
 80010b8:	4b94      	ldr	r3, [pc, #592]	; (800130c <main+0x31c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f040 808a 	bne.w	80011d6 <main+0x1e6>

	 if (dataRdyIntReceived != 0) {
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <main+0x318>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f6      	beq.n	80010b8 <main+0xc8>
	 	        dataRdyIntReceived = 0;
 80010ca:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <main+0x318>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
	 	        LSM6DSL_Axes_t acc_axes;
	 	        LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	488e      	ldr	r0, [pc, #568]	; (8001310 <main+0x320>)
 80010d6:	f001 f83b 	bl	8002150 <LSM6DSL_ACC_GetAxes>
	 	        // printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);


	 	        /* Normalize data to [-1; 1] and accumulate into input buffer */
	 	        /* Note: window overlapping can be managed here */
	 	        aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 80010da:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80010de:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001320 <main+0x330>
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	4a8b      	ldr	r2, [pc, #556]	; (8001324 <main+0x334>)
 80010f6:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	 	        aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 8001102:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8001106:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001114:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 8001118:	3301      	adds	r3, #1
 800111a:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001320 <main+0x330>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	4a80      	ldr	r2, [pc, #512]	; (8001324 <main+0x334>)
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	edc3 7a00 	vstr	s15, [r3]
	 	        aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 800112c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8001130:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 8001142:	3302      	adds	r3, #2
 8001144:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001320 <main+0x330>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	4a75      	ldr	r2, [pc, #468]	; (8001324 <main+0x334>)
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	edc3 7a00 	vstr	s15, [r3]
	 	        write_index += 3;
 8001156:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 800115a:	3303      	adds	r3, #3
 800115c:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0

	 	        if (write_index == AI_NETWORK_IN_1_SIZE) {
 8001160:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 8001164:	2b4e      	cmp	r3, #78	; 0x4e
 8001166:	d1a7      	bne.n	80010b8 <main+0xc8>
	 	          write_index = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0

	 	          printf("Running inference\r\n");
 800116e:	486e      	ldr	r0, [pc, #440]	; (8001328 <main+0x338>)
 8001170:	f011 fe34 	bl	8012ddc <puts>
	 	          AI_Run(aiInData, aiOutData);
 8001174:	496d      	ldr	r1, [pc, #436]	; (800132c <main+0x33c>)
 8001176:	486b      	ldr	r0, [pc, #428]	; (8001324 <main+0x334>)
 8001178:	f000 fad4 	bl	8001724 <AI_Run>

	 	          /* Output results */
	 	          for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8001182:	e012      	b.n	80011aa <main+0x1ba>
	 	            printf("%8.6f ", aiOutData[i]);
 8001184:	4a69      	ldr	r2, [pc, #420]	; (800132c <main+0x33c>)
 8001186:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d9 	bl	8000548 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4865      	ldr	r0, [pc, #404]	; (8001330 <main+0x340>)
 800119c:	f011 fdb8 	bl	8012d10 <iprintf>
	 	          for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80011a0:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 80011a4:	3301      	adds	r3, #1
 80011a6:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 80011aa:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	d9e8      	bls.n	8001184 <main+0x194>
	 	          }
	 	          uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 80011b2:	2106      	movs	r1, #6
 80011b4:	485d      	ldr	r0, [pc, #372]	; (800132c <main+0x33c>)
 80011b6:	f000 faed 	bl	8001794 <argmax>
 80011ba:	f8c7 0790 	str.w	r0, [r7, #1936]	; 0x790
	 	          printf(": %d - %s\r\n", (int) class, activities[class]);
 80011be:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 80011c2:	4a5c      	ldr	r2, [pc, #368]	; (8001334 <main+0x344>)
 80011c4:	f8d7 3790 	ldr.w	r3, [r7, #1936]	; 0x790
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	461a      	mov	r2, r3
 80011ce:	485a      	ldr	r0, [pc, #360]	; (8001338 <main+0x348>)
 80011d0:	f011 fd9e 	bl	8012d10 <iprintf>
 80011d4:	e770      	b.n	80010b8 <main+0xc8>
//	 HAL_SuspendTick();
//	 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
//
//	 HAL_ResumeTick();
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011d6:	f00d fc97 	bl	800eb08 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_READY){
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <main+0x34c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	f47f af6a 	bne.w	80010b8 <main+0xc8>
     /*Every time we open a file and write 10 lines into it.
      * we write 100 times*/
    for(int j=0;j<100;j++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 80011ea:	e083      	b.n	80012f4 <main+0x304>
    	if(f_mount(&myUsbFATFS,"",1) == FR_OK) {
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2201      	movs	r2, #1
 80011f2:	4953      	ldr	r1, [pc, #332]	; (8001340 <main+0x350>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00c fddb 	bl	800ddb0 <f_mount>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <main+0x216>
    	   printf("mount successfully. \r\n");
 8001200:	4850      	ldr	r0, [pc, #320]	; (8001344 <main+0x354>)
 8001202:	f011 fdeb 	bl	8012ddc <puts>
    	 }

    	if(f_open(&myfile,(const char*)"test1.csv",FA_OPEN_ALWAYS|FA_WRITE) == FR_OK) {
 8001206:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800120a:	2212      	movs	r2, #18
 800120c:	494e      	ldr	r1, [pc, #312]	; (8001348 <main+0x358>)
 800120e:	4618      	mov	r0, r3
 8001210:	f00c fe14 	bl	800de3c <f_open>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <main+0x230>
    	   printf("open the csv file successfully. \r\n");
 800121a:	484c      	ldr	r0, [pc, #304]	; (800134c <main+0x35c>)
 800121c:	f011 fdde 	bl	8012ddc <puts>
        }
    	for (int i=0;i<10;i++){
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8001226:	e04d      	b.n	80012c4 <main+0x2d4>
    	    	snprintf(USBbuffer,50,"%ld, %ld, %ld\r\n",buffx[j*10+i],buffy[j*10+i],buffz[j*10+i]);
 8001228:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	461a      	mov	r2, r3
 8001236:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 800123a:	4413      	add	r3, r2
 800123c:	4a35      	ldr	r2, [pc, #212]	; (8001314 <main+0x324>)
 800123e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001242:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	461a      	mov	r2, r3
 8001250:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 8001254:	4413      	add	r3, r2
 8001256:	4a30      	ldr	r2, [pc, #192]	; (8001318 <main+0x328>)
 8001258:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800125c:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 800126e:	4413      	add	r3, r2
 8001270:	4a2a      	ldr	r2, [pc, #168]	; (800131c <main+0x32c>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	f207 7054 	addw	r0, r7, #1876	; 0x754
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	4623      	mov	r3, r4
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <main+0x360>)
 8001282:	2132      	movs	r1, #50	; 0x32
 8001284:	f011 fdb2 	bl	8012dec <sniprintf>
    	    	if(f_lseek(&myfile,f_size(&myfile)) == FR_OK) {
 8001288:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800128c:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f00d f9aa 	bl	800e5f2 <f_lseek>
					  // printf("move to the ending \r\n");
				 }
    	    	if(f_write(&myfile,USBbuffer,strlen(USBbuffer),&bw) == FR_OK) {
 800129e:	f207 7354 	addw	r3, r7, #1876	; 0x754
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7fe ffe4 	bl	8000270 <strlen>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80012ae:	f207 7154 	addw	r1, r7, #1876	; 0x754
 80012b2:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 80012b6:	f00c ff7f 	bl	800e1b8 <f_write>
    	for (int i=0;i<10;i++){
 80012ba:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 80012be:	3301      	adds	r3, #1
 80012c0:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80012c4:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	ddad      	ble.n	8001228 <main+0x238>
			 	 	  // printf("write successfully \r\n");
    	      }
          }
    	FRESULT result = f_close(&myfile);
 80012cc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00d f964 	bl	800e59e <f_close>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 3797 	strb.w	r3, [r7, #1943]	; 0x797
         if(result== FR_OK) {
 80012dc:	f897 3797 	ldrb.w	r3, [r7, #1943]	; 0x797
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <main+0x2fa>
    	   printf("file closed. \r\n");
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <main+0x364>)
 80012e6:	f011 fd79 	bl	8012ddc <puts>
    for(int j=0;j<100;j++){
 80012ea:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 80012f4:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 80012f8:	2b63      	cmp	r3, #99	; 0x63
 80012fa:	f77f af77 	ble.w	80011ec <main+0x1fc>
    	}
     }
    	mode=1;
 80012fe:	4b03      	ldr	r3, [pc, #12]	; (800130c <main+0x31c>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
   if(mode==1){
 8001304:	e6d8      	b.n	80010b8 <main+0xc8>
 8001306:	bf00      	nop
 8001308:	20000cb4 	.word	0x20000cb4
 800130c:	20000018 	.word	0x20000018
 8001310:	20000c7c 	.word	0x20000c7c
 8001314:	2000254c 	.word	0x2000254c
 8001318:	200034ec 	.word	0x200034ec
 800131c:	2000448c 	.word	0x2000448c
 8001320:	457a0000 	.word	0x457a0000
 8001324:	20000cbc 	.word	0x20000cbc
 8001328:	080168fc 	.word	0x080168fc
 800132c:	20000df4 	.word	0x20000df4
 8001330:	08016910 	.word	0x08016910
 8001334:	20000000 	.word	0x20000000
 8001338:	08016918 	.word	0x08016918
 800133c:	200057a0 	.word	0x200057a0
 8001340:	08016924 	.word	0x08016924
 8001344:	08016928 	.word	0x08016928
 8001348:	08016940 	.word	0x08016940
 800134c:	0801694c 	.word	0x0801694c
 8001350:	08016970 	.word	0x08016970
 8001354:	08016980 	.word	0x08016980

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	; 0x58
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2244      	movs	r2, #68	; 0x44
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f011 fe6c 	bl	8013044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800137a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800137e:	f004 fdf3 	bl	8005f68 <HAL_PWREx_ControlVoltageScaling>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001388:	f000 fa34 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800138c:	2310      	movs	r3, #16
 800138e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013a8:	2328      	movs	r3, #40	; 0x28
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fe81 	bl	80060c4 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013c8:	f000 fa14 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2303      	movs	r3, #3
 80013d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2104      	movs	r1, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 fa49 	bl	800687c <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013f0:	f000 fa00 	bl	80017f4 <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3758      	adds	r7, #88	; 0x58
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_CRC_Init+0x3c>)
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <MX_CRC_Init+0x40>)
 8001404:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_CRC_Init+0x3c>)
 8001408:	2200      	movs	r2, #0
 800140a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_CRC_Init+0x3c>)
 800140e:	2200      	movs	r2, #0
 8001410:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_CRC_Init+0x3c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_CRC_Init+0x3c>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_CRC_Init+0x3c>)
 8001420:	2201      	movs	r2, #1
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_CRC_Init+0x3c>)
 8001426:	f001 fe4f 	bl	80030c8 <HAL_CRC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001430:	f000 f9e0 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000bd0 	.word	0x20000bd0
 800143c:	40023000 	.word	0x40023000

08001440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_USART1_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART1_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART1_UART_Init+0x58>)
 8001484:	f006 f8da 	bl	800763c <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 f9b1 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000bf4 	.word	0x20000bf4
 800149c:	40013800 	.word	0x40013800

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <MX_GPIO_Init+0x114>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001504:	482c      	ldr	r0, [pc, #176]	; (80015b8 <MX_GPIO_Init+0x118>)
 8001506:	f002 f96f 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001510:	482a      	ldr	r0, [pc, #168]	; (80015bc <MX_GPIO_Init+0x11c>)
 8001512:	f002 f969 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f002 f962 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4619      	mov	r1, r3
 800153c:	481e      	ldr	r0, [pc, #120]	; (80015b8 <MX_GPIO_Init+0x118>)
 800153e:	f001 feb5 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001548:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <MX_GPIO_Init+0x11c>)
 800155a:	f001 fea7 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <MX_GPIO_Init+0x11c>)
 8001578:	f001 fe98 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800157c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f001 fe88 	bl	80032ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2028      	movs	r0, #40	; 0x28
 80015a2:	f001 fd5a 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015a6:	2028      	movs	r0, #40	; 0x28
 80015a8:	f001 fd73 	bl	8003092 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000c00 	.word	0x48000c00

080015c0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char * ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <_write+0x28>)
 80015d8:	f006 f87e 	bl	80076d8 <HAL_UART_Transmit>
  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000bf4 	.word	0x20000bf4

080015ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fc:	d106      	bne.n	800160c <HAL_GPIO_EXTI_Callback+0x20>
    dataRdyIntReceived++;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 8001606:	6013      	str	r3, [r2, #0]
    HAL_ResumeTick();
 8001608:	f001 fc3c 	bl	8002e84 <HAL_ResumeTick>
  }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000cb4 	.word	0x20000cb4

08001618 <MEMS_Init>:
////	if (uart_count==100){
////
////	}
//}
static void MEMS_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 8001622:	23d5      	movs	r3, #213	; 0xd5
 8001624:	753b      	strb	r3, [r7, #20]
  io_ctx.Init        = BSP_I2C2_Init;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MEMS_Init+0x7c>)
 8001628:	60bb      	str	r3, [r7, #8]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MEMS_Init+0x80>)
 800162c:	60fb      	str	r3, [r7, #12]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MEMS_Init+0x84>)
 8001630:	61fb      	str	r3, [r7, #28]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MEMS_Init+0x88>)
 8001634:	61bb      	str	r3, [r7, #24]
  io_ctx.GetTick     = BSP_GetTick;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MEMS_Init+0x8c>)
 8001638:	623b      	str	r3, [r7, #32]
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4619      	mov	r1, r3
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <MEMS_Init+0x90>)
 8001642:	f000 fbc9 	bl	8001dd8 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	4619      	mov	r1, r3
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <MEMS_Init+0x90>)
 800164c:	f000 fc97 	bl	8001f7e <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b6a      	cmp	r3, #106	; 0x6a
 8001654:	d001      	beq.n	800165a <MEMS_Init+0x42>
    Error_Handler();
 8001656:	f000 f8cd 	bl	80017f4 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MEMS_Init+0x90>)
 800165c:	f000 fc26 	bl	8001eac <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8001660:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MEMS_Init+0x90>)
 8001666:	f000 fd0b 	bl	8002080 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 800166a:	2104      	movs	r1, #4
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <MEMS_Init+0x90>)
 800166e:	f000 fd23 	bl	80020b8 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001672:	2101      	movs	r1, #1
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MEMS_Init+0x90>)
 8001676:	f000 fddd 	bl	8002234 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <MEMS_Init+0x90>)
 8001680:	f000 fd42 	bl	8002108 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <MEMS_Init+0x90>)
 8001686:	f000 fc90 	bl	8001faa <LSM6DSL_ACC_Enable>
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08001ab5 	.word	0x08001ab5
 8001698:	08001b31 	.word	0x08001b31
 800169c:	08001be5 	.word	0x08001be5
 80016a0:	08001b81 	.word	0x08001b81
 80016a4:	08001c49 	.word	0x08001c49
 80016a8:	20000c7c 	.word	0x20000c7c

080016ac <AI_Init>:
static void AI_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <AI_Init+0x64>)
 80016b4:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <AI_Init+0x68>)
 80016be:	f00d fed9 	bl	800f474 <ai_network_create_and_init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80016c6:	793b      	ldrb	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00a      	beq.n	80016e2 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80016cc:	793b      	ldrb	r3, [r7, #4]
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016d6:	461a      	mov	r2, r3
 80016d8:	480f      	ldr	r0, [pc, #60]	; (8001718 <AI_Init+0x6c>)
 80016da:	f011 fb19 	bl	8012d10 <iprintf>
    Error_Handler();
 80016de:	f000 f889 	bl	80017f4 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <AI_Init+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00d ff37 	bl	800f55c <ai_network_inputs_get>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <AI_Init+0x70>)
 80016f2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <AI_Init+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00d ff48 	bl	800f590 <ai_network_outputs_get>
 8001700:	4603      	mov	r3, r0
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <AI_Init+0x74>)
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000e0c 	.word	0x20000e0c
 8001714:	20000cb8 	.word	0x20000cb8
 8001718:	08016990 	.word	0x08016990
 800171c:	20002544 	.word	0x20002544
 8001720:	20002548 	.word	0x20002548

08001724 <AI_Run>:
static void AI_Run(float *pIn, float *pOut)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <AI_Run+0x60>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <AI_Run+0x64>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <AI_Run+0x68>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <AI_Run+0x60>)
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <AI_Run+0x64>)
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f00d ff76 	bl	800f63c <ai_network_run>
 8001750:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d011      	beq.n	800177c <AI_Run+0x58>
    err = ai_network_get_error(network);
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <AI_Run+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f00d fe67 	bl	800f430 <ai_network_get_error>
 8001762:	4603      	mov	r3, r0
 8001764:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001766:	7a3b      	ldrb	r3, [r7, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001770:	461a      	mov	r2, r3
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <AI_Run+0x6c>)
 8001774:	f011 facc 	bl	8012d10 <iprintf>
    Error_Handler();
 8001778:	f000 f83c 	bl	80017f4 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20002544 	.word	0x20002544
 8001788:	20002548 	.word	0x20002548
 800178c:	20000cb8 	.word	0x20000cb8
 8001790:	080169bc 	.word	0x080169bc

08001794 <argmax>:
  static uint32_t argmax(const float * values, uint32_t len)
  {
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    float max_value = values[0];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]
    uint32_t max_index = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < len; i++) {
 80017a8:	2301      	movs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e017      	b.n	80017de <argmax+0x4a>
      if (values[i] > max_value) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80017be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	d507      	bpl.n	80017d8 <argmax+0x44>
        max_value = values[i];
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	617b      	str	r3, [r7, #20]
        max_index = i;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < len; i++) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3e3      	bcc.n	80017ae <argmax+0x1a>

      }
    }
    return max_index;
 80017e6:	693b      	ldr	r3, [r7, #16]
  }
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  //blink LED if have error
	  while(1) {
	    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80017fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <Error_Handler+0x1c>)
 8001802:	f002 f809 	bl	8003818 <HAL_GPIO_TogglePin>
	    HAL_Delay(50); /* wait 50 ms */
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f001 fb08 	bl	8002e1c <HAL_Delay>
	    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800180c:	e7f6      	b.n	80017fc <Error_Handler+0x8>
 800180e:	bf00      	nop
 8001810:	48000400 	.word	0x48000400

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_MspInit+0x44>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_MspInit+0x44>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6613      	str	r3, [r2, #96]	; 0x60
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_MspInit+0x44>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x44>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_CRC_MspInit+0x38>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 8001874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001878:	6493      	str	r3, [r2, #72]	; 0x48
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_CRC_MspInit+0x3c>)
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023000 	.word	0x40023000
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0ac      	sub	sp, #176	; 0xb0
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2288      	movs	r2, #136	; 0x88
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f011 fbc1 	bl	8013044 <memset>
  if(huart->Instance==USART1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a21      	ldr	r2, [pc, #132]	; (800194c <HAL_UART_MspInit+0xb0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d13a      	bne.n	8001942 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f9f3 	bl	8006cc4 <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e4:	f7ff ff86 	bl	80017f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_UART_MspInit+0xb4>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_UART_MspInit+0xb4>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6613      	str	r3, [r2, #96]	; 0x60
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_UART_MspInit+0xb4>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_UART_MspInit+0xb4>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_UART_MspInit+0xb4>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_UART_MspInit+0xb4>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001930:	2307      	movs	r3, #7
 8001932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0xb8>)
 800193e:	f001 fcb5 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	37b0      	adds	r7, #176	; 0xb0
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40013800 	.word	0x40013800
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f001 fa1a 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019b4:	f001 ff4a 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <OTG_FS_IRQHandler+0x10>)
 80019c2:	f002 f9f1 	bl	8003da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200057a4 	.word	0x200057a4

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f011 fb82 	bl	8013108 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20018000 	.word	0x20018000
 8001a30:	00000800 	.word	0x00000800
 8001a34:	2000542c 	.word	0x2000542c
 8001a38:	20005cf8 	.word	0x20005cf8

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a64:	f7ff ffea 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f011 fb41 	bl	8013114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a92:	f7ff faad 	bl	8000ff0 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	20000bb4 	.word	0x20000bb4
  ldr r2, =_sidata
 8001aa4:	08046768 	.word	0x08046768
  ldr r2, =_sbss
 8001aa8:	20000bb4 	.word	0x20000bb4
  ldr r4, =_ebss
 8001aac:	20005cf4 	.word	0x20005cf4

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>
	...

08001ab4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <BSP_I2C2_Init+0x70>)
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <BSP_I2C2_Init+0x74>)
 8001ac2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <BSP_I2C2_Init+0x78>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4918      	ldr	r1, [pc, #96]	; (8001b2c <BSP_I2C2_Init+0x78>)
 8001acc:	600a      	str	r2, [r1, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d122      	bne.n	8001b18 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <BSP_I2C2_Init+0x70>)
 8001ad4:	f003 fe9c 	bl	8005810 <HAL_I2C_GetState>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d11c      	bne.n	8001b18 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <BSP_I2C2_Init+0x70>)
 8001ae0:	f000 f8fe 	bl	8001ce0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001aea:	480e      	ldr	r0, [pc, #56]	; (8001b24 <BSP_I2C2_Init+0x70>)
 8001aec:	f000 f8b4 	bl	8001c58 <MX_I2C2_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001af6:	f06f 0307 	mvn.w	r3, #7
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e00c      	b.n	8001b18 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <BSP_I2C2_Init+0x70>)
 8001b02:	f004 f957 	bl	8005db4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b0c:	f06f 0307 	mvn.w	r3, #7
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	e001      	b.n	8001b18 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20005430 	.word	0x20005430
 8001b28:	40005800 	.word	0x40005800
 8001b2c:	20005484 	.word	0x20005484

08001b30 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <BSP_I2C2_DeInit+0x48>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d014      	beq.n	8001b6c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <BSP_I2C2_DeInit+0x48>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <BSP_I2C2_DeInit+0x48>)
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <BSP_I2C2_DeInit+0x48>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10b      	bne.n	8001b6c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <BSP_I2C2_DeInit+0x4c>)
 8001b56:	f000 f923 	bl	8001da0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <BSP_I2C2_DeInit+0x4c>)
 8001b5c:	f003 fbe6 	bl	800532c <HAL_I2C_DeInit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001b66:	f06f 0307 	mvn.w	r3, #7
 8001b6a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20005484 	.word	0x20005484
 8001b7c:	20005430 	.word	0x20005430

08001b80 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	81bb      	strh	r3, [r7, #12]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001b9a:	89ba      	ldrh	r2, [r7, #12]
 8001b9c:	89f9      	ldrh	r1, [r7, #14]
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <BSP_I2C2_WriteReg+0x60>)
 8001bb0:	f003 fc00 	bl	80053b4 <HAL_I2C_Mem_Write>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <BSP_I2C2_WriteReg+0x60>)
 8001bbc:	f003 fe36 	bl	800582c <HAL_I2C_GetError>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d103      	bne.n	8001bce <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001bc6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e002      	b.n	8001bd4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bce:	f06f 0303 	mvn.w	r3, #3
 8001bd2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bd4:	697b      	ldr	r3, [r7, #20]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20005430 	.word	0x20005430

08001be4 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	81fb      	strh	r3, [r7, #14]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	81bb      	strh	r3, [r7, #12]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001bfe:	89ba      	ldrh	r2, [r7, #12]
 8001c00:	89f9      	ldrh	r1, [r7, #14]
 8001c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <BSP_I2C2_ReadReg+0x60>)
 8001c14:	f003 fce2 	bl	80055dc <HAL_I2C_Mem_Read>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001c1e:	4809      	ldr	r0, [pc, #36]	; (8001c44 <BSP_I2C2_ReadReg+0x60>)
 8001c20:	f003 fe04 	bl	800582c <HAL_I2C_GetError>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d103      	bne.n	8001c32 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c2a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e002      	b.n	8001c38 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c32:	f06f 0303 	mvn.w	r3, #3
 8001c36:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001c38:	697b      	ldr	r3, [r7, #20]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20005430 	.word	0x20005430

08001c48 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c4c:	f001 f8da 	bl	8002e04 <HAL_GetTick>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_I2C2_Init+0x80>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_I2C2_Init+0x84>)
 8001c6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f003 faab 	bl	80051f6 <HAL_I2C_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f004 f881 	bl	8005db4 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f004 f8c3 	bl	8005e4a <HAL_I2CEx_ConfigDigitalFilter>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40005800 	.word	0x40005800
 8001cdc:	00702991 	.word	0x00702991

08001ce0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ac      	sub	sp, #176	; 0xb0
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2288      	movs	r2, #136	; 0x88
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f011 f9a7 	bl	8013044 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 ffde 	bl	8006cc4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d44:	4619      	mov	r1, r3
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <I2C2_MspInit+0xbc>)
 8001d48:	f001 fab0 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d54:	2312      	movs	r3, #18
 8001d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001d66:	2304      	movs	r3, #4
 8001d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d70:	4619      	mov	r1, r3
 8001d72:	480a      	ldr	r0, [pc, #40]	; (8001d9c <I2C2_MspInit+0xbc>)
 8001d74:	f001 fa9a 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <I2C2_MspInit+0xb8>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	37b0      	adds	r7, #176	; 0xb0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400

08001da0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <I2C2_MspDeInit+0x30>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <I2C2_MspDeInit+0x30>)
 8001dae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <I2C2_MspDeInit+0x34>)
 8001dba:	f001 fc21 	bl	8003600 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <I2C2_MspDeInit+0x34>)
 8001dc4:	f001 fc1c 	bl	8003600 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e051      	b.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	7b1a      	ldrb	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <LSM6DSL_RegisterBusIO+0xcc>)
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <LSM6DSL_RegisterBusIO+0xd0>)
 8001e36:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e020      	b.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4798      	blx	r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e016      	b.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d112      	bne.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2112      	movs	r1, #18
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9b9 	bl	80021fe <LSM6DSL_Write_Reg>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	080024b9 	.word	0x080024b9
 8001ea8:	080024ef 	.word	0x080024ef

08001eac <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fcb4 	bl	8002828 <lsm6dsl_auto_increment_set>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e054      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fc26 	bl	8002724 <lsm6dsl_block_data_update_set>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e048      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fefb 	bl	8002ce6 <lsm6dsl_fifo_mode_set>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e03c      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2204      	movs	r2, #4
 8001f00:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3320      	adds	r3, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fb98 	bl	8002640 <lsm6dsl_xl_data_rate_set>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e02c      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb2e 	bl	8002584 <lsm6dsl_xl_full_scale_set>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e020      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2204      	movs	r2, #4
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fbc8 	bl	80026d8 <lsm6dsl_gy_data_rate_set>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e010      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3320      	adds	r3, #32
 8001f58:	2106      	movs	r1, #6
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fb96 	bl	800268c <lsm6dsl_gy_full_scale_set>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e004      	b.n	8001f76 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3320      	adds	r3, #32
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fc39 	bl	8002806 <lsm6dsl_device_id_get>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e000      	b.n	8001fa2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e014      	b.n	8001fea <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f103 0220 	add.w	r2, r3, #32
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fb36 	bl	8002640 <lsm6dsl_xl_data_rate_set>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e004      	b.n	8001fea <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3320      	adds	r3, #32
 8002006:	f107 020b 	add.w	r2, r7, #11
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fadf 	bl	80025d0 <lsm6dsl_xl_full_scale_get>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e023      	b.n	8002066 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d81b      	bhi.n	800205c <LSM6DSL_ACC_GetSensitivity+0x68>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002055 	.word	0x08002055
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204d 	.word	0x0800204d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002040:	601a      	str	r2, [r3, #0]
      break;
 8002042:	e00f      	b.n	8002064 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002048:	601a      	str	r2, [r3, #0]
      break;
 800204a:	e00b      	b.n	8002064 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002050:	601a      	str	r2, [r3, #0]
      break;
 8002052:	e007      	b.n	8002064 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002058:	601a      	str	r2, [r3, #0]
      break;
 800205a:	e003      	b.n	8002064 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	60fb      	str	r3, [r7, #12]
      break;
 8002062:	bf00      	nop
  }

  return ret;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	3d79db23 	.word	0x3d79db23
 8002074:	3df9db23 	.word	0x3df9db23
 8002078:	3e79db23 	.word	0x3e79db23
 800207c:	3ef9db23 	.word	0x3ef9db23

08002080 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002096:	ed97 0a00 	vldr	s0, [r7]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8fe 	bl	800229c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	e005      	b.n	80020b0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80020a4:	ed97 0a00 	vldr	s0, [r7]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f983 	bl	80023b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80020ae:	4603      	mov	r3, r0
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	dd0b      	ble.n	80020e0 <LSM6DSL_ACC_SetFullScale+0x28>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	dd06      	ble.n	80020dc <LSM6DSL_ACC_SetFullScale+0x24>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	dc01      	bgt.n	80020d8 <LSM6DSL_ACC_SetFullScale+0x20>
 80020d4:	2303      	movs	r3, #3
 80020d6:	e004      	b.n	80020e2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80020d8:	2301      	movs	r3, #1
 80020da:	e002      	b.n	80020e2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80020dc:	2302      	movs	r3, #2
 80020de:	e000      	b.n	80020e2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80020e0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80020e2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3320      	adds	r3, #32
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fa49 	bl	8002584 <lsm6dsl_xl_full_scale_set>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	e000      	b.n	8002100 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3320      	adds	r3, #32
 8002116:	f107 0208 	add.w	r2, r7, #8
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fb27 	bl	8002770 <lsm6dsl_acceleration_raw_get>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	e00c      	b.n	8002148 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800212e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002136:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800213e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3320      	adds	r3, #32
 8002164:	f107 0210 	add.w	r2, r7, #16
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb00 	bl	8002770 <lsm6dsl_acceleration_raw_get>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e03c      	b.n	80021f6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff36 	bl	8001ff4 <LSM6DSL_ACC_GetSensitivity>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e030      	b.n	80021f6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002194:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 2a90 	vmov	r2, s15
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80021b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 2a90 	vmov	r2, s15
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80021d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ec:	ee17 2a90 	vmov	r2, s15
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	4613      	mov	r3, r2
 800220c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 0020 	add.w	r0, r3, #32
 8002214:	1cba      	adds	r2, r7, #2
 8002216:	78f9      	ldrb	r1, [r7, #3]
 8002218:	2301      	movs	r3, #1
 800221a:	f000 f99b 	bl	8002554 <lsm6dsl_write_reg>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	e000      	b.n	800222c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3320      	adds	r3, #32
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fc75 	bl	8002b3a <lsm6dsl_pin_int1_route_get>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e01b      	b.n	8002294 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d811      	bhi.n	8002286 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	7b3b      	ldrb	r3, [r7, #12]
 800226c:	f362 0300 	bfi	r3, r2, #0, #1
 8002270:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3320      	adds	r3, #32
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fafb 	bl	8002874 <lsm6dsl_pin_int1_route_set>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002284:	e002      	b.n	800228c <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e003      	b.n	8002294 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e000      	b.n	8002294 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80022a8:	edd7 7a00 	vldr	s15, [r7]
 80022ac:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80022b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	d801      	bhi.n	80022be <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e058      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022be:	edd7 7a00 	vldr	s15, [r7]
 80022c2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80022c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d801      	bhi.n	80022d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e04d      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002398 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80022dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d801      	bhi.n	80022ea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e042      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022ea:	edd7 7a00 	vldr	s15, [r7]
 80022ee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800239c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d801      	bhi.n	8002300 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e037      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002300:	edd7 7a00 	vldr	s15, [r7]
 8002304:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80023a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d801      	bhi.n	8002316 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002312:	2305      	movs	r3, #5
 8002314:	e02c      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002316:	edd7 7a00 	vldr	s15, [r7]
 800231a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800231e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d801      	bhi.n	800232c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002328:	2306      	movs	r3, #6
 800232a:	e021      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800232c:	edd7 7a00 	vldr	s15, [r7]
 8002330:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d801      	bhi.n	8002342 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800233e:	2307      	movs	r3, #7
 8002340:	e016      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002342:	edd7 7a00 	vldr	s15, [r7]
 8002346:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80023ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800234a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	d801      	bhi.n	8002358 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002354:	2308      	movs	r3, #8
 8002356:	e00b      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002358:	edd7 7a00 	vldr	s15, [r7]
 800235c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80023b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	d801      	bhi.n	800236e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800236a:	2309      	movs	r3, #9
 800236c:	e000      	b.n	8002370 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800236e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002370:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3320      	adds	r3, #32
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f960 	bl	8002640 <lsm6dsl_xl_data_rate_set>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e000      	b.n	800238e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	42500000 	.word	0x42500000
 800239c:	42d00000 	.word	0x42d00000
 80023a0:	43500000 	.word	0x43500000
 80023a4:	43d00000 	.word	0x43d00000
 80023a8:	44504000 	.word	0x44504000
 80023ac:	44cf8000 	.word	0x44cf8000
 80023b0:	45502000 	.word	0x45502000

080023b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80023c0:	edd7 7a00 	vldr	s15, [r7]
 80023c4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80023c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d801      	bhi.n	80023d6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e058      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023d6:	edd7 7a00 	vldr	s15, [r7]
 80023da:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80023de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d801      	bhi.n	80023ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e04d      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023ec:	edd7 7a00 	vldr	s15, [r7]
 80023f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800249c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80023f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	d801      	bhi.n	8002402 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80023fe:	2303      	movs	r3, #3
 8002400:	e042      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002402:	edd7 7a00 	vldr	s15, [r7]
 8002406:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80024a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	d801      	bhi.n	8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002414:	2304      	movs	r3, #4
 8002416:	e037      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002418:	edd7 7a00 	vldr	s15, [r7]
 800241c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024a4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	d801      	bhi.n	800242e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800242a:	2305      	movs	r3, #5
 800242c:	e02c      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800242e:	edd7 7a00 	vldr	s15, [r7]
 8002432:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80024a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d801      	bhi.n	8002444 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002440:	2306      	movs	r3, #6
 8002442:	e021      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002444:	edd7 7a00 	vldr	s15, [r7]
 8002448:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80024ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d801      	bhi.n	800245a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002456:	2307      	movs	r3, #7
 8002458:	e016      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8002462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	d801      	bhi.n	8002470 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800246c:	2308      	movs	r3, #8
 800246e:	e00b      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002470:	edd7 7a00 	vldr	s15, [r7]
 8002474:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d801      	bhi.n	8002486 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002482:	2309      	movs	r3, #9
 8002484:	e000      	b.n	8002488 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002486:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	42500000 	.word	0x42500000
 80024a0:	42d00000 	.word	0x42d00000
 80024a4:	43500000 	.word	0x43500000
 80024a8:	43d00000 	.word	0x43d00000
 80024ac:	44504000 	.word	0x44504000
 80024b0:	44cf8000 	.word	0x44cf8000
 80024b4:	45502000 	.word	0x45502000

080024b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	72fb      	strb	r3, [r7, #11]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	695c      	ldr	r4, [r3, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	7b1b      	ldrb	r3, [r3, #12]
 80024d8:	b298      	uxth	r0, r3
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	b299      	uxth	r1, r3
 80024de:	893b      	ldrh	r3, [r7, #8]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	47a0      	blx	r4
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}

080024ee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024ee:	b590      	push	{r4, r7, lr}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	461a      	mov	r2, r3
 80024fa:	460b      	mov	r3, r1
 80024fc:	72fb      	strb	r3, [r7, #11]
 80024fe:	4613      	mov	r3, r2
 8002500:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	691c      	ldr	r4, [r3, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	7b1b      	ldrb	r3, [r3, #12]
 800250e:	b298      	uxth	r0, r3
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	b299      	uxth	r1, r3
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	47a0      	blx	r4
 800251a:	4603      	mov	r3, r0
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}

08002524 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	460b      	mov	r3, r1
 8002532:	72fb      	strb	r3, [r7, #11]
 8002534:	4613      	mov	r3, r2
 8002536:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685c      	ldr	r4, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68d8      	ldr	r0, [r3, #12]
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	7af9      	ldrb	r1, [r7, #11]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	47a0      	blx	r4
 8002548:	6178      	str	r0, [r7, #20]

  return ret;
 800254a:	697b      	ldr	r3, [r7, #20]
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}

08002554 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	460b      	mov	r3, r1
 8002562:	72fb      	strb	r3, [r7, #11]
 8002564:	4613      	mov	r3, r2
 8002566:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	68d8      	ldr	r0, [r3, #12]
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	7af9      	ldrb	r1, [r7, #11]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	47a0      	blx	r4
 8002578:	6178      	str	r0, [r7, #20]

  return ret;
 800257a:	697b      	ldr	r3, [r7, #20]
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}

08002584 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002590:	f107 0208 	add.w	r2, r7, #8
 8002594:	2301      	movs	r3, #1
 8002596:	2110      	movs	r1, #16
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffc3 	bl	8002524 <lsm6dsl_read_reg>
 800259e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	7a3b      	ldrb	r3, [r7, #8]
 80025b0:	f362 0383 	bfi	r3, r2, #2, #2
 80025b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	2301      	movs	r3, #1
 80025bc:	2110      	movs	r1, #16
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffc8 	bl	8002554 <lsm6dsl_write_reg>
 80025c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025da:	f107 0208 	add.w	r2, r7, #8
 80025de:	2301      	movs	r3, #1
 80025e0:	2110      	movs	r1, #16
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff9e 	bl	8002524 <lsm6dsl_read_reg>
 80025e8:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d81a      	bhi.n	800262c <lsm6dsl_xl_full_scale_get+0x5c>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <lsm6dsl_xl_full_scale_get+0x2c>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002615 	.word	0x08002615
 8002604:	0800261d 	.word	0x0800261d
 8002608:	08002625 	.word	0x08002625
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e00f      	b.n	8002634 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
      break;
 800261a:	e00b      	b.n	8002634 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
      break;
 8002622:	e007      	b.n	8002634 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e003      	b.n	8002634 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	701a      	strb	r2, [r3, #0]
      break;
 8002632:	bf00      	nop
  }

  return ret;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800264c:	f107 0208 	add.w	r2, r7, #8
 8002650:	2301      	movs	r3, #1
 8002652:	2110      	movs	r1, #16
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff65 	bl	8002524 <lsm6dsl_read_reg>
 800265a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	7a3b      	ldrb	r3, [r7, #8]
 800266c:	f362 1307 	bfi	r3, r2, #4, #4
 8002670:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002672:	f107 0208 	add.w	r2, r7, #8
 8002676:	2301      	movs	r3, #1
 8002678:	2110      	movs	r1, #16
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff6a 	bl	8002554 <lsm6dsl_write_reg>
 8002680:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002698:	f107 0208 	add.w	r2, r7, #8
 800269c:	2301      	movs	r3, #1
 800269e:	2111      	movs	r1, #17
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff3f 	bl	8002524 <lsm6dsl_read_reg>
 80026a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	7a3b      	ldrb	r3, [r7, #8]
 80026b8:	f362 0343 	bfi	r3, r2, #1, #3
 80026bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026be:	f107 0208 	add.w	r2, r7, #8
 80026c2:	2301      	movs	r3, #1
 80026c4:	2111      	movs	r1, #17
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff44 	bl	8002554 <lsm6dsl_write_reg>
 80026cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80026e4:	f107 0208 	add.w	r2, r7, #8
 80026e8:	2301      	movs	r3, #1
 80026ea:	2111      	movs	r1, #17
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff19 	bl	8002524 <lsm6dsl_read_reg>
 80026f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	7a3b      	ldrb	r3, [r7, #8]
 8002704:	f362 1307 	bfi	r3, r2, #4, #4
 8002708:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800270a:	f107 0208 	add.w	r2, r7, #8
 800270e:	2301      	movs	r3, #1
 8002710:	2111      	movs	r1, #17
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff1e 	bl	8002554 <lsm6dsl_write_reg>
 8002718:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002730:	f107 0208 	add.w	r2, r7, #8
 8002734:	2301      	movs	r3, #1
 8002736:	2112      	movs	r1, #18
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fef3 	bl	8002524 <lsm6dsl_read_reg>
 800273e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	7a3b      	ldrb	r3, [r7, #8]
 8002750:	f362 1386 	bfi	r3, r2, #6, #1
 8002754:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002756:	f107 0208 	add.w	r2, r7, #8
 800275a:	2301      	movs	r3, #1
 800275c:	2112      	movs	r1, #18
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fef8 	bl	8002554 <lsm6dsl_write_reg>
 8002764:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800277a:	f107 020c 	add.w	r2, r7, #12
 800277e:	2306      	movs	r3, #6
 8002780:	2128      	movs	r1, #40	; 0x28
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fece 	bl	8002524 <lsm6dsl_read_reg>
 8002788:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	b21a      	sxth	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002798:	b29b      	uxth	r3, r3
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b29a      	uxth	r2, r3
 800279e:	7b3b      	ldrb	r3, [r7, #12]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3302      	adds	r3, #2
 80027b2:	b212      	sxth	r2, r2
 80027b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3302      	adds	r3, #2
 80027ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3302      	adds	r3, #2
 80027d0:	b212      	sxth	r2, r2
 80027d2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80027d4:	7c7a      	ldrb	r2, [r7, #17]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3304      	adds	r3, #4
 80027da:	b212      	sxth	r2, r2
 80027dc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	7c3b      	ldrb	r3, [r7, #16]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	b212      	sxth	r2, r2
 80027fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80027fc:	697b      	ldr	r3, [r7, #20]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002810:	2301      	movs	r3, #1
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	210f      	movs	r1, #15
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fe84 	bl	8002524 <lsm6dsl_read_reg>
 800281c:	60f8      	str	r0, [r7, #12]

  return ret;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002834:	f107 0208 	add.w	r2, r7, #8
 8002838:	2301      	movs	r3, #1
 800283a:	2112      	movs	r1, #18
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe71 	bl	8002524 <lsm6dsl_read_reg>
 8002842:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	7a3b      	ldrb	r3, [r7, #8]
 8002854:	f362 0382 	bfi	r3, r2, #2, #1
 8002858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800285a:	f107 0208 	add.w	r2, r7, #8
 800285e:	2301      	movs	r3, #1
 8002860:	2112      	movs	r1, #18
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fe76 	bl	8002554 <lsm6dsl_write_reg>
 8002868:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800287e:	f107 021c 	add.w	r2, r7, #28
 8002882:	2301      	movs	r3, #1
 8002884:	210d      	movs	r1, #13
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fe4c 	bl	8002524 <lsm6dsl_read_reg>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d147      	bne.n	8002924 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8002894:	783b      	ldrb	r3, [r7, #0]
 8002896:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	7f3b      	ldrb	r3, [r7, #28]
 800289e:	f362 0300 	bfi	r3, r2, #0, #1
 80028a2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80028a4:	783b      	ldrb	r3, [r7, #0]
 80028a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	7f3b      	ldrb	r3, [r7, #28]
 80028ae:	f362 0341 	bfi	r3, r2, #1, #1
 80028b2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80028b4:	783b      	ldrb	r3, [r7, #0]
 80028b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	7f3b      	ldrb	r3, [r7, #28]
 80028be:	f362 0382 	bfi	r3, r2, #2, #1
 80028c2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80028c4:	783b      	ldrb	r3, [r7, #0]
 80028c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	7f3b      	ldrb	r3, [r7, #28]
 80028ce:	f362 03c3 	bfi	r3, r2, #3, #1
 80028d2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80028d4:	783b      	ldrb	r3, [r7, #0]
 80028d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7f3b      	ldrb	r3, [r7, #28]
 80028de:	f362 1304 	bfi	r3, r2, #4, #1
 80028e2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80028e4:	783b      	ldrb	r3, [r7, #0]
 80028e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7f3b      	ldrb	r3, [r7, #28]
 80028ee:	f362 1345 	bfi	r3, r2, #5, #1
 80028f2:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80028f4:	783b      	ldrb	r3, [r7, #0]
 80028f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	7f3b      	ldrb	r3, [r7, #28]
 80028fe:	f362 1386 	bfi	r3, r2, #6, #1
 8002902:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8002904:	783b      	ldrb	r3, [r7, #0]
 8002906:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	7f3b      	ldrb	r3, [r7, #28]
 800290e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002912:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002914:	f107 021c 	add.w	r2, r7, #28
 8002918:	2301      	movs	r3, #1
 800291a:	210d      	movs	r1, #13
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fe19 	bl	8002554 <lsm6dsl_write_reg>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800292a:	f107 0218 	add.w	r2, r7, #24
 800292e:	2301      	movs	r3, #1
 8002930:	215e      	movs	r1, #94	; 0x5e
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fdf6 	bl	8002524 <lsm6dsl_read_reg>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002940:	f107 0214 	add.w	r2, r7, #20
 8002944:	2301      	movs	r3, #1
 8002946:	215f      	movs	r1, #95	; 0x5f
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fdeb 	bl	8002524 <lsm6dsl_read_reg>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d147      	bne.n	80029e6 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8002956:	787b      	ldrb	r3, [r7, #1]
 8002958:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	7e3b      	ldrb	r3, [r7, #24]
 8002960:	f362 0300 	bfi	r3, r2, #0, #1
 8002964:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8002966:	787b      	ldrb	r3, [r7, #1]
 8002968:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	7e3b      	ldrb	r3, [r7, #24]
 8002970:	f362 0341 	bfi	r3, r2, #1, #1
 8002974:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8002976:	787b      	ldrb	r3, [r7, #1]
 8002978:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	7e3b      	ldrb	r3, [r7, #24]
 8002980:	f362 0382 	bfi	r3, r2, #2, #1
 8002984:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002986:	787b      	ldrb	r3, [r7, #1]
 8002988:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7e3b      	ldrb	r3, [r7, #24]
 8002990:	f362 03c3 	bfi	r3, r2, #3, #1
 8002994:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002996:	787b      	ldrb	r3, [r7, #1]
 8002998:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	7e3b      	ldrb	r3, [r7, #24]
 80029a0:	f362 1304 	bfi	r3, r2, #4, #1
 80029a4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 80029a6:	787b      	ldrb	r3, [r7, #1]
 80029a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	7e3b      	ldrb	r3, [r7, #24]
 80029b0:	f362 1345 	bfi	r3, r2, #5, #1
 80029b4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80029b6:	787b      	ldrb	r3, [r7, #1]
 80029b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	7e3b      	ldrb	r3, [r7, #24]
 80029c0:	f362 1386 	bfi	r3, r2, #6, #1
 80029c4:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80029c6:	787b      	ldrb	r3, [r7, #1]
 80029c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	7e3b      	ldrb	r3, [r7, #24]
 80029d0:	f362 13c7 	bfi	r3, r2, #7, #1
 80029d4:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80029d6:	f107 0218 	add.w	r2, r7, #24
 80029da:	2301      	movs	r3, #1
 80029dc:	215e      	movs	r1, #94	; 0x5e
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fdb8 	bl	8002554 <lsm6dsl_write_reg>
 80029e4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80029ec:	f107 0210 	add.w	r2, r7, #16
 80029f0:	2301      	movs	r3, #1
 80029f2:	2113      	movs	r1, #19
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fd95 	bl	8002524 <lsm6dsl_read_reg>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8002a02:	78bb      	ldrb	r3, [r7, #2]
 8002a04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	7c3b      	ldrb	r3, [r7, #16]
 8002a0c:	f362 1304 	bfi	r3, r2, #4, #1
 8002a10:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002a12:	f107 0210 	add.w	r2, r7, #16
 8002a16:	2301      	movs	r3, #1
 8002a18:	2113      	movs	r1, #19
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fd9a 	bl	8002554 <lsm6dsl_write_reg>
 8002a20:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002a28:	f107 0220 	add.w	r2, r7, #32
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	211a      	movs	r1, #26
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fd77 	bl	8002524 <lsm6dsl_read_reg>
 8002a36:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d111      	bne.n	8002a62 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002a3e:	78bb      	ldrb	r3, [r7, #2]
 8002a40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a4a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a4e:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002a52:	f107 0220 	add.w	r2, r7, #32
 8002a56:	2301      	movs	r3, #1
 8002a58:	211a      	movs	r1, #26
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fd7a 	bl	8002554 <lsm6dsl_write_reg>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d158      	bne.n	8002b1a <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002a68:	f107 020c 	add.w	r2, r7, #12
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	2158      	movs	r1, #88	; 0x58
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fd57 	bl	8002524 <lsm6dsl_read_reg>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d141      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d13b      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d135      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d12f      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d129      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002aba:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d123      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002ac0:	7d3b      	ldrb	r3, [r7, #20]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002acc:	7d3b      	ldrb	r3, [r7, #20]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d117      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002ad8:	7d3b      	ldrb	r3, [r7, #20]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d111      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002ae4:	7d3b      	ldrb	r3, [r7, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002af0:	7d3b      	ldrb	r3, [r7, #20]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002afc:	7d3b      	ldrb	r3, [r7, #20]
 8002afe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b02:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002b08:	7b3b      	ldrb	r3, [r7, #12]
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	733b      	strb	r3, [r7, #12]
 8002b10:	e003      	b.n	8002b1a <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002b12:	7b3b      	ldrb	r3, [r7, #12]
 8002b14:	f36f 13c7 	bfc	r3, #7, #1
 8002b18:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002b20:	f107 020c 	add.w	r2, r7, #12
 8002b24:	2301      	movs	r3, #1
 8002b26:	2158      	movs	r1, #88	; 0x58
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fd13 	bl	8002554 <lsm6dsl_write_reg>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b088      	sub	sp, #32
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002b44:	f107 0214 	add.w	r2, r7, #20
 8002b48:	2301      	movs	r3, #1
 8002b4a:	210d      	movs	r1, #13
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fce9 	bl	8002524 <lsm6dsl_read_reg>
 8002b52:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80c0 	bne.w	8002cdc <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002b5c:	7d3b      	ldrb	r3, [r7, #20]
 8002b5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	7813      	ldrb	r3, [r2, #0]
 8002b68:	f361 0300 	bfi	r3, r1, #0, #1
 8002b6c:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002b6e:	7d3b      	ldrb	r3, [r7, #20]
 8002b70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b74:	b2d9      	uxtb	r1, r3
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	7813      	ldrb	r3, [r2, #0]
 8002b7a:	f361 0341 	bfi	r3, r1, #1, #1
 8002b7e:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002b80:	7d3b      	ldrb	r3, [r7, #20]
 8002b82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b86:	b2d9      	uxtb	r1, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	7813      	ldrb	r3, [r2, #0]
 8002b8c:	f361 0382 	bfi	r3, r1, #2, #1
 8002b90:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002b92:	7d3b      	ldrb	r3, [r7, #20]
 8002b94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b98:	b2d9      	uxtb	r1, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	7813      	ldrb	r3, [r2, #0]
 8002b9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002ba2:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002ba4:	7d3b      	ldrb	r3, [r7, #20]
 8002ba6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002baa:	b2d9      	uxtb	r1, r3
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	7813      	ldrb	r3, [r2, #0]
 8002bb0:	f361 1304 	bfi	r3, r1, #4, #1
 8002bb4:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002bb6:	7d3b      	ldrb	r3, [r7, #20]
 8002bb8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bbc:	b2d9      	uxtb	r1, r3
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	7813      	ldrb	r3, [r2, #0]
 8002bc2:	f361 1345 	bfi	r3, r1, #5, #1
 8002bc6:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002bc8:	7d3b      	ldrb	r3, [r7, #20]
 8002bca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bce:	b2d9      	uxtb	r1, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	7813      	ldrb	r3, [r2, #0]
 8002bd4:	f361 1386 	bfi	r3, r1, #6, #1
 8002bd8:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002bda:	7d3b      	ldrb	r3, [r7, #20]
 8002bdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002be0:	b2d9      	uxtb	r1, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	7813      	ldrb	r3, [r2, #0]
 8002be6:	f361 13c7 	bfi	r3, r1, #7, #1
 8002bea:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002bec:	f107 0210 	add.w	r2, r7, #16
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	215e      	movs	r1, #94	; 0x5e
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fc95 	bl	8002524 <lsm6dsl_read_reg>
 8002bfa:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d16c      	bne.n	8002cdc <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8002c02:	7c3b      	ldrb	r3, [r7, #16]
 8002c04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c08:	b2d9      	uxtb	r1, r3
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	7853      	ldrb	r3, [r2, #1]
 8002c0e:	f361 0300 	bfi	r3, r1, #0, #1
 8002c12:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002c14:	7c3b      	ldrb	r3, [r7, #16]
 8002c16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c1a:	b2d9      	uxtb	r1, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	7853      	ldrb	r3, [r2, #1]
 8002c20:	f361 0341 	bfi	r3, r1, #1, #1
 8002c24:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002c26:	7c3b      	ldrb	r3, [r7, #16]
 8002c28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c2c:	b2d9      	uxtb	r1, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	7853      	ldrb	r3, [r2, #1]
 8002c32:	f361 0382 	bfi	r3, r1, #2, #1
 8002c36:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002c38:	7c3b      	ldrb	r3, [r7, #16]
 8002c3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	7853      	ldrb	r3, [r2, #1]
 8002c44:	f361 03c3 	bfi	r3, r1, #3, #1
 8002c48:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002c4a:	7c3b      	ldrb	r3, [r7, #16]
 8002c4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	7853      	ldrb	r3, [r2, #1]
 8002c56:	f361 1304 	bfi	r3, r1, #4, #1
 8002c5a:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002c5c:	7c3b      	ldrb	r3, [r7, #16]
 8002c5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c62:	b2d9      	uxtb	r1, r3
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	7853      	ldrb	r3, [r2, #1]
 8002c68:	f361 1345 	bfi	r3, r1, #5, #1
 8002c6c:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002c6e:	7c3b      	ldrb	r3, [r7, #16]
 8002c70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c74:	b2d9      	uxtb	r1, r3
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	7853      	ldrb	r3, [r2, #1]
 8002c7a:	f361 1386 	bfi	r3, r1, #6, #1
 8002c7e:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002c80:	7c3b      	ldrb	r3, [r7, #16]
 8002c82:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c86:	b2d9      	uxtb	r1, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	7853      	ldrb	r3, [r2, #1]
 8002c8c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002c90:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002c92:	f107 020c 	add.w	r2, r7, #12
 8002c96:	2301      	movs	r3, #1
 8002c98:	2113      	movs	r1, #19
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fc42 	bl	8002524 <lsm6dsl_read_reg>
 8002ca0:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d119      	bne.n	8002cdc <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002ca8:	7b3b      	ldrb	r3, [r7, #12]
 8002caa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002cae:	b2d9      	uxtb	r1, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	7893      	ldrb	r3, [r2, #2]
 8002cb4:	f361 0300 	bfi	r3, r1, #0, #1
 8002cb8:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002cba:	f107 0218 	add.w	r2, r7, #24
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	211a      	movs	r1, #26
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fc2e 	bl	8002524 <lsm6dsl_read_reg>
 8002cc8:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002cca:	7e3b      	ldrb	r3, [r7, #24]
 8002ccc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002cd0:	b2d9      	uxtb	r1, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	7893      	ldrb	r3, [r2, #2]
 8002cd6:	f361 0300 	bfi	r3, r1, #0, #1
 8002cda:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002cf2:	f107 0208 	add.w	r2, r7, #8
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	210a      	movs	r1, #10
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fc12 	bl	8002524 <lsm6dsl_read_reg>
 8002d00:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10f      	bne.n	8002d28 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	7a3b      	ldrb	r3, [r7, #8]
 8002d12:	f362 0302 	bfi	r3, r2, #0, #3
 8002d16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002d18:	f107 0208 	add.w	r2, r7, #8
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	210a      	movs	r1, #10
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fc17 	bl	8002554 <lsm6dsl_write_reg>
 8002d26:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f000 f981 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 f80e 	bl	8002d64 <HAL_InitTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	71fb      	strb	r3, [r7, #7]
 8002d52:	e001      	b.n	8002d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d54:	f7fe fd5e 	bl	8001814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d58:	79fb      	ldrb	r3, [r7, #7]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_InitTick+0x6c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_InitTick+0x70>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_InitTick+0x6c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f98d 	bl	80030ae <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d809      	bhi.n	8002db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 f957 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_InitTick+0x74>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e007      	b.n	8002dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e004      	b.n	8002dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e001      	b.n	8002dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000024 	.word	0x20000024
 8002dd4:	2000001c 	.word	0x2000001c
 8002dd8:	20000020 	.word	0x20000020

08002ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000024 	.word	0x20000024
 8002e00:	20005488 	.word	0x20005488

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20005488 	.word	0x20005488

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_Delay+0x44>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000024 	.word	0x20000024

08002e64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_SuspendTick+0x1c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_SuspendTick+0x1c>)
 8002e6e:	f023 0302 	bic.w	r3, r3, #2
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_ResumeTick+0x1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_ResumeTick+0x1c>)
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e054      	b.n	8003184 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7f5b      	ldrb	r3, [r3, #29]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fbb6 	bl	800185c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	791b      	ldrb	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <HAL_CRC_Init+0xc4>)
 8003104:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0218 	bic.w	r2, r2, #24
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	e00c      	b.n	8003132 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	461a      	mov	r2, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f834 	bl	8003190 <HAL_CRCEx_Polynomial_Set>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e028      	b.n	8003184 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	795b      	ldrb	r3, [r3, #5]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f04f 32ff 	mov.w	r2, #4294967295
 8003142:	611a      	str	r2, [r3, #16]
 8003144:	e004      	b.n	8003150 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6912      	ldr	r2, [r2, #16]
 800314e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	04c11db7 	.word	0x04c11db7

08003190 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031a0:	231f      	movs	r3, #31
 80031a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
 80031b2:	e063      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031b4:	bf00      	nop
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	613a      	str	r2, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	d846      	bhi.n	8003268 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	0800326f 	.word	0x0800326f
 80031e4:	08003269 	.word	0x08003269
 80031e8:	08003269 	.word	0x08003269
 80031ec:	08003269 	.word	0x08003269
 80031f0:	08003269 	.word	0x08003269
 80031f4:	08003269 	.word	0x08003269
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003269 	.word	0x08003269
 8003200:	0800325d 	.word	0x0800325d
 8003204:	08003269 	.word	0x08003269
 8003208:	08003269 	.word	0x08003269
 800320c:	08003269 	.word	0x08003269
 8003210:	08003269 	.word	0x08003269
 8003214:	08003269 	.word	0x08003269
 8003218:	08003269 	.word	0x08003269
 800321c:	08003269 	.word	0x08003269
 8003220:	08003251 	.word	0x08003251
 8003224:	08003269 	.word	0x08003269
 8003228:	08003269 	.word	0x08003269
 800322c:	08003269 	.word	0x08003269
 8003230:	08003269 	.word	0x08003269
 8003234:	08003269 	.word	0x08003269
 8003238:	08003269 	.word	0x08003269
 800323c:	08003269 	.word	0x08003269
 8003240:	08003245 	.word	0x08003245
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d913      	bls.n	8003272 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800324e:	e010      	b.n	8003272 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d90f      	bls.n	8003276 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800325a:	e00c      	b.n	8003276 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d90b      	bls.n	800327a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003266:	e008      	b.n	800327a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
        break;
 800326c:	e006      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800326e:	bf00      	nop
 8003270:	e004      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0118 	bic.w	r1, r3, #24
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	e17f      	b.n	80035bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8171 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d005      	beq.n	80032ec <HAL_GPIO_Init+0x40>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0201 	and.w	r2, r3, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d118      	bne.n	800338c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	6939      	ldr	r1, [r7, #16]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80ac 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_GPIO_Init+0x330>)
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <HAL_GPIO_Init+0x330>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6613      	str	r3, [r2, #96]	; 0x60
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <HAL_GPIO_Init+0x330>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003476:	4a5a      	ldr	r2, [pc, #360]	; (80035e0 <HAL_GPIO_Init+0x334>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x242>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_GPIO_Init+0x338>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x23e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4e      	ldr	r2, [pc, #312]	; (80035e8 <HAL_GPIO_Init+0x33c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x23a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_GPIO_Init+0x340>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x236>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <HAL_GPIO_Init+0x344>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x232>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_GPIO_Init+0x348>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <HAL_GPIO_Init+0x34c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x22a>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00c      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e00a      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034da:	2305      	movs	r3, #5
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034de:	2304      	movs	r3, #4
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ee:	2300      	movs	r3, #0
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003500:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_GPIO_Init+0x334>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003532:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_GPIO_Init+0x350>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_GPIO_Init+0x350>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_GPIO_Init+0x350>)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_GPIO_Init+0x350>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_GPIO_Init+0x350>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f ae78 	bne.w	80032bc <HAL_GPIO_Init+0x10>
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800
 80035ec:	48000c00 	.word	0x48000c00
 80035f0:	48001000 	.word	0x48001000
 80035f4:	48001400 	.word	0x48001400
 80035f8:	48001800 	.word	0x48001800
 80035fc:	40010400 	.word	0x40010400

08003600 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800360e:	e0cd      	b.n	80037ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003610:	2201      	movs	r2, #1
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c0 	beq.w	80037a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003626:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800364e:	d025      	beq.n	800369c <HAL_GPIO_DeInit+0x9c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a5e      	ldr	r2, [pc, #376]	; (80037cc <HAL_GPIO_DeInit+0x1cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01f      	beq.n	8003698 <HAL_GPIO_DeInit+0x98>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <HAL_GPIO_DeInit+0x1d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d019      	beq.n	8003694 <HAL_GPIO_DeInit+0x94>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a5c      	ldr	r2, [pc, #368]	; (80037d4 <HAL_GPIO_DeInit+0x1d4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_GPIO_DeInit+0x90>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_GPIO_DeInit+0x1d8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_DeInit+0x8c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a5a      	ldr	r2, [pc, #360]	; (80037dc <HAL_GPIO_DeInit+0x1dc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_DeInit+0x88>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a59      	ldr	r2, [pc, #356]	; (80037e0 <HAL_GPIO_DeInit+0x1e0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_DeInit+0x84>
 8003680:	2306      	movs	r3, #6
 8003682:	e00c      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003684:	2307      	movs	r3, #7
 8003686:	e00a      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003688:	2305      	movs	r3, #5
 800368a:	e008      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 800368c:	2304      	movs	r3, #4
 800368e:	e006      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003690:	2303      	movs	r3, #3
 8003692:	e004      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003694:	2302      	movs	r3, #2
 8003696:	e002      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_GPIO_DeInit+0x9e>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4093      	lsls	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d132      	bne.n	8003714 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036ae:	4b4d      	ldr	r3, [pc, #308]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	494b      	ldr	r1, [pc, #300]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80036bc:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	4947      	ldr	r1, [pc, #284]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4944      	ldr	r1, [pc, #272]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	4940      	ldr	r1, [pc, #256]	; (80037e4 <HAL_GPIO_DeInit+0x1e4>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	220f      	movs	r2, #15
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3302      	adds	r3, #2
 80036fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43da      	mvns	r2, r3
 8003706:	4830      	ldr	r0, [pc, #192]	; (80037c8 <HAL_GPIO_DeInit+0x1c8>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	400a      	ands	r2, r1
 800370e:	3302      	adds	r3, #2
 8003710:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2103      	movs	r1, #3
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	08d2      	lsrs	r2, r2, #3
 8003748:	4019      	ands	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2103      	movs	r1, #3
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	401a      	ands	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	2101      	movs	r1, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2103      	movs	r1, #3
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	2101      	movs	r1, #1
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f af2b 	bne.w	8003610 <HAL_GPIO_DeInit+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40010000 	.word	0x40010000
 80037cc:	48000400 	.word	0x48000400
 80037d0:	48000800 	.word	0x48000800
 80037d4:	48000c00 	.word	0x48000c00
 80037d8:	48001000 	.word	0x48001000
 80037dc:	48001400 	.word	0x48001400
 80037e0:	48001800 	.word	0x48001800
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003804:	e002      	b.n	800380c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	041a      	lsls	r2, r3, #16
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43d9      	mvns	r1, r3
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	400b      	ands	r3, r1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd febe 	bl	80015ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400

0800387c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b08f      	sub	sp, #60	; 0x3c
 8003880:	af0a      	add	r7, sp, #40	; 0x28
 8003882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e054      	b.n	8003938 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f00b f965 	bl	800eb78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fc97 	bl	8008200 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	687e      	ldr	r6, [r7, #4]
 80038da:	466d      	mov	r5, sp
 80038dc:	f106 0410 	add.w	r4, r6, #16
 80038e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80038f0:	1d33      	adds	r3, r6, #4
 80038f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f004 fc46 	bl	8008186 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fc8e 	bl	8008222 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	687e      	ldr	r6, [r7, #4]
 800390e:	466d      	mov	r5, sp
 8003910:	f106 0410 	add.w	r4, r6, #16
 8003914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003920:	e885 0003 	stmia.w	r5, {r0, r1}
 8003924:	1d33      	adds	r3, r6, #4
 8003926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003928:	6838      	ldr	r0, [r7, #0]
 800392a:	f004 fe33 	bl	8008594 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003940 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af04      	add	r7, sp, #16
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	70fb      	strb	r3, [r7, #3]
 8003952:	460b      	mov	r3, r1
 8003954:	70bb      	strb	r3, [r7, #2]
 8003956:	4613      	mov	r3, r2
 8003958:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 800395a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800395c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_HCD_HC_Init+0x2c>
 8003968:	2302      	movs	r3, #2
 800396a:	e087      	b.n	8003a7c <HAL_HCD_HC_Init+0x13c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	440b      	add	r3, r1
 8003982:	333d      	adds	r3, #61	; 0x3d
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	440b      	add	r3, r1
 8003996:	3338      	adds	r3, #56	; 0x38
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	440b      	add	r3, r1
 80039aa:	3339      	adds	r3, #57	; 0x39
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	440b      	add	r3, r1
 80039be:	3340      	adds	r3, #64	; 0x40
 80039c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80039c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	78bb      	ldrb	r3, [r7, #2]
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	b2d8      	uxtb	r0, r3
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	440b      	add	r3, r1
 80039dc:	333a      	adds	r3, #58	; 0x3a
 80039de:	4602      	mov	r2, r0
 80039e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fb81 	bl	80040ee <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80039ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	da0a      	bge.n	8003a0a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	440b      	add	r3, r1
 8003a02:	333b      	adds	r3, #59	; 0x3b
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e009      	b.n	8003a1e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	440b      	add	r3, r1
 8003a18:	333b      	adds	r3, #59	; 0x3b
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	440b      	add	r3, r1
 8003a2c:	333c      	adds	r3, #60	; 0x3c
 8003a2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	b298      	uxth	r0, r3
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	440b      	add	r3, r1
 8003a46:	3342      	adds	r3, #66	; 0x42
 8003a48:	4602      	mov	r2, r0
 8003a4a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	787c      	ldrb	r4, [r7, #1]
 8003a56:	78ba      	ldrb	r2, [r7, #2]
 8003a58:	78f9      	ldrb	r1, [r7, #3]
 8003a5a:	9302      	str	r3, [sp, #8]
 8003a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f004 fedd 	bl	8008828 <USB_HC_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}

08003a84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_HCD_HC_Halt+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e00f      	b.n	8003ac2 <HAL_HCD_HC_Halt+0x3e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f005 f8cd 	bl	8008c52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	70fb      	strb	r3, [r7, #3]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70bb      	strb	r3, [r7, #2]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	440b      	add	r3, r1
 8003af4:	333b      	adds	r3, #59	; 0x3b
 8003af6:	78ba      	ldrb	r2, [r7, #2]
 8003af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	440b      	add	r3, r1
 8003b08:	3340      	adds	r3, #64	; 0x40
 8003b0a:	787a      	ldrb	r2, [r7, #1]
 8003b0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b0e:	7c3b      	ldrb	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	440b      	add	r3, r1
 8003b22:	3344      	adds	r3, #68	; 0x44
 8003b24:	2203      	movs	r2, #3
 8003b26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	440b      	add	r3, r1
 8003b36:	333d      	adds	r3, #61	; 0x3d
 8003b38:	7f3a      	ldrb	r2, [r7, #28]
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e009      	b.n	8003b52 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3344      	adds	r3, #68	; 0x44
 8003b4e:	2202      	movs	r2, #2
 8003b50:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b52:	787b      	ldrb	r3, [r7, #1]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	f200 80d6 	bhi.w	8003d06 <HAL_HCD_HC_SubmitRequest+0x23a>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003cf1 	.word	0x08003cf1
 8003b68:	08003bdd 	.word	0x08003bdd
 8003b6c:	08003c67 	.word	0x08003c67
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003b70:	7c3b      	ldrb	r3, [r7, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	f040 80c9 	bne.w	8003d0a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8003b78:	78bb      	ldrb	r3, [r7, #2]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80c5 	bne.w	8003d0a <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 8003b80:	8b3b      	ldrh	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	440b      	add	r3, r1
 8003b94:	3359      	adds	r3, #89	; 0x59
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3359      	adds	r3, #89	; 0x59
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3344      	adds	r3, #68	; 0x44
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 8003bc4:	e0a1      	b.n	8003d0a <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3344      	adds	r3, #68	; 0x44
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	e096      	b.n	8003d0a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003bdc:	78bb      	ldrb	r3, [r7, #2]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d120      	bne.n	8003c24 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	440b      	add	r3, r1
 8003bf0:	3359      	adds	r3, #89	; 0x59
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	440b      	add	r3, r1
 8003c06:	3344      	adds	r3, #68	; 0x44
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c0c:	e07e      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3344      	adds	r3, #68	; 0x44
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
      break;
 8003c22:	e073      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	440b      	add	r3, r1
 8003c32:	3358      	adds	r3, #88	; 0x58
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	440b      	add	r3, r1
 8003c48:	3344      	adds	r3, #68	; 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
      break;
 8003c4e:	e05d      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	; 0x44
 8003c60:	2202      	movs	r2, #2
 8003c62:	701a      	strb	r2, [r3, #0]
      break;
 8003c64:	e052      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c66:	78bb      	ldrb	r3, [r7, #2]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d120      	bne.n	8003cae <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	440b      	add	r3, r1
 8003c7a:	3359      	adds	r3, #89	; 0x59
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	440b      	add	r3, r1
 8003c90:	3344      	adds	r3, #68	; 0x44
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c96:	e039      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3344      	adds	r3, #68	; 0x44
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]
      break;
 8003cac:	e02e      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	440b      	add	r3, r1
 8003cbc:	3358      	adds	r3, #88	; 0x58
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3344      	adds	r3, #68	; 0x44
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
      break;
 8003cd8:	e018      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3344      	adds	r3, #68	; 0x44
 8003cea:	2202      	movs	r2, #2
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	e00d      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3344      	adds	r3, #68	; 0x44
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
      break;
 8003d04:	e002      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003d0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	440b      	add	r3, r1
 8003d1a:	3348      	adds	r3, #72	; 0x48
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	8b39      	ldrh	r1, [r7, #24]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	4403      	add	r3, r0
 8003d30:	3350      	adds	r3, #80	; 0x50
 8003d32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	440b      	add	r3, r1
 8003d42:	3364      	adds	r3, #100	; 0x64
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	440b      	add	r3, r1
 8003d56:	3354      	adds	r3, #84	; 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	440b      	add	r3, r1
 8003d6a:	3339      	adds	r3, #57	; 0x39
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3365      	adds	r3, #101	; 0x65
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3338      	adds	r3, #56	; 0x38
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f004 fe51 	bl	8008a40 <USB_HC_StartXfer>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fba6 	bl	8008510 <USB_GetMode>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f040 80fa 	bne.w	8003fc0 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fb69 	bl	80084a8 <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80f0 	beq.w	8003fbe <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fb60 	bl	80084a8 <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df2:	d104      	bne.n	8003dfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fb50 	bl	80084a8 <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d104      	bne.n	8003e1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 fb40 	bl	80084a8 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e32:	d104      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 fb30 	bl	80084a8 <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d103      	bne.n	8003e5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 fb22 	bl	80084a8 <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6e:	d120      	bne.n	8003eb2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	6938      	ldr	r0, [r7, #16]
 8003e8e:	f004 fa15 	bl	80082bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e92:	6938      	ldr	r0, [r7, #16]
 8003e94:	f004 fa46 	bl	8008324 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d105      	bne.n	8003eac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f004 fbf6 	bl	8008698 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f00a ff11 	bl	800ecd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 faf6 	bl	80084a8 <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec6:	d102      	bne.n	8003ece <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f001 f921 	bl	8005110 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 fae8 	bl	80084a8 <USB_ReadInterrupts>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d106      	bne.n	8003ef0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f00a feda 	bl	800ec9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2208      	movs	r2, #8
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 fad7 	bl	80084a8 <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f04:	d138      	bne.n	8003f78 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f004 fe90 	bl	8008c30 <USB_HC_ReadInterrupt>
 8003f10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e025      	b.n	8003f64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f42:	d106      	bne.n	8003f52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8f0 	bl	8004130 <HCD_HC_IN_IRQHandler>
 8003f50:	e005      	b.n	8003f5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fd24 	bl	80049a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3301      	adds	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3d4      	bcc.n	8003f18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fa93 	bl	80084a8 <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d101      	bne.n	8003f90 <HAL_HCD_IRQHandler+0x1e8>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_HCD_IRQHandler+0x1ea>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d014      	beq.n	8003fc0 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0210 	bic.w	r2, r2, #16
 8003fa4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 ffd3 	bl	8004f52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0210 	orr.w	r2, r2, #16
 8003fba:	619a      	str	r2, [r3, #24]
 8003fbc:	e000      	b.n	8003fc0 <HAL_HCD_IRQHandler+0x218>
      return;
 8003fbe:	bf00      	nop
    }
  }
}
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_HCD_Start+0x16>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e013      	b.n	8004004 <HAL_HCD_Start+0x3e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fbbb 	bl	8008766 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f004 f8f2 	bl	80081de <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_HCD_Stop+0x16>
 800401e:	2302      	movs	r3, #2
 8004020:	e00d      	b.n	800403e <HAL_HCD_Stop+0x32>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
  (void)USB_StopHost(hhcd->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f004 ff2f 	bl	8008e92 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f004 fb5d 	bl	8008712 <USB_ResetPort>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	440b      	add	r3, r1
 800407c:	3364      	adds	r3, #100	; 0x64
 800407e:	781b      	ldrb	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	440b      	add	r3, r1
 80040a6:	3354      	adds	r3, #84	; 0x54
 80040a8:	681b      	ldr	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f004 fb9f 	bl	8008806 <USB_GetCurrentFrame>
 80040c8:	4603      	mov	r3, r0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 fb7a 	bl	80087d8 <USB_GetHostSpeed>
 80040e4:	4603      	mov	r3, r0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	440b      	add	r3, r1
 8004108:	333f      	adds	r3, #63	; 0x3f
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	440b      	add	r3, r1
 800411c:	333e      	adds	r3, #62	; 0x3e
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f004 f9bd 	bl	80084ce <USB_ReadChInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d11a      	bne.n	8004194 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	461a      	mov	r2, r3
 800416c:	2304      	movs	r3, #4
 800416e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	440b      	add	r3, r1
 800417e:	3365      	adds	r3, #101	; 0x65
 8004180:	2207      	movs	r2, #7
 8004182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f004 fd60 	bl	8008c52 <USB_HC_Halt>
 8004192:	e09e      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f004 f996 	bl	80084ce <USB_ReadChInterrupts>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ac:	d11b      	bne.n	80041e6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	461a      	mov	r2, r3
 80041bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	440b      	add	r3, r1
 80041d0:	3365      	adds	r3, #101	; 0x65
 80041d2:	2208      	movs	r2, #8
 80041d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f004 fd37 	bl	8008c52 <USB_HC_Halt>
 80041e4:	e075      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 f96d 	bl	80084ce <USB_ReadChInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11a      	bne.n	8004234 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	461a      	mov	r2, r3
 800420c:	2308      	movs	r3, #8
 800420e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	440b      	add	r3, r1
 800421e:	3365      	adds	r3, #101	; 0x65
 8004220:	2206      	movs	r2, #6
 8004222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f004 fd10 	bl	8008c52 <USB_HC_Halt>
 8004232:	e04e      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f004 f946 	bl	80084ce <USB_ReadChInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d11b      	bne.n	8004286 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004260:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	440b      	add	r3, r1
 8004270:	3365      	adds	r3, #101	; 0x65
 8004272:	2209      	movs	r2, #9
 8004274:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fce7 	bl	8008c52 <USB_HC_Halt>
 8004284:	e025      	b.n	80042d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f004 f91d 	bl	80084ce <USB_ReadChInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d119      	bne.n	80042d2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042aa:	461a      	mov	r2, r3
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	440b      	add	r3, r1
 80042be:	3365      	adds	r3, #101	; 0x65
 80042c0:	2207      	movs	r2, #7
 80042c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f004 fcc0 	bl	8008c52 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 f8f7 	bl	80084ce <USB_ReadChInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ea:	d111      	bne.n	8004310 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fcac 	bl	8008c52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	461a      	mov	r2, r3
 8004308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	e347      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f004 f8d8 	bl	80084ce <USB_ReadChInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	f040 80d8 	bne.w	80044da <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	440b      	add	r3, r1
 8004338:	3365      	adds	r3, #101	; 0x65
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	440b      	add	r3, r1
 800434c:	3360      	adds	r3, #96	; 0x60
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	440b      	add	r3, r1
 8004372:	3340      	adds	r3, #64	; 0x40
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	3340      	adds	r3, #64	; 0x40
 800438a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800438c:	2b02      	cmp	r3, #2
 800438e:	d110      	bne.n	80043b2 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fc5a 	bl	8008c52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	461a      	mov	r2, r3
 80043ac:	2310      	movs	r3, #16
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	e03d      	b.n	800442e <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	440b      	add	r3, r1
 80043c0:	3340      	adds	r3, #64	; 0x40
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d00a      	beq.n	80043de <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	440b      	add	r3, r1
 80043d6:	3340      	adds	r3, #64	; 0x40
 80043d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d127      	bne.n	800442e <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	440b      	add	r3, r1
 800440c:	3364      	adds	r3, #100	; 0x64
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	440b      	add	r3, r1
 8004420:	3364      	adds	r3, #100	; 0x64
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f00a fc61 	bl	800ecf0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d13a      	bne.n	80044ac <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	440b      	add	r3, r1
 8004444:	3354      	adds	r3, #84	; 0x54
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4403      	add	r3, r0
 8004456:	3342      	adds	r3, #66	; 0x42
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	440b      	add	r3, r1
 800445c:	1e59      	subs	r1, r3, #1
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4403      	add	r3, r0
 800446c:	3342      	adds	r3, #66	; 0x42
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	fbb1 f3f3 	udiv	r3, r1, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8291 	beq.w	80049a0 <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	440b      	add	r3, r1
 800448c:	3358      	adds	r3, #88	; 0x58
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	f083 0301 	eor.w	r3, r3, #1
 8004496:	b2d8      	uxtb	r0, r3
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4413      	add	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	440b      	add	r3, r1
 80044a4:	3358      	adds	r3, #88	; 0x58
 80044a6:	4602      	mov	r2, r0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e279      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	440b      	add	r3, r1
 80044ba:	3358      	adds	r3, #88	; 0x58
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	f083 0301 	eor.w	r3, r3, #1
 80044c4:	b2d8      	uxtb	r0, r3
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	440b      	add	r3, r1
 80044d2:	3358      	adds	r3, #88	; 0x58
 80044d4:	4602      	mov	r2, r0
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e262      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 fff3 	bl	80084ce <USB_ReadChInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d109      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2320      	movs	r3, #32
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	e24c      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f003 ffdd 	bl	80084ce <USB_ReadChInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	f040 81a0 	bne.w	8004860 <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	461a      	mov	r2, r3
 800452e:	2302      	movs	r3, #2
 8004530:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	440b      	add	r3, r1
 8004540:	3365      	adds	r3, #101	; 0x65
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d114      	bne.n	8004572 <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	440b      	add	r3, r1
 8004556:	3365      	adds	r3, #101	; 0x65
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	440b      	add	r3, r1
 800456a:	3364      	adds	r3, #100	; 0x64
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e167      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	440b      	add	r3, r1
 8004580:	3365      	adds	r3, #101	; 0x65
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d114      	bne.n	80045b2 <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	440b      	add	r3, r1
 8004596:	3365      	adds	r3, #101	; 0x65
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	440b      	add	r3, r1
 80045aa:	3364      	adds	r3, #100	; 0x64
 80045ac:	2205      	movs	r2, #5
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e147      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	440b      	add	r3, r1
 80045c0:	3365      	adds	r3, #101	; 0x65
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	d00a      	beq.n	80045de <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	440b      	add	r3, r1
 80045d6:	3365      	adds	r3, #101	; 0x65
 80045d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045da:	2b09      	cmp	r3, #9
 80045dc:	d176      	bne.n	80046cc <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	440b      	add	r3, r1
 80045ec:	3365      	adds	r3, #101	; 0x65
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	440b      	add	r3, r1
 8004600:	3360      	adds	r3, #96	; 0x60
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	1c59      	adds	r1, r3, #1
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4403      	add	r3, r0
 8004612:	3360      	adds	r3, #96	; 0x60
 8004614:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	440b      	add	r3, r1
 8004624:	3360      	adds	r3, #96	; 0x60
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d914      	bls.n	8004656 <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	440b      	add	r3, r1
 800463a:	3360      	adds	r3, #96	; 0x60
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	440b      	add	r3, r1
 800464e:	3364      	adds	r3, #100	; 0x64
 8004650:	2204      	movs	r2, #4
 8004652:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004654:	e0f4      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	440b      	add	r3, r1
 8004664:	3364      	adds	r3, #100	; 0x64
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	440b      	add	r3, r1
 8004678:	3340      	adds	r3, #64	; 0x40
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	440b      	add	r3, r1
 800468e:	3340      	adds	r3, #64	; 0x40
 8004690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004692:	2b02      	cmp	r3, #2
 8004694:	f040 80d4 	bne.w	8004840 <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	461a      	mov	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046ca:	e0b9      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	440b      	add	r3, r1
 80046da:	3365      	adds	r3, #101	; 0x65
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10a      	bne.n	80046f8 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	440b      	add	r3, r1
 80046f0:	3365      	adds	r3, #101	; 0x65
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e0a4      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	440b      	add	r3, r1
 8004706:	3365      	adds	r3, #101	; 0x65
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d10a      	bne.n	8004724 <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	440b      	add	r3, r1
 800471c:	3365      	adds	r3, #101	; 0x65
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e08e      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	440b      	add	r3, r1
 8004732:	3365      	adds	r3, #101	; 0x65
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b04      	cmp	r3, #4
 8004738:	d143      	bne.n	80047c2 <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	440b      	add	r3, r1
 8004748:	3365      	adds	r3, #101	; 0x65
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	440b      	add	r3, r1
 800475c:	3364      	adds	r3, #100	; 0x64
 800475e:	2202      	movs	r2, #2
 8004760:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	440b      	add	r3, r1
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	440b      	add	r3, r1
 8004786:	3340      	adds	r3, #64	; 0x40
 8004788:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800478a:	2b02      	cmp	r3, #2
 800478c:	d159      	bne.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4413      	add	r3, r2
 8004796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e03f      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	440b      	add	r3, r1
 80047d0:	3365      	adds	r3, #101	; 0x65
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d126      	bne.n	8004826 <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	440b      	add	r3, r1
 80047e6:	3365      	adds	r3, #101	; 0x65
 80047e8:	2202      	movs	r2, #2
 80047ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	440b      	add	r3, r1
 80047fa:	3360      	adds	r3, #96	; 0x60
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	4403      	add	r3, r0
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	440b      	add	r3, r1
 800481e:	3364      	adds	r3, #100	; 0x64
 8004820:	2204      	movs	r2, #4
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e00d      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	440b      	add	r3, r1
 8004834:	3365      	adds	r3, #101	; 0x65
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f000 80b0 	beq.w	800499e <HCD_HC_IN_IRQHandler+0x86e>
 800483e:	e000      	b.n	8004842 <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004840:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	440b      	add	r3, r1
 8004850:	3364      	adds	r3, #100	; 0x64
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f00a fa49 	bl	800ecf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800485e:	e09f      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f003 fe30 	bl	80084ce <USB_ReadChInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d124      	bne.n	80048c2 <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004884:	461a      	mov	r2, r3
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	440b      	add	r3, r1
 8004898:	3365      	adds	r3, #101	; 0x65
 800489a:	2205      	movs	r2, #5
 800489c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	440b      	add	r3, r1
 80048ac:	3360      	adds	r3, #96	; 0x60
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 f9c9 	bl	8008c52 <USB_HC_Halt>
 80048c0:	e06e      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 fdff 	bl	80084ce <USB_ReadChInterrupts>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d162      	bne.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	440b      	add	r3, r1
 80048e8:	3340      	adds	r3, #64	; 0x40
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d11b      	bne.n	8004928 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	440b      	add	r3, r1
 80048fe:	3360      	adds	r3, #96	; 0x60
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	440b      	add	r3, r1
 8004912:	3365      	adds	r3, #101	; 0x65
 8004914:	2204      	movs	r2, #4
 8004916:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f004 f996 	bl	8008c52 <USB_HC_Halt>
 8004926:	e030      	b.n	800498a <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	440b      	add	r3, r1
 8004936:	3340      	adds	r3, #64	; 0x40
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	440b      	add	r3, r1
 800494c:	3340      	adds	r3, #64	; 0x40
 800494e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004950:	2b02      	cmp	r3, #2
 8004952:	d11a      	bne.n	800498a <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	440b      	add	r3, r1
 8004962:	3360      	adds	r3, #96	; 0x60
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	440b      	add	r3, r1
 8004976:	3365      	adds	r3, #101	; 0x65
 8004978:	2204      	movs	r2, #4
 800497a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f004 f964 	bl	8008c52 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	461a      	mov	r2, r3
 8004998:	2310      	movs	r3, #16
 800499a:	6093      	str	r3, [r2, #8]
 800499c:	e000      	b.n	80049a0 <HCD_HC_IN_IRQHandler+0x870>
        return;
 800499e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f003 fd82 	bl	80084ce <USB_ReadChInterrupts>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d11a      	bne.n	8004a0a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	461a      	mov	r2, r3
 80049e2:	2304      	movs	r3, #4
 80049e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	440b      	add	r3, r1
 80049f4:	3365      	adds	r3, #101	; 0x65
 80049f6:	2207      	movs	r2, #7
 80049f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f004 f925 	bl	8008c52 <USB_HC_Halt>
 8004a08:	e2a0      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fd5b 	bl	80084ce <USB_ReadChInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d109      	bne.n	8004a36 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2320      	movs	r3, #32
 8004a32:	6093      	str	r3, [r2, #8]
 8004a34:	e28a      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 fd45 	bl	80084ce <USB_ReadChInterrupts>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4e:	d111      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a62:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 f8f0 	bl	8008c52 <USB_HC_Halt>
 8004a72:	e26b      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f003 fd26 	bl	80084ce <USB_ReadChInterrupts>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d124      	bne.n	8004ad6 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4413      	add	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	440b      	add	r3, r1
 8004a9a:	3360      	adds	r3, #96	; 0x60
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	2301      	movs	r3, #1
 8004ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	440b      	add	r3, r1
 8004ac0:	3365      	adds	r3, #101	; 0x65
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 f8bf 	bl	8008c52 <USB_HC_Halt>
 8004ad4:	e23a      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f003 fcf5 	bl	80084ce <USB_ReadChInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d11a      	bne.n	8004b24 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	2308      	movs	r3, #8
 8004afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3365      	adds	r3, #101	; 0x65
 8004b10:	2206      	movs	r2, #6
 8004b12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 f898 	bl	8008c52 <USB_HC_Halt>
 8004b22:	e213      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 fcce 	bl	80084ce <USB_ReadChInterrupts>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d124      	bne.n	8004b86 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	440b      	add	r3, r1
 8004b4a:	3360      	adds	r3, #96	; 0x60
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3365      	adds	r3, #101	; 0x65
 8004b60:	2204      	movs	r2, #4
 8004b62:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f004 f870 	bl	8008c52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2310      	movs	r3, #16
 8004b82:	6093      	str	r3, [r2, #8]
 8004b84:	e1e2      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f003 fc9d 	bl	80084ce <USB_ReadChInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d11a      	bne.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	440b      	add	r3, r1
 8004bac:	3365      	adds	r3, #101	; 0x65
 8004bae:	2207      	movs	r2, #7
 8004bb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 f849 	bl	8008c52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	6093      	str	r3, [r2, #8]
 8004bd2:	e1bb      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f003 fc76 	bl	80084ce <USB_ReadChInterrupts>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bec:	d11b      	bne.n	8004c26 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3365      	adds	r3, #101	; 0x65
 8004bfe:	2209      	movs	r2, #9
 8004c00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f004 f821 	bl	8008c52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c22:	6093      	str	r3, [r2, #8]
 8004c24:	e192      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 fc4d 	bl	80084ce <USB_ReadChInterrupts>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	f040 8183 	bne.w	8004f46 <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2302      	movs	r3, #2
 8004c50:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	440b      	add	r3, r1
 8004c60:	3365      	adds	r3, #101	; 0x65
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 8093 	bne.w	8004d90 <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	440b      	add	r3, r1
 8004c78:	3365      	adds	r3, #101	; 0x65
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3364      	adds	r3, #100	; 0x64
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3340      	adds	r3, #64	; 0x40
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d00b      	beq.n	8004cc0 <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3340      	adds	r3, #64	; 0x40
 8004cb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	f040 8134 	bne.w	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d115      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3359      	adds	r3, #89	; 0x59
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	f083 0301 	eor.w	r3, r3, #1
 8004ce0:	b2d8      	uxtb	r0, r3
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	440b      	add	r3, r1
 8004cee:	3359      	adds	r3, #89	; 0x59
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 8115 	bne.w	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3350      	adds	r3, #80	; 0x50
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8109 	beq.w	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	440b      	add	r3, r1
 8004d24:	3350      	adds	r3, #80	; 0x50
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4403      	add	r3, r0
 8004d36:	3342      	adds	r3, #66	; 0x42
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	440b      	add	r3, r1
 8004d3c:	1e59      	subs	r1, r3, #1
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4403      	add	r3, r0
 8004d4c:	3342      	adds	r3, #66	; 0x42
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d54:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80e3 	beq.w	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	440b      	add	r3, r1
 8004d70:	3359      	adds	r3, #89	; 0x59
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	f083 0301 	eor.w	r3, r3, #1
 8004d7a:	b2d8      	uxtb	r0, r3
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	440b      	add	r3, r1
 8004d88:	3359      	adds	r3, #89	; 0x59
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e0cb      	b.n	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3365      	adds	r3, #101	; 0x65
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d10a      	bne.n	8004dbc <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	4413      	add	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	440b      	add	r3, r1
 8004db4:	3365      	adds	r3, #101	; 0x65
 8004db6:	2202      	movs	r2, #2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e0b5      	b.n	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	440b      	add	r3, r1
 8004dca:	3365      	adds	r3, #101	; 0x65
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d114      	bne.n	8004dfc <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	440b      	add	r3, r1
 8004de0:	3365      	adds	r3, #101	; 0x65
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	440b      	add	r3, r1
 8004df4:	3364      	adds	r3, #100	; 0x64
 8004df6:	2202      	movs	r2, #2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e095      	b.n	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	440b      	add	r3, r1
 8004e0a:	3365      	adds	r3, #101	; 0x65
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d114      	bne.n	8004e3c <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	440b      	add	r3, r1
 8004e20:	3365      	adds	r3, #101	; 0x65
 8004e22:	2202      	movs	r2, #2
 8004e24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	440b      	add	r3, r1
 8004e34:	3364      	adds	r3, #100	; 0x64
 8004e36:	2205      	movs	r2, #5
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e075      	b.n	8004f28 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	440b      	add	r3, r1
 8004e4a:	3365      	adds	r3, #101	; 0x65
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b07      	cmp	r3, #7
 8004e50:	d00a      	beq.n	8004e68 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	440b      	add	r3, r1
 8004e60:	3365      	adds	r3, #101	; 0x65
 8004e62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e64:	2b09      	cmp	r3, #9
 8004e66:	d170      	bne.n	8004f4a <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	440b      	add	r3, r1
 8004e76:	3365      	adds	r3, #101	; 0x65
 8004e78:	2202      	movs	r2, #2
 8004e7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	440b      	add	r3, r1
 8004e8a:	3360      	adds	r3, #96	; 0x60
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4403      	add	r3, r0
 8004e9c:	3360      	adds	r3, #96	; 0x60
 8004e9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	440b      	add	r3, r1
 8004eae:	3360      	adds	r3, #96	; 0x60
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d914      	bls.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3360      	adds	r3, #96	; 0x60
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3364      	adds	r3, #100	; 0x64
 8004eda:	2204      	movs	r2, #4
 8004edc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ede:	e022      	b.n	8004f26 <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	440b      	add	r3, r1
 8004eee:	3364      	adds	r3, #100	; 0x64
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f20:	461a      	mov	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	440b      	add	r3, r1
 8004f36:	3364      	adds	r3, #100	; 0x64
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f009 fed6 	bl	800ecf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f44:	e002      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8004f4a:	bf00      	nop
  }
}
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08a      	sub	sp, #40	; 0x28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	0c5b      	lsrs	r3, r3, #17
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d004      	beq.n	8004f98 <HCD_RXQLVL_IRQHandler+0x46>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	f000 80b6 	beq.w	8005102 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f96:	e0b7      	b.n	8005108 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80b3 	beq.w	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	440b      	add	r3, r1
 8004fae:	3348      	adds	r3, #72	; 0x48
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80a7 	beq.w	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3354      	adds	r3, #84	; 0x54
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	18d1      	adds	r1, r2, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	4413      	add	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	4403      	add	r3, r0
 8004fdc:	3350      	adds	r3, #80	; 0x50
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4299      	cmp	r1, r3
 8004fe2:	f200 8083 	bhi.w	80050ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3348      	adds	r3, #72	; 0x48
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	b292      	uxth	r2, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f003 f9f9 	bl	80083f8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	440b      	add	r3, r1
 8005014:	3348      	adds	r3, #72	; 0x48
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	18d1      	adds	r1, r2, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4403      	add	r3, r0
 800502a:	3348      	adds	r3, #72	; 0x48
 800502c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	440b      	add	r3, r1
 800503c:	3354      	adds	r3, #84	; 0x54
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	18d1      	adds	r1, r2, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4403      	add	r3, r0
 8005052:	3354      	adds	r3, #84	; 0x54
 8005054:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	0cdb      	lsrs	r3, r3, #19
 8005066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	440b      	add	r3, r1
 800507a:	3342      	adds	r3, #66	; 0x42
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4293      	cmp	r3, r2
 8005084:	d13f      	bne.n	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d03c      	beq.n	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	440b      	add	r3, r1
 80050cc:	3358      	adds	r3, #88	; 0x58
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	f083 0301 	eor.w	r3, r3, #1
 80050d4:	b2d8      	uxtb	r0, r3
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	3358      	adds	r3, #88	; 0x58
 80050e6:	4602      	mov	r2, r0
 80050e8:	701a      	strb	r2, [r3, #0]
      break;
 80050ea:	e00c      	b.n	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	440b      	add	r3, r1
 80050fa:	3364      	adds	r3, #100	; 0x64
 80050fc:	2204      	movs	r2, #4
 80050fe:	701a      	strb	r2, [r3, #0]
      break;
 8005100:	e001      	b.n	8005106 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005106:	bf00      	nop
  }
}
 8005108:	bf00      	nop
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800513c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d10b      	bne.n	8005160 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d102      	bne.n	8005158 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f009 fdb0 	bl	800ecb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f043 0302 	orr.w	r3, r3, #2
 800515e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b08      	cmp	r3, #8
 8005168:	d132      	bne.n	80051d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b04      	cmp	r3, #4
 800517a:	d126      	bne.n	80051ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d113      	bne.n	80051ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800518a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800518e:	d106      	bne.n	800519e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f003 fa7e 	bl	8008698 <USB_InitFSLSPClkSel>
 800519c:	e011      	b.n	80051c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 fa77 	bl	8008698 <USB_InitFSLSPClkSel>
 80051aa:	e00a      	b.n	80051c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ba:	461a      	mov	r2, r3
 80051bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80051c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f009 fda2 	bl	800ed0c <HAL_HCD_PortEnabled_Callback>
 80051c8:	e002      	b.n	80051d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f009 fdac 	bl	800ed28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d103      	bne.n	80051e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 0320 	orr.w	r3, r3, #32
 80051e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6013      	str	r3, [r2, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e08d      	b.n	8005324 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8b4 	bl	800538a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	; 0x24
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005246:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005256:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	e006      	b.n	800527e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800527c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d108      	bne.n	8005298 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	e007      	b.n	80052a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69d9      	ldr	r1, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e021      	b.n	8005382 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2224      	movs	r2, #36	; 0x24
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f821 	bl	800539e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	460b      	mov	r3, r1
 80053c8:	813b      	strh	r3, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f040 80f9 	bne.w	80055ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_I2C_Mem_Write+0x34>
 80053e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0ed      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_I2C_Mem_Write+0x4e>
 80053fe:	2302      	movs	r3, #2
 8005400:	e0e6      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800540a:	f7fd fcfb 	bl	8002e04 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2319      	movs	r3, #25
 8005416:	2201      	movs	r2, #1
 8005418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fadd 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0d1      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2221      	movs	r2, #33	; 0x21
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2240      	movs	r2, #64	; 0x40
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a3a      	ldr	r2, [r7, #32]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005454:	88f8      	ldrh	r0, [r7, #6]
 8005456:	893a      	ldrh	r2, [r7, #8]
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	4603      	mov	r3, r0
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f9ed 	bl	8005844 <I2C_RequestMemoryWrite>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0a9      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d90e      	bls.n	80054a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	22ff      	movs	r2, #255	; 0xff
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	b2da      	uxtb	r2, r3
 8005492:	8979      	ldrh	r1, [r7, #10]
 8005494:	2300      	movs	r3, #0
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fc57 	bl	8005d50 <I2C_TransferConfig>
 80054a2:	e00f      	b.n	80054c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	8979      	ldrh	r1, [r7, #10]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fc46 	bl	8005d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fad6 	bl	8005a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e07b      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d034      	beq.n	800557c <HAL_I2C_Mem_Write+0x1c8>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d130      	bne.n	800557c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	2200      	movs	r2, #0
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fa59 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e04d      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2bff      	cmp	r3, #255	; 0xff
 800553c:	d90e      	bls.n	800555c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	22ff      	movs	r2, #255	; 0xff
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	b2da      	uxtb	r2, r3
 800554a:	8979      	ldrh	r1, [r7, #10]
 800554c:	2300      	movs	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fbfb 	bl	8005d50 <I2C_TransferConfig>
 800555a:	e00f      	b.n	800557c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	b2da      	uxtb	r2, r3
 800556c:	8979      	ldrh	r1, [r7, #10]
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fbea 	bl	8005d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d19e      	bne.n	80054c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fabc 	bl	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e01a      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2220      	movs	r2, #32
 80055a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6859      	ldr	r1, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_I2C_Mem_Write+0x224>)
 80055ae:	400b      	ands	r3, r1
 80055b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	fe00e800 	.word	0xfe00e800

080055dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	817b      	strh	r3, [r7, #10]
 80055ee:	460b      	mov	r3, r1
 80055f0:	813b      	strh	r3, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	f040 80fd 	bne.w	80057fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_I2C_Mem_Read+0x34>
 800560a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d105      	bne.n	800561c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0f1      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_I2C_Mem_Read+0x4e>
 8005626:	2302      	movs	r3, #2
 8005628:	e0ea      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005632:	f7fd fbe7 	bl	8002e04 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2319      	movs	r3, #25
 800563e:	2201      	movs	r2, #1
 8005640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f9c9 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0d5      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2222      	movs	r2, #34	; 0x22
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2240      	movs	r2, #64	; 0x40
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800567c:	88f8      	ldrh	r0, [r7, #6]
 800567e:	893a      	ldrh	r2, [r7, #8]
 8005680:	8979      	ldrh	r1, [r7, #10]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4603      	mov	r3, r0
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f92d 	bl	80058ec <I2C_RequestMemoryRead>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0ad      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2bff      	cmp	r3, #255	; 0xff
 80056ac:	d90e      	bls.n	80056cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	22ff      	movs	r2, #255	; 0xff
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	8979      	ldrh	r1, [r7, #10]
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <HAL_I2C_Mem_Read+0x22c>)
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fb43 	bl	8005d50 <I2C_TransferConfig>
 80056ca:	e00f      	b.n	80056ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	8979      	ldrh	r1, [r7, #10]
 80056de:	4b4a      	ldr	r3, [pc, #296]	; (8005808 <HAL_I2C_Mem_Read+0x22c>)
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fb32 	bl	8005d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	2200      	movs	r2, #0
 80056f4:	2104      	movs	r1, #4
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f970 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e07c      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d034      	beq.n	80057ac <HAL_I2C_Mem_Read+0x1d0>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d130      	bne.n	80057ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f941 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e04d      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2bff      	cmp	r3, #255	; 0xff
 800576c:	d90e      	bls.n	800578c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	22ff      	movs	r2, #255	; 0xff
 8005772:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	b2da      	uxtb	r2, r3
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	2300      	movs	r3, #0
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fae3 	bl	8005d50 <I2C_TransferConfig>
 800578a:	e00f      	b.n	80057ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	b2da      	uxtb	r2, r3
 800579c:	8979      	ldrh	r1, [r7, #10]
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fad2 	bl	8005d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d19a      	bne.n	80056ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f9a4 	bl	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e01a      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2220      	movs	r2, #32
 80057d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_I2C_Mem_Read+0x230>)
 80057de:	400b      	ands	r3, r1
 80057e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
  }
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	80002400 	.word	0x80002400
 800580c:	fe00e800 	.word	0xfe00e800

08005810 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581e:	b2db      	uxtb	r3, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	8979      	ldrh	r1, [r7, #10]
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <I2C_RequestMemoryWrite+0xa4>)
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fa6f 	bl	8005d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f8ff 	bl	8005a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02c      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	629a      	str	r2, [r3, #40]	; 0x28
 8005896:	e015      	b.n	80058c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b29b      	uxth	r3, r3
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8e5 	bl	8005a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e012      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058ba:	893b      	ldrh	r3, [r7, #8]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f884 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	80002000 	.word	0x80002000

080058ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	8979      	ldrh	r1, [r7, #10]
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <I2C_RequestMemoryRead+0xa4>)
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa1c 	bl	8005d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f8ac 	bl	8005a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e02c      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
 800593c:	e015      	b.n	800596a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	b29b      	uxth	r3, r3
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	69b9      	ldr	r1, [r7, #24]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f892 	bl	8005a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e012      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2200      	movs	r2, #0
 8005972:	2140      	movs	r1, #64	; 0x40
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f831 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	80002000 	.word	0x80002000

08005994 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d103      	bne.n	80059b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d007      	beq.n	80059d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	619a      	str	r2, [r3, #24]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	e031      	b.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d02d      	beq.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fd fa05 	bl	8002e04 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d122      	bne.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4013      	ands	r3, r2
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d113      	bne.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e00f      	b.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d0be      	beq.n	80059ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a86:	e033      	b.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f87f 	bl	8005b90 <I2C_IsErrorOccurred>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e031      	b.n	8005b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d025      	beq.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa4:	f7fd f9ae 	bl	8002e04 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11a      	bne.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d013      	beq.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d1c4      	bne.n	8005a88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b14:	e02f      	b.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f838 	bl	8005b90 <I2C_IsErrorOccurred>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e02d      	b.n	8005b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fd f96b 	bl	8002e04 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11a      	bne.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d013      	beq.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e007      	b.n	8005b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d1c8      	bne.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d068      	beq.n	8005c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bc4:	e049      	b.n	8005c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d045      	beq.n	8005c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fd f919 	bl	8002e04 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_IsErrorOccurred+0x54>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d13a      	bne.n	8005c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c06:	d121      	bne.n	8005c4c <I2C_IsErrorOccurred+0xbc>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c0e:	d01d      	beq.n	8005c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d01a      	beq.n	8005c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c26:	f7fd f8ed 	bl	8002e04 <HAL_GetTick>
 8005c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c2c:	e00e      	b.n	8005c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c2e:	f7fd f8e9 	bl	8002e04 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b19      	cmp	r3, #25
 8005c3a:	d907      	bls.n	8005c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f043 0320 	orr.w	r3, r3, #32
 8005c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c4a:	e006      	b.n	8005c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d1e9      	bne.n	8005c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d003      	beq.n	8005c70 <I2C_IsErrorOccurred+0xe0>
 8005c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0aa      	beq.n	8005bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	f043 0304 	orr.w	r3, r3, #4
 8005c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01c      	beq.n	8005d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff fe45 	bl	8005994 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <I2C_IsErrorOccurred+0x1bc>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3728      	adds	r7, #40	; 0x28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	fe00e800 	.word	0xfe00e800

08005d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	817b      	strh	r3, [r7, #10]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d68:	7a7b      	ldrb	r3, [r7, #9]
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	0d5b      	lsrs	r3, r3, #21
 8005d8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <I2C_TransferConfig+0x60>)
 8005d90:	430b      	orrs	r3, r1
 8005d92:	43db      	mvns	r3, r3
 8005d94:	ea02 0103 	and.w	r1, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	03ff63ff 	.word	0x03ff63ff

08005db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d138      	bne.n	8005e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e032      	b.n	8005e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2224      	movs	r2, #36	; 0x24
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0201 	bic.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e000      	b.n	8005e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d139      	bne.n	8005ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e033      	b.n	8005ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2224      	movs	r2, #36	; 0x24
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f02:	d10e      	bne.n	8005f22 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005f04:	f000 f8a6 	bl	8006054 <HAL_PWREx_DisableLowPowerRunMode>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005f0e:	e016      	b.n	8005f3e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1c:	d001      	beq.n	8005f22 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005f1e:	f000 f889 	bl	8006034 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	4a08      	ldr	r2, [pc, #32]	; (8005f48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005f34:	bf30      	wfi
 8005f36:	e002      	b.n	8005f3e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005f38:	bf40      	sev
    __WFE();
 8005f3a:	bf20      	wfe
    __WFE();
 8005f3c:	bf20      	wfe
  }

}
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40007000 	.word	0x40007000
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40007000 	.word	0x40007000

08005f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f76:	d130      	bne.n	8005fda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f78:	4b23      	ldr	r3, [pc, #140]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f84:	d038      	beq.n	8005ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2232      	movs	r2, #50	; 0x32
 8005f9c:	fb02 f303 	mul.w	r3, r2, r3
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	0c9b      	lsrs	r3, r3, #18
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fac:	e002      	b.n	8005fb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb4:	4b14      	ldr	r3, [pc, #80]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc0:	d102      	bne.n	8005fc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f2      	bne.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d110      	bne.n	8005ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe6:	d007      	beq.n	8005ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fe8:	4b07      	ldr	r3, [pc, #28]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40007000 	.word	0x40007000
 800600c:	2000001c 	.word	0x2000001c
 8006010:	431bde83 	.word	0x431bde83

08006014 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_PWREx_EnableVddUSB+0x1c>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_PWREx_EnableVddUSB+0x1c>)
 800601e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006022:	6053      	str	r3, [r2, #4]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40007000 	.word	0x40007000

08006034 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800603e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006042:	6013      	str	r3, [r2, #0]
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40007000 	.word	0x40007000

08006054 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800605a:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006064:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006066:	4b15      	ldr	r3, [pc, #84]	; (80060bc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2232      	movs	r2, #50	; 0x32
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0c9b      	lsrs	r3, r3, #18
 8006078:	3301      	adds	r3, #1
 800607a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800607c:	e002      	b.n	8006084 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3b01      	subs	r3, #1
 8006082:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800608c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006090:	d102      	bne.n	8006098 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f2      	bne.n	800607e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a4:	d101      	bne.n	80060aa <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e000      	b.n	80060ac <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40007000 	.word	0x40007000
 80060bc:	2000001c 	.word	0x2000001c
 80060c0:	431bde83 	.word	0x431bde83

080060c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e3ca      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d6:	4b97      	ldr	r3, [pc, #604]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060e0:	4b94      	ldr	r3, [pc, #592]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80e4 	beq.w	80062c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_RCC_OscConfig+0x4a>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	f040 808b 	bne.w	800621c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 8087 	bne.w	800621c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800610e:	4b89      	ldr	r3, [pc, #548]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x62>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e3a2      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	4b82      	ldr	r3, [pc, #520]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <HAL_RCC_OscConfig+0x7c>
 8006136:	4b7f      	ldr	r3, [pc, #508]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800613e:	e005      	b.n	800614c <HAL_RCC_OscConfig+0x88>
 8006140:	4b7c      	ldr	r3, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800614c:	4293      	cmp	r3, r2
 800614e:	d223      	bcs.n	8006198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fd55 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e383      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006164:	4b73      	ldr	r3, [pc, #460]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a72      	ldr	r2, [pc, #456]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800616a:	f043 0308 	orr.w	r3, r3, #8
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b70      	ldr	r3, [pc, #448]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	496d      	ldr	r1, [pc, #436]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006182:	4b6c      	ldr	r3, [pc, #432]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	4968      	ldr	r1, [pc, #416]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
 8006196:	e025      	b.n	80061e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006198:	4b66      	ldr	r3, [pc, #408]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a65      	ldr	r2, [pc, #404]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800619e:	f043 0308 	orr.w	r3, r3, #8
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b63      	ldr	r3, [pc, #396]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	4960      	ldr	r1, [pc, #384]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	495b      	ldr	r1, [pc, #364]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fd15 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e343      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061e4:	f000 fc4a 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	4950      	ldr	r1, [pc, #320]	; (8006338 <HAL_RCC_OscConfig+0x274>)
 80061f6:	5ccb      	ldrb	r3, [r1, r3]
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	4a4e      	ldr	r2, [pc, #312]	; (800633c <HAL_RCC_OscConfig+0x278>)
 8006202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <HAL_RCC_OscConfig+0x27c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc fdab 	bl	8002d64 <HAL_InitTick>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d052      	beq.n	80062be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	e327      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d032      	beq.n	800628a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a42      	ldr	r2, [pc, #264]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006230:	f7fc fde8 	bl	8002e04 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006238:	f7fc fde4 	bl	8002e04 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e310      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800624a:	4b3a      	ldr	r3, [pc, #232]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a36      	ldr	r2, [pc, #216]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800625c:	f043 0308 	orr.w	r3, r3, #8
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4931      	ldr	r1, [pc, #196]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006274:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	492c      	ldr	r1, [pc, #176]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006284:	4313      	orrs	r3, r2
 8006286:	604b      	str	r3, [r1, #4]
 8006288:	e01a      	b.n	80062c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800628a:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a29      	ldr	r2, [pc, #164]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006296:	f7fc fdb5 	bl	8002e04 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800629e:	f7fc fdb1 	bl	8002e04 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e2dd      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062b0:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f0      	bne.n	800629e <HAL_RCC_OscConfig+0x1da>
 80062bc:	e000      	b.n	80062c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d074      	beq.n	80063b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d005      	beq.n	80062de <HAL_RCC_OscConfig+0x21a>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d10e      	bne.n	80062f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d10b      	bne.n	80062f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d064      	beq.n	80063b4 <HAL_RCC_OscConfig+0x2f0>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d160      	bne.n	80063b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e2ba      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d106      	bne.n	800630e <HAL_RCC_OscConfig+0x24a>
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0b      	ldr	r2, [pc, #44]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e026      	b.n	800635c <HAL_RCC_OscConfig+0x298>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006316:	d115      	bne.n	8006344 <HAL_RCC_OscConfig+0x280>
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a05      	ldr	r2, [pc, #20]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800631e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a02      	ldr	r2, [pc, #8]	; (8006334 <HAL_RCC_OscConfig+0x270>)
 800632a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e014      	b.n	800635c <HAL_RCC_OscConfig+0x298>
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	08016a60 	.word	0x08016a60
 800633c:	2000001c 	.word	0x2000001c
 8006340:	20000020 	.word	0x20000020
 8006344:	4ba0      	ldr	r3, [pc, #640]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a9f      	ldr	r2, [pc, #636]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b9d      	ldr	r3, [pc, #628]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a9c      	ldr	r2, [pc, #624]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc fd4e 	bl	8002e04 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800636c:	f7fc fd4a 	bl	8002e04 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e276      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800637e:	4b92      	ldr	r3, [pc, #584]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x2a8>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc fd3a 	bl	8002e04 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006394:	f7fc fd36 	bl	8002e04 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e262      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x2d0>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d060      	beq.n	8006484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d005      	beq.n	80063d4 <HAL_RCC_OscConfig+0x310>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b0c      	cmp	r3, #12
 80063cc:	d119      	bne.n	8006402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d116      	bne.n	8006402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063d4:	4b7c      	ldr	r3, [pc, #496]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_OscConfig+0x328>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e23f      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ec:	4b76      	ldr	r3, [pc, #472]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	4973      	ldr	r1, [pc, #460]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006400:	e040      	b.n	8006484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d023      	beq.n	8006452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800640a:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6e      	ldr	r2, [pc, #440]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fc fcf5 	bl	8002e04 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641e:	f7fc fcf1 	bl	8002e04 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e21d      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006430:	4b65      	ldr	r3, [pc, #404]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643c:	4b62      	ldr	r3, [pc, #392]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	495f      	ldr	r1, [pc, #380]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800644c:	4313      	orrs	r3, r2
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	e018      	b.n	8006484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006452:	4b5d      	ldr	r3, [pc, #372]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5c      	ldr	r2, [pc, #368]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800645c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fc fcd1 	bl	8002e04 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006466:	f7fc fccd 	bl	8002e04 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e1f9      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006478:	4b53      	ldr	r3, [pc, #332]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d03c      	beq.n	800650a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01c      	beq.n	80064d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006498:	4b4b      	ldr	r3, [pc, #300]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800649a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a8:	f7fc fcac 	bl	8002e04 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b0:	f7fc fca8 	bl	8002e04 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e1d4      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80064c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0ef      	beq.n	80064b0 <HAL_RCC_OscConfig+0x3ec>
 80064d0:	e01b      	b.n	800650a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d2:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80064d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d8:	4a3b      	ldr	r2, [pc, #236]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fc fc8f 	bl	8002e04 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ea:	f7fc fc8b 	bl	8002e04 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e1b7      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064fc:	4b32      	ldr	r3, [pc, #200]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1ef      	bne.n	80064ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a6 	beq.w	8006664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006518:	2300      	movs	r3, #0
 800651a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006528:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652c:	4a26      	ldr	r2, [pc, #152]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800652e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006532:	6593      	str	r3, [r2, #88]	; 0x58
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006540:	2301      	movs	r3, #1
 8006542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <HAL_RCC_OscConfig+0x508>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d118      	bne.n	8006582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006550:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <HAL_RCC_OscConfig+0x508>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <HAL_RCC_OscConfig+0x508>)
 8006556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655c:	f7fc fc52 	bl	8002e04 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006564:	f7fc fc4e 	bl	8002e04 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e17a      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <HAL_RCC_OscConfig+0x508>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f0      	beq.n	8006564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d108      	bne.n	800659c <HAL_RCC_OscConfig+0x4d8>
 800658a:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	4a0d      	ldr	r2, [pc, #52]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800659a:	e029      	b.n	80065f0 <HAL_RCC_OscConfig+0x52c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b05      	cmp	r3, #5
 80065a2:	d115      	bne.n	80065d0 <HAL_RCC_OscConfig+0x50c>
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80065ac:	f043 0304 	orr.w	r3, r3, #4
 80065b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <HAL_RCC_OscConfig+0x504>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065c4:	e014      	b.n	80065f0 <HAL_RCC_OscConfig+0x52c>
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40007000 	.word	0x40007000
 80065d0:	4b9c      	ldr	r3, [pc, #624]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d6:	4a9b      	ldr	r2, [pc, #620]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065e0:	4b98      	ldr	r3, [pc, #608]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	4a97      	ldr	r2, [pc, #604]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d016      	beq.n	8006626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fc fc04 	bl	8002e04 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fe:	e00a      	b.n	8006616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006600:	f7fc fc00 	bl	8002e04 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f241 3288 	movw	r2, #5000	; 0x1388
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e12a      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006616:	4b8b      	ldr	r3, [pc, #556]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0ed      	beq.n	8006600 <HAL_RCC_OscConfig+0x53c>
 8006624:	e015      	b.n	8006652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fc fbed 	bl	8002e04 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800662c:	e00a      	b.n	8006644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662e:	f7fc fbe9 	bl	8002e04 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	; 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e113      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006644:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ed      	bne.n	800662e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006652:	7ffb      	ldrb	r3, [r7, #31]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006658:	4b7a      	ldr	r3, [pc, #488]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800665a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665c:	4a79      	ldr	r2, [pc, #484]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800665e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80fe 	beq.w	800686a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	2b02      	cmp	r3, #2
 8006674:	f040 80d0 	bne.w	8006818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006678:	4b72      	ldr	r3, [pc, #456]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0203 	and.w	r2, r3, #3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	429a      	cmp	r2, r3
 800668a:	d130      	bne.n	80066ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	3b01      	subs	r3, #1
 8006698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d127      	bne.n	80066ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11f      	bne.n	80066ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066b8:	2a07      	cmp	r2, #7
 80066ba:	bf14      	ite	ne
 80066bc:	2201      	movne	r2, #1
 80066be:	2200      	moveq	r2, #0
 80066c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d109      	bne.n	80066ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	3b01      	subs	r3, #1
 80066e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d06e      	beq.n	80067cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d069      	beq.n	80067c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066f4:	4b53      	ldr	r3, [pc, #332]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006700:	4b50      	ldr	r3, [pc, #320]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0ad      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006710:	4b4c      	ldr	r3, [pc, #304]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a4b      	ldr	r2, [pc, #300]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800671c:	f7fc fb72 	bl	8002e04 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fc fb6e 	bl	8002e04 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e09a      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006736:	4b43      	ldr	r3, [pc, #268]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006742:	4b40      	ldr	r3, [pc, #256]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	4b40      	ldr	r3, [pc, #256]	; (8006848 <HAL_RCC_OscConfig+0x784>)
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006752:	3a01      	subs	r2, #1
 8006754:	0112      	lsls	r2, r2, #4
 8006756:	4311      	orrs	r1, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800675c:	0212      	lsls	r2, r2, #8
 800675e:	4311      	orrs	r1, r2
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006764:	0852      	lsrs	r2, r2, #1
 8006766:	3a01      	subs	r2, #1
 8006768:	0552      	lsls	r2, r2, #21
 800676a:	4311      	orrs	r1, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006770:	0852      	lsrs	r2, r2, #1
 8006772:	3a01      	subs	r2, #1
 8006774:	0652      	lsls	r2, r2, #25
 8006776:	4311      	orrs	r1, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800677c:	0912      	lsrs	r2, r2, #4
 800677e:	0452      	lsls	r2, r2, #17
 8006780:	430a      	orrs	r2, r1
 8006782:	4930      	ldr	r1, [pc, #192]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006784:	4313      	orrs	r3, r2
 8006786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006788:	4b2e      	ldr	r3, [pc, #184]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800678e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a2a      	ldr	r2, [pc, #168]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800679a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800679e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067a0:	f7fc fb30 	bl	8002e04 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a8:	f7fc fb2c 	bl	8002e04 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e058      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067c6:	e050      	b.n	800686a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e04f      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067cc:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d148      	bne.n	800686a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a19      	ldr	r2, [pc, #100]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067e4:	4b17      	ldr	r3, [pc, #92]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4a16      	ldr	r2, [pc, #88]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 80067ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067f0:	f7fc fb08 	bl	8002e04 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fc fb04 	bl	8002e04 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e030      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCC_OscConfig+0x734>
 8006816:	e028      	b.n	800686a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b0c      	cmp	r3, #12
 800681c:	d023      	beq.n	8006866 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681e:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a08      	ldr	r2, [pc, #32]	; (8006844 <HAL_RCC_OscConfig+0x780>)
 8006824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fc faeb 	bl	8002e04 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006830:	e00c      	b.n	800684c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006832:	f7fc fae7 	bl	8002e04 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d905      	bls.n	800684c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e013      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
 8006844:	40021000 	.word	0x40021000
 8006848:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_RCC_OscConfig+0x7b0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ec      	bne.n	8006832 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCC_OscConfig+0x7b0>)
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	4905      	ldr	r1, [pc, #20]	; (8006874 <HAL_RCC_OscConfig+0x7b0>)
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_RCC_OscConfig+0x7b4>)
 8006860:	4013      	ands	r3, r2
 8006862:	60cb      	str	r3, [r1, #12]
 8006864:	e001      	b.n	800686a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40021000 	.word	0x40021000
 8006878:	feeefffc 	.word	0xfeeefffc

0800687c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0e7      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006890:	4b75      	ldr	r3, [pc, #468]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d910      	bls.n	80068c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b72      	ldr	r3, [pc, #456]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 0207 	bic.w	r2, r3, #7
 80068a6:	4970      	ldr	r1, [pc, #448]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b6e      	ldr	r3, [pc, #440]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d001      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0cf      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4b66      	ldr	r3, [pc, #408]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068d8:	429a      	cmp	r2, r3
 80068da:	d908      	bls.n	80068ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068dc:	4b63      	ldr	r3, [pc, #396]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4960      	ldr	r1, [pc, #384]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d04c      	beq.n	8006994 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006902:	4b5a      	ldr	r3, [pc, #360]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d121      	bne.n	8006952 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0a6      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d107      	bne.n	800692a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800691a:	4b54      	ldr	r3, [pc, #336]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d115      	bne.n	8006952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e09a      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d107      	bne.n	8006942 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006932:	4b4e      	ldr	r3, [pc, #312]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e08e      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006942:	4b4a      	ldr	r3, [pc, #296]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e086      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006952:	4b46      	ldr	r3, [pc, #280]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f023 0203 	bic.w	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	4943      	ldr	r1, [pc, #268]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006960:	4313      	orrs	r3, r2
 8006962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006964:	f7fc fa4e 	bl	8002e04 <HAL_GetTick>
 8006968:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696a:	e00a      	b.n	8006982 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696c:	f7fc fa4a 	bl	8002e04 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f241 3288 	movw	r2, #5000	; 0x1388
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e06e      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006982:	4b3a      	ldr	r3, [pc, #232]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 020c 	and.w	r2, r3, #12
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	429a      	cmp	r2, r3
 8006992:	d1eb      	bne.n	800696c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d010      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	4b31      	ldr	r3, [pc, #196]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d208      	bcs.n	80069c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b0:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	492b      	ldr	r1, [pc, #172]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c2:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d210      	bcs.n	80069f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d0:	4b25      	ldr	r3, [pc, #148]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 0207 	bic.w	r2, r3, #7
 80069d8:	4923      	ldr	r1, [pc, #140]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e0:	4b21      	ldr	r3, [pc, #132]	; (8006a68 <HAL_RCC_ClockConfig+0x1ec>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e036      	b.n	8006a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069fe:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	4918      	ldr	r1, [pc, #96]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a1c:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	4910      	ldr	r1, [pc, #64]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a30:	f000 f824 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8006a34:	4602      	mov	r2, r0
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <HAL_RCC_ClockConfig+0x1f0>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	490b      	ldr	r1, [pc, #44]	; (8006a70 <HAL_RCC_ClockConfig+0x1f4>)
 8006a42:	5ccb      	ldrb	r3, [r1, r3]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <HAL_RCC_ClockConfig+0x1f8>)
 8006a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a50:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1fc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fc f985 	bl	8002d64 <HAL_InitTick>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40022000 	.word	0x40022000
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	08016a60 	.word	0x08016a60
 8006a74:	2000001c 	.word	0x2000001c
 8006a78:	20000020 	.word	0x20000020

08006a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	; 0x24
 8006a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8a:	4b3e      	ldr	r3, [pc, #248]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 030c 	and.w	r3, r3, #12
 8006a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a94:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b0c      	cmp	r3, #12
 8006aa8:	d121      	bne.n	8006aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d11e      	bne.n	8006aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ab0:	4b34      	ldr	r3, [pc, #208]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006abc:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e005      	b.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006acc:	4b2d      	ldr	r3, [pc, #180]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ad8:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10d      	bne.n	8006b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006aec:	e00a      	b.n	8006b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d102      	bne.n	8006afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e004      	b.n	8006b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b00:	4b23      	ldr	r3, [pc, #140]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b0c      	cmp	r3, #12
 8006b08:	d134      	bne.n	8006b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d003      	beq.n	8006b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCC_GetSysClockFreq+0xac>
 8006b20:	e005      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b22:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8006b24:	617b      	str	r3, [r7, #20]
      break;
 8006b26:	e005      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b2a:	617b      	str	r3, [r7, #20]
      break;
 8006b2c:	e002      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	617b      	str	r3, [r7, #20]
      break;
 8006b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	091b      	lsrs	r3, r3, #4
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	3301      	adds	r3, #1
 8006b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	fb03 f202 	mul.w	r2, r3, r2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	0e5b      	lsrs	r3, r3, #25
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	3301      	adds	r3, #1
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b74:	69bb      	ldr	r3, [r7, #24]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40021000 	.word	0x40021000
 8006b88:	08016a78 	.word	0x08016a78
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	007a1200 	.word	0x007a1200

08006b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	2000001c 	.word	0x2000001c

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006bb0:	f7ff fff0 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4904      	ldr	r1, [pc, #16]	; (8006bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bc2:	5ccb      	ldrb	r3, [r1, r3]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	08016a70 	.word	0x08016a70

08006bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bdc:	f7ff ffda 	bl	8006b94 <HAL_RCC_GetHCLKFreq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	0adb      	lsrs	r3, r3, #11
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4904      	ldr	r1, [pc, #16]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bee:	5ccb      	ldrb	r3, [r1, r3]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	08016a70 	.word	0x08016a70

08006c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c10:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c1c:	f7ff f996 	bl	8005f4c <HAL_PWREx_GetVoltageRange>
 8006c20:	6178      	str	r0, [r7, #20]
 8006c22:	e014      	b.n	8006c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c24:	4b25      	ldr	r3, [pc, #148]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c28:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c30:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c3c:	f7ff f986 	bl	8005f4c <HAL_PWREx_GetVoltageRange>
 8006c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c42:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c54:	d10b      	bne.n	8006c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b80      	cmp	r3, #128	; 0x80
 8006c5a:	d919      	bls.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8006c60:	d902      	bls.n	8006c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c62:	2302      	movs	r3, #2
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	e013      	b.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c68:	2301      	movs	r3, #1
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	e010      	b.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d902      	bls.n	8006c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c74:	2303      	movs	r3, #3
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	e00a      	b.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d102      	bne.n	8006c86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c80:	2302      	movs	r3, #2
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	e004      	b.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d101      	bne.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f023 0207 	bic.w	r2, r3, #7
 8006c98:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d001      	beq.n	8006cb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40022000 	.word	0x40022000

08006cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ccc:	2300      	movs	r3, #0
 8006cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d041      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ce8:	d02a      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006cea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cee:	d824      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cf4:	d008      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cfa:	d81e      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d04:	d010      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d06:	e018      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d08:	4b86      	ldr	r3, [pc, #536]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a85      	ldr	r2, [pc, #532]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d14:	e015      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fabb 	bl	8007298 <RCCEx_PLLSAI1_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d26:	e00c      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3320      	adds	r3, #32
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fba6 	bl	8007480 <RCCEx_PLLSAI2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d38:	e003      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d42:	7cfb      	ldrb	r3, [r7, #19]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d48:	4b76      	ldr	r3, [pc, #472]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d56:	4973      	ldr	r1, [pc, #460]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d5e:	e001      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	7cfb      	ldrb	r3, [r7, #19]
 8006d62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d041      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d78:	d02a      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006d7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d7e:	d824      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d84:	d008      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8a:	d81e      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d94:	d010      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d96:	e018      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d98:	4b62      	ldr	r3, [pc, #392]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a61      	ldr	r2, [pc, #388]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006da4:	e015      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	2100      	movs	r1, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fa73 	bl	8007298 <RCCEx_PLLSAI1_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006db6:	e00c      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3320      	adds	r3, #32
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fb5e 	bl	8007480 <RCCEx_PLLSAI2_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006dc8:	e003      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8006dce:	e000      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd2:	7cfb      	ldrb	r3, [r7, #19]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dd8:	4b52      	ldr	r3, [pc, #328]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de6:	494f      	ldr	r1, [pc, #316]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006dee:	e001      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a0 	beq.w	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e02:	2300      	movs	r3, #0
 8006e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e06:	4b47      	ldr	r3, [pc, #284]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e1c:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e20:	4a40      	ldr	r2, [pc, #256]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e26:	6593      	str	r3, [r2, #88]	; 0x58
 8006e28:	4b3e      	ldr	r3, [pc, #248]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e34:	2301      	movs	r3, #1
 8006e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e38:	4b3b      	ldr	r3, [pc, #236]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a3a      	ldr	r2, [pc, #232]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e44:	f7fb ffde 	bl	8002e04 <HAL_GetTick>
 8006e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e4a:	e009      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fb ffda 	bl	8002e04 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d902      	bls.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8006e5e:	e005      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e60:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ef      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006e6c:	7cfb      	ldrb	r3, [r7, #19]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d15c      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e72:	4b2c      	ldr	r3, [pc, #176]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01f      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d019      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e90:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e9c:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea2:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ebc:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d016      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ece:	f7fb ff99 	bl	8002e04 <HAL_GetTick>
 8006ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ed4:	e00b      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fb ff95 	bl	8002e04 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d902      	bls.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	74fb      	strb	r3, [r7, #19]
            break;
 8006eec:	e006      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eee:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ec      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10c      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f12:	4904      	ldr	r1, [pc, #16]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f1a:	e009      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	74bb      	strb	r3, [r7, #18]
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006f22:	bf00      	nop
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	7cfb      	ldrb	r3, [r7, #19]
 8006f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f30:	7c7b      	ldrb	r3, [r7, #17]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f36:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	4a9d      	ldr	r2, [pc, #628]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f4e:	4b98      	ldr	r3, [pc, #608]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f54:	f023 0203 	bic.w	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	4994      	ldr	r1, [pc, #592]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f70:	4b8f      	ldr	r3, [pc, #572]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f76:	f023 020c 	bic.w	r2, r3, #12
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	498c      	ldr	r1, [pc, #560]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f92:	4b87      	ldr	r3, [pc, #540]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	4983      	ldr	r1, [pc, #524]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fb4:	4b7e      	ldr	r3, [pc, #504]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	497b      	ldr	r1, [pc, #492]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fd6:	4b76      	ldr	r3, [pc, #472]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe4:	4972      	ldr	r1, [pc, #456]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ff8:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	496a      	ldr	r1, [pc, #424]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800701a:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007028:	4961      	ldr	r1, [pc, #388]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800703c:	4b5c      	ldr	r3, [pc, #368]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704a:	4959      	ldr	r1, [pc, #356]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800705e:	4b54      	ldr	r3, [pc, #336]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	4950      	ldr	r1, [pc, #320]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	4948      	ldr	r1, [pc, #288]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070a2:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	493f      	ldr	r1, [pc, #252]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d028      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d2:	4937      	ldr	r1, [pc, #220]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e2:	d106      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e4:	4b32      	ldr	r3, [pc, #200]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4a31      	ldr	r2, [pc, #196]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ee:	60d3      	str	r3, [r2, #12]
 80070f0:	e011      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070fa:	d10c      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f8c8 	bl	8007298 <RCCEx_PLLSAI1_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800710c:	7cfb      	ldrb	r3, [r7, #19]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d028      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007130:	491f      	ldr	r1, [pc, #124]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007140:	d106      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007142:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714c:	60d3      	str	r3, [r2, #12]
 800714e:	e011      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007158:	d10c      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f899 	bl	8007298 <RCCEx_PLLSAI1_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800716a:	7cfb      	ldrb	r3, [r7, #19]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02b      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	4908      	ldr	r1, [pc, #32]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800719a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800719e:	d109      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4a02      	ldr	r2, [pc, #8]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071aa:	60d3      	str	r3, [r2, #12]
 80071ac:	e014      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071bc:	d10c      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3304      	adds	r3, #4
 80071c2:	2101      	movs	r1, #1
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f867 	bl	8007298 <RCCEx_PLLSAI1_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071ce:	7cfb      	ldrb	r3, [r7, #19]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02f      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071e4:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f2:	4928      	ldr	r1, [pc, #160]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007202:	d10d      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f844 	bl	8007298 <RCCEx_PLLSAI1_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007214:	7cfb      	ldrb	r3, [r7, #19]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d014      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800721a:	7cfb      	ldrb	r3, [r7, #19]
 800721c:	74bb      	strb	r3, [r7, #18]
 800721e:	e011      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007228:	d10c      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3320      	adds	r3, #32
 800722e:	2102      	movs	r1, #2
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f925 	bl	8007480 <RCCEx_PLLSAI2_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007240:	7cfb      	ldrb	r3, [r7, #19]
 8007242:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007256:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800725e:	490d      	ldr	r1, [pc, #52]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007282:	4904      	ldr	r1, [pc, #16]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800728a:	7cbb      	ldrb	r3, [r7, #18]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40021000 	.word	0x40021000

08007298 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072a6:	4b75      	ldr	r3, [pc, #468]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072b2:	4b72      	ldr	r3, [pc, #456]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0203 	and.w	r2, r3, #3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d10d      	bne.n	80072de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
       ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072ca:	4b6c      	ldr	r3, [pc, #432]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
       ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d047      	beq.n	800736e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	e044      	b.n	800736e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d018      	beq.n	800731e <RCCEx_PLLSAI1_Config+0x86>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d825      	bhi.n	800733c <RCCEx_PLLSAI1_Config+0xa4>
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d002      	beq.n	80072fa <RCCEx_PLLSAI1_Config+0x62>
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d009      	beq.n	800730c <RCCEx_PLLSAI1_Config+0x74>
 80072f8:	e020      	b.n	800733c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072fa:	4b60      	ldr	r3, [pc, #384]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d11d      	bne.n	8007342 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800730a:	e01a      	b.n	8007342 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800730c:	4b5b      	ldr	r3, [pc, #364]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007314:	2b00      	cmp	r3, #0
 8007316:	d116      	bne.n	8007346 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800731c:	e013      	b.n	8007346 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800731e:	4b57      	ldr	r3, [pc, #348]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800732a:	4b54      	ldr	r3, [pc, #336]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800733a:	e006      	b.n	800734a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
      break;
 8007340:	e004      	b.n	800734c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007342:	bf00      	nop
 8007344:	e002      	b.n	800734c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800734a:	bf00      	nop
    }

    if(status == HAL_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007352:	4b4a      	ldr	r3, [pc, #296]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	3b01      	subs	r3, #1
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	430b      	orrs	r3, r1
 8007368:	4944      	ldr	r1, [pc, #272]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800736a:	4313      	orrs	r3, r2
 800736c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d17d      	bne.n	8007470 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007374:	4b41      	ldr	r3, [pc, #260]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a40      	ldr	r2, [pc, #256]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800737a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800737e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007380:	f7fb fd40 	bl	8002e04 <HAL_GetTick>
 8007384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007386:	e009      	b.n	800739c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007388:	f7fb fd3c 	bl	8002e04 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d902      	bls.n	800739c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	73fb      	strb	r3, [r7, #15]
        break;
 800739a:	e005      	b.n	80073a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800739c:	4b37      	ldr	r3, [pc, #220]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1ef      	bne.n	8007388 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d160      	bne.n	8007470 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d111      	bne.n	80073d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073b4:	4b31      	ldr	r3, [pc, #196]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80073bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6892      	ldr	r2, [r2, #8]
 80073c4:	0211      	lsls	r1, r2, #8
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68d2      	ldr	r2, [r2, #12]
 80073ca:	0912      	lsrs	r2, r2, #4
 80073cc:	0452      	lsls	r2, r2, #17
 80073ce:	430a      	orrs	r2, r1
 80073d0:	492a      	ldr	r1, [pc, #168]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	610b      	str	r3, [r1, #16]
 80073d6:	e027      	b.n	8007428 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d112      	bne.n	8007404 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073de:	4b27      	ldr	r3, [pc, #156]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6892      	ldr	r2, [r2, #8]
 80073ee:	0211      	lsls	r1, r2, #8
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6912      	ldr	r2, [r2, #16]
 80073f4:	0852      	lsrs	r2, r2, #1
 80073f6:	3a01      	subs	r2, #1
 80073f8:	0552      	lsls	r2, r2, #21
 80073fa:	430a      	orrs	r2, r1
 80073fc:	491f      	ldr	r1, [pc, #124]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	610b      	str	r3, [r1, #16]
 8007402:	e011      	b.n	8007428 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800740c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6892      	ldr	r2, [r2, #8]
 8007414:	0211      	lsls	r1, r2, #8
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6952      	ldr	r2, [r2, #20]
 800741a:	0852      	lsrs	r2, r2, #1
 800741c:	3a01      	subs	r2, #1
 800741e:	0652      	lsls	r2, r2, #25
 8007420:	430a      	orrs	r2, r1
 8007422:	4916      	ldr	r1, [pc, #88]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007424:	4313      	orrs	r3, r2
 8007426:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007428:	4b14      	ldr	r3, [pc, #80]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a13      	ldr	r2, [pc, #76]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800742e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007434:	f7fb fce6 	bl	8002e04 <HAL_GetTick>
 8007438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800743a:	e009      	b.n	8007450 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800743c:	f7fb fce2 	bl	8002e04 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d902      	bls.n	8007450 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	73fb      	strb	r3, [r7, #15]
          break;
 800744e:	e005      	b.n	800745c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0ef      	beq.n	800743c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007462:	4b06      	ldr	r3, [pc, #24]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	4904      	ldr	r1, [pc, #16]	; (800747c <RCCEx_PLLSAI1_Config+0x1e4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40021000 	.word	0x40021000

08007480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800748e:	4b6a      	ldr	r3, [pc, #424]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d018      	beq.n	80074cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800749a:	4b67      	ldr	r3, [pc, #412]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0203 	and.w	r2, r3, #3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d10d      	bne.n	80074c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
       ||
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80074b2:	4b61      	ldr	r3, [pc, #388]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	091b      	lsrs	r3, r3, #4
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
       ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d047      	beq.n	8007556 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	e044      	b.n	8007556 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d018      	beq.n	8007506 <RCCEx_PLLSAI2_Config+0x86>
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d825      	bhi.n	8007524 <RCCEx_PLLSAI2_Config+0xa4>
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d002      	beq.n	80074e2 <RCCEx_PLLSAI2_Config+0x62>
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d009      	beq.n	80074f4 <RCCEx_PLLSAI2_Config+0x74>
 80074e0:	e020      	b.n	8007524 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074e2:	4b55      	ldr	r3, [pc, #340]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11d      	bne.n	800752a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f2:	e01a      	b.n	800752a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074f4:	4b50      	ldr	r3, [pc, #320]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d116      	bne.n	800752e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007504:	e013      	b.n	800752e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007506:	4b4c      	ldr	r3, [pc, #304]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007512:	4b49      	ldr	r3, [pc, #292]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007522:	e006      	b.n	8007532 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      break;
 8007528:	e004      	b.n	8007534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007532:	bf00      	nop
    }

    if(status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10d      	bne.n	8007556 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800753a:	4b3f      	ldr	r3, [pc, #252]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	3b01      	subs	r3, #1
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	430b      	orrs	r3, r1
 8007550:	4939      	ldr	r1, [pc, #228]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007552:	4313      	orrs	r3, r2
 8007554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d167      	bne.n	800762c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800755c:	4b36      	ldr	r3, [pc, #216]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a35      	ldr	r2, [pc, #212]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007568:	f7fb fc4c 	bl	8002e04 <HAL_GetTick>
 800756c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800756e:	e009      	b.n	8007584 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007570:	f7fb fc48 	bl	8002e04 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d902      	bls.n	8007584 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	73fb      	strb	r3, [r7, #15]
        break;
 8007582:	e005      	b.n	8007590 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007584:	4b2c      	ldr	r3, [pc, #176]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ef      	bne.n	8007570 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d14a      	bne.n	800762c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d111      	bne.n	80075c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800759c:	4b26      	ldr	r3, [pc, #152]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80075a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6892      	ldr	r2, [r2, #8]
 80075ac:	0211      	lsls	r1, r2, #8
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68d2      	ldr	r2, [r2, #12]
 80075b2:	0912      	lsrs	r2, r2, #4
 80075b4:	0452      	lsls	r2, r2, #17
 80075b6:	430a      	orrs	r2, r1
 80075b8:	491f      	ldr	r1, [pc, #124]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	614b      	str	r3, [r1, #20]
 80075be:	e011      	b.n	80075e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6892      	ldr	r2, [r2, #8]
 80075d0:	0211      	lsls	r1, r2, #8
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6912      	ldr	r2, [r2, #16]
 80075d6:	0852      	lsrs	r2, r2, #1
 80075d8:	3a01      	subs	r2, #1
 80075da:	0652      	lsls	r2, r2, #25
 80075dc:	430a      	orrs	r2, r1
 80075de:	4916      	ldr	r1, [pc, #88]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075e4:	4b14      	ldr	r3, [pc, #80]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a13      	ldr	r2, [pc, #76]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fb fc08 	bl	8002e04 <HAL_GetTick>
 80075f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075f6:	e009      	b.n	800760c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075f8:	f7fb fc04 	bl	8002e04 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d902      	bls.n	800760c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
          break;
 800760a:	e005      	b.n	8007618 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ef      	beq.n	80075f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007620:	695a      	ldr	r2, [r3, #20]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	4904      	ldr	r1, [pc, #16]	; (8007638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007628:	4313      	orrs	r3, r2
 800762a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40021000 	.word	0x40021000

0800763c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e040      	b.n	80076d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fa f91c 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2224      	movs	r2, #36	; 0x24
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb6a 	bl	8007d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8af 	bl	80077ec <UART_SetConfig>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e01b      	b.n	80076d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fbe9 	bl	8007ea0 <UART_CheckIdleState>
 80076ce:	4603      	mov	r3, r0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d178      	bne.n	80077e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_UART_Transmit+0x24>
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e071      	b.n	80077e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2221      	movs	r2, #33	; 0x21
 800770c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770e:	f7fb fb79 	bl	8002e04 <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	88fa      	ldrh	r2, [r7, #6]
 8007718:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	88fa      	ldrh	r2, [r7, #6]
 8007720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d108      	bne.n	8007740 <HAL_UART_Transmit+0x68>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	e003      	b.n	8007748 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007748:	e030      	b.n	80077ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2200      	movs	r2, #0
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fc4b 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e03c      	b.n	80077e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777c:	b292      	uxth	r2, r2
 800777e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	3302      	adds	r3, #2
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e008      	b.n	800779a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	b292      	uxth	r2, r2
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	3301      	adds	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1c8      	bne.n	800774a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2200      	movs	r2, #0
 80077c0:	2140      	movs	r1, #64	; 0x40
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fc14 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e005      	b.n	80077e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
  }
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f0:	b08a      	sub	sp, #40	; 0x28
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	431a      	orrs	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	431a      	orrs	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	4313      	orrs	r3, r2
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4ba4      	ldr	r3, [pc, #656]	; (8007aac <UART_SetConfig+0x2c0>)
 800781c:	4013      	ands	r3, r2
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007824:	430b      	orrs	r3, r1
 8007826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a99      	ldr	r2, [pc, #612]	; (8007ab0 <UART_SetConfig+0x2c4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007854:	4313      	orrs	r3, r2
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a90      	ldr	r2, [pc, #576]	; (8007ab4 <UART_SetConfig+0x2c8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d126      	bne.n	80078c4 <UART_SetConfig+0xd8>
 8007876:	4b90      	ldr	r3, [pc, #576]	; (8007ab8 <UART_SetConfig+0x2cc>)
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b03      	cmp	r3, #3
 8007882:	d81b      	bhi.n	80078bc <UART_SetConfig+0xd0>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0xa0>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078b5 	.word	0x080078b5
 800789c:	2301      	movs	r3, #1
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a2:	e116      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078aa:	e112      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b2:	e10e      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e10a      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e106      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a7c      	ldr	r2, [pc, #496]	; (8007abc <UART_SetConfig+0x2d0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d138      	bne.n	8007940 <UART_SetConfig+0x154>
 80078ce:	4b7a      	ldr	r3, [pc, #488]	; (8007ab8 <UART_SetConfig+0x2cc>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	f003 030c 	and.w	r3, r3, #12
 80078d8:	2b0c      	cmp	r3, #12
 80078da:	d82d      	bhi.n	8007938 <UART_SetConfig+0x14c>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0xf8>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007919 	.word	0x08007919
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007929 	.word	0x08007929
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007921 	.word	0x08007921
 8007908:	08007939 	.word	0x08007939
 800790c:	08007939 	.word	0x08007939
 8007910:	08007939 	.word	0x08007939
 8007914:	08007931 	.word	0x08007931
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800791e:	e0d8      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007920:	2302      	movs	r3, #2
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007926:	e0d4      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800792e:	e0d0      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007936:	e0cc      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793e:	e0c8      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a5e      	ldr	r2, [pc, #376]	; (8007ac0 <UART_SetConfig+0x2d4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d125      	bne.n	8007996 <UART_SetConfig+0x1aa>
 800794a:	4b5b      	ldr	r3, [pc, #364]	; (8007ab8 <UART_SetConfig+0x2cc>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007954:	2b30      	cmp	r3, #48	; 0x30
 8007956:	d016      	beq.n	8007986 <UART_SetConfig+0x19a>
 8007958:	2b30      	cmp	r3, #48	; 0x30
 800795a:	d818      	bhi.n	800798e <UART_SetConfig+0x1a2>
 800795c:	2b20      	cmp	r3, #32
 800795e:	d00a      	beq.n	8007976 <UART_SetConfig+0x18a>
 8007960:	2b20      	cmp	r3, #32
 8007962:	d814      	bhi.n	800798e <UART_SetConfig+0x1a2>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <UART_SetConfig+0x182>
 8007968:	2b10      	cmp	r3, #16
 800796a:	d008      	beq.n	800797e <UART_SetConfig+0x192>
 800796c:	e00f      	b.n	800798e <UART_SetConfig+0x1a2>
 800796e:	2300      	movs	r3, #0
 8007970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007974:	e0ad      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007976:	2302      	movs	r3, #2
 8007978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797c:	e0a9      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 800797e:	2304      	movs	r3, #4
 8007980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007984:	e0a5      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007986:	2308      	movs	r3, #8
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798c:	e0a1      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 800798e:	2310      	movs	r3, #16
 8007990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007994:	e09d      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a4a      	ldr	r2, [pc, #296]	; (8007ac4 <UART_SetConfig+0x2d8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d125      	bne.n	80079ec <UART_SetConfig+0x200>
 80079a0:	4b45      	ldr	r3, [pc, #276]	; (8007ab8 <UART_SetConfig+0x2cc>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079aa:	2bc0      	cmp	r3, #192	; 0xc0
 80079ac:	d016      	beq.n	80079dc <UART_SetConfig+0x1f0>
 80079ae:	2bc0      	cmp	r3, #192	; 0xc0
 80079b0:	d818      	bhi.n	80079e4 <UART_SetConfig+0x1f8>
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d00a      	beq.n	80079cc <UART_SetConfig+0x1e0>
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d814      	bhi.n	80079e4 <UART_SetConfig+0x1f8>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <UART_SetConfig+0x1d8>
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d008      	beq.n	80079d4 <UART_SetConfig+0x1e8>
 80079c2:	e00f      	b.n	80079e4 <UART_SetConfig+0x1f8>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ca:	e082      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079d2:	e07e      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079da:	e07a      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e2:	e076      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ea:	e072      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a35      	ldr	r2, [pc, #212]	; (8007ac8 <UART_SetConfig+0x2dc>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d12a      	bne.n	8007a4c <UART_SetConfig+0x260>
 80079f6:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <UART_SetConfig+0x2cc>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a04:	d01a      	beq.n	8007a3c <UART_SetConfig+0x250>
 8007a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a0a:	d81b      	bhi.n	8007a44 <UART_SetConfig+0x258>
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d00c      	beq.n	8007a2c <UART_SetConfig+0x240>
 8007a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a16:	d815      	bhi.n	8007a44 <UART_SetConfig+0x258>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <UART_SetConfig+0x238>
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d008      	beq.n	8007a34 <UART_SetConfig+0x248>
 8007a22:	e00f      	b.n	8007a44 <UART_SetConfig+0x258>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a2a:	e052      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a32:	e04e      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a3a:	e04a      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a42:	e046      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4a:	e042      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <UART_SetConfig+0x2c4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d13a      	bne.n	8007acc <UART_SetConfig+0x2e0>
 8007a56:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <UART_SetConfig+0x2cc>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a64:	d01a      	beq.n	8007a9c <UART_SetConfig+0x2b0>
 8007a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a6a:	d81b      	bhi.n	8007aa4 <UART_SetConfig+0x2b8>
 8007a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a70:	d00c      	beq.n	8007a8c <UART_SetConfig+0x2a0>
 8007a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a76:	d815      	bhi.n	8007aa4 <UART_SetConfig+0x2b8>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <UART_SetConfig+0x298>
 8007a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a80:	d008      	beq.n	8007a94 <UART_SetConfig+0x2a8>
 8007a82:	e00f      	b.n	8007aa4 <UART_SetConfig+0x2b8>
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a8a:	e022      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a92:	e01e      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a9a:	e01a      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa2:	e016      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aaa:	e012      	b.n	8007ad2 <UART_SetConfig+0x2e6>
 8007aac:	efff69f3 	.word	0xefff69f3
 8007ab0:	40008000 	.word	0x40008000
 8007ab4:	40013800 	.word	0x40013800
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	40004400 	.word	0x40004400
 8007ac0:	40004800 	.word	0x40004800
 8007ac4:	40004c00 	.word	0x40004c00
 8007ac8:	40005000 	.word	0x40005000
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a9f      	ldr	r2, [pc, #636]	; (8007d54 <UART_SetConfig+0x568>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d17a      	bne.n	8007bd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d824      	bhi.n	8007b2e <UART_SetConfig+0x342>
 8007ae4:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x300>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b2f 	.word	0x08007b2f
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b2f 	.word	0x08007b2f
 8007afc:	08007b1f 	.word	0x08007b1f
 8007b00:	08007b2f 	.word	0x08007b2f
 8007b04:	08007b2f 	.word	0x08007b2f
 8007b08:	08007b2f 	.word	0x08007b2f
 8007b0c:	08007b27 	.word	0x08007b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b10:	f7ff f84c 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8007b14:	61f8      	str	r0, [r7, #28]
        break;
 8007b16:	e010      	b.n	8007b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b8f      	ldr	r3, [pc, #572]	; (8007d58 <UART_SetConfig+0x56c>)
 8007b1a:	61fb      	str	r3, [r7, #28]
        break;
 8007b1c:	e00d      	b.n	8007b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1e:	f7fe ffad 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8007b22:	61f8      	str	r0, [r7, #28]
        break;
 8007b24:	e009      	b.n	8007b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2a:	61fb      	str	r3, [r7, #28]
        break;
 8007b2c:	e005      	b.n	8007b3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80fb 	beq.w	8007d38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d305      	bcc.n	8007b5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d903      	bls.n	8007b66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b64:	e0e8      	b.n	8007d38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	461c      	mov	r4, r3
 8007b6c:	4615      	mov	r5, r2
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	022b      	lsls	r3, r5, #8
 8007b78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b7c:	0222      	lsls	r2, r4, #8
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	6849      	ldr	r1, [r1, #4]
 8007b82:	0849      	lsrs	r1, r1, #1
 8007b84:	2000      	movs	r0, #0
 8007b86:	4688      	mov	r8, r1
 8007b88:	4681      	mov	r9, r0
 8007b8a:	eb12 0a08 	adds.w	sl, r2, r8
 8007b8e:	eb43 0b09 	adc.w	fp, r3, r9
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	4659      	mov	r1, fp
 8007ba4:	f7f9 f870 	bl	8000c88 <__aeabi_uldivmod>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4613      	mov	r3, r2
 8007bae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb6:	d308      	bcc.n	8007bca <UART_SetConfig+0x3de>
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bbe:	d204      	bcs.n	8007bca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	e0b6      	b.n	8007d38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bd0:	e0b2      	b.n	8007d38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bda:	d15e      	bne.n	8007c9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d828      	bhi.n	8007c36 <UART_SetConfig+0x44a>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0x400>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c19 	.word	0x08007c19
 8007bf4:	08007c21 	.word	0x08007c21
 8007bf8:	08007c37 	.word	0x08007c37
 8007bfc:	08007c27 	.word	0x08007c27
 8007c00:	08007c37 	.word	0x08007c37
 8007c04:	08007c37 	.word	0x08007c37
 8007c08:	08007c37 	.word	0x08007c37
 8007c0c:	08007c2f 	.word	0x08007c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c10:	f7fe ffcc 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8007c14:	61f8      	str	r0, [r7, #28]
        break;
 8007c16:	e014      	b.n	8007c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7fe ffde 	bl	8006bd8 <HAL_RCC_GetPCLK2Freq>
 8007c1c:	61f8      	str	r0, [r7, #28]
        break;
 8007c1e:	e010      	b.n	8007c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c20:	4b4d      	ldr	r3, [pc, #308]	; (8007d58 <UART_SetConfig+0x56c>)
 8007c22:	61fb      	str	r3, [r7, #28]
        break;
 8007c24:	e00d      	b.n	8007c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c26:	f7fe ff29 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8007c2a:	61f8      	str	r0, [r7, #28]
        break;
 8007c2c:	e009      	b.n	8007c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c32:	61fb      	str	r3, [r7, #28]
        break;
 8007c34:	e005      	b.n	8007c42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d077      	beq.n	8007d38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	005a      	lsls	r2, r3, #1
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	441a      	add	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b0f      	cmp	r3, #15
 8007c62:	d916      	bls.n	8007c92 <UART_SetConfig+0x4a6>
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6a:	d212      	bcs.n	8007c92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f023 030f 	bic.w	r3, r3, #15
 8007c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	8afb      	ldrh	r3, [r7, #22]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	8afa      	ldrh	r2, [r7, #22]
 8007c8e:	60da      	str	r2, [r3, #12]
 8007c90:	e052      	b.n	8007d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c98:	e04e      	b.n	8007d38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d827      	bhi.n	8007cf2 <UART_SetConfig+0x506>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x4bc>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe ff6e 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8007cd0:	61f8      	str	r0, [r7, #28]
        break;
 8007cd2:	e014      	b.n	8007cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fe ff80 	bl	8006bd8 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	61f8      	str	r0, [r7, #28]
        break;
 8007cda:	e010      	b.n	8007cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <UART_SetConfig+0x56c>)
 8007cde:	61fb      	str	r3, [r7, #28]
        break;
 8007ce0:	e00d      	b.n	8007cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fe fecb 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 8007ce6:	61f8      	str	r0, [r7, #28]
        break;
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	61fb      	str	r3, [r7, #28]
        break;
 8007cf0:	e005      	b.n	8007cfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d019      	beq.n	8007d38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	085a      	lsrs	r2, r3, #1
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d909      	bls.n	8007d32 <UART_SetConfig+0x546>
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d24:	d205      	bcs.n	8007d32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60da      	str	r2, [r3, #12]
 8007d30:	e002      	b.n	8007d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3728      	adds	r7, #40	; 0x28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d52:	bf00      	nop
 8007d54:	40008000 	.word	0x40008000
 8007d58:	00f42400 	.word	0x00f42400

08007d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5a:	d10a      	bne.n	8007e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b098      	sub	sp, #96	; 0x60
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb0:	f7fa ffa8 	bl	8002e04 <HAL_GetTick>
 8007eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d12e      	bne.n	8007f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f88c 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d021      	beq.n	8007f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efc:	647b      	str	r3, [r7, #68]	; 0x44
 8007efe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e062      	b.n	8007fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d149      	bne.n	8007fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f856 	bl	8007ff0 <UART_WaitOnFlagUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d03c      	beq.n	8007fc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	623b      	str	r3, [r7, #32]
   return(result);
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f68:	633b      	str	r3, [r7, #48]	; 0x30
 8007f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f9c:	61fa      	str	r2, [r7, #28]
 8007f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	69b9      	ldr	r1, [r7, #24]
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e011      	b.n	8007fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3758      	adds	r7, #88	; 0x58
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008000:	e049      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d045      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800a:	f7fa fefb 	bl	8002e04 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <UART_WaitOnFlagUntilTimeout+0x30>
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e048      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d031      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d110      	bne.n	8008062 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2208      	movs	r2, #8
 8008046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f838 	bl	80080be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2208      	movs	r2, #8
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e029      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008070:	d111      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800807a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f81e 	bl	80080be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00f      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4013      	ands	r3, r2
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	bf0c      	ite	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	2300      	movne	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d0a6      	beq.n	8008002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080be:	b480      	push	{r7}
 80080c0:	b095      	sub	sp, #84	; 0x54
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	643b      	str	r3, [r7, #64]	; 0x40
 80080e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3308      	adds	r3, #8
 80080fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	61fb      	str	r3, [r7, #28]
   return(result);
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800811e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e5      	bne.n	80080f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008130:	2b01      	cmp	r3, #1
 8008132:	d118      	bne.n	8008166 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	60bb      	str	r3, [r7, #8]
   return(result);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	647b      	str	r3, [r7, #68]	; 0x44
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008152:	61bb      	str	r3, [r7, #24]
 8008154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6979      	ldr	r1, [r7, #20]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	613b      	str	r3, [r7, #16]
   return(result);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	669a      	str	r2, [r3, #104]	; 0x68
}
 800817a:	bf00      	nop
 800817c:	3754      	adds	r7, #84	; 0x54
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008186:	b084      	sub	sp, #16
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	f107 001c 	add.w	r0, r7, #28
 8008194:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f9c1 	bl	800852c <USB_CoreReset>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80081ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
 80081c0:	e005      	b.n	80081ce <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081da:	b004      	add	sp, #16
 80081dc:	4770      	bx	lr

080081de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f043 0201 	orr.w	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f023 0201 	bic.w	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d115      	bne.n	8008270 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008250:	2001      	movs	r0, #1
 8008252:	f7fa fde3 	bl	8002e1c <HAL_Delay>
      ms++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f957 	bl	8008510 <USB_GetMode>
 8008262:	4603      	mov	r3, r0
 8008264:	2b01      	cmp	r3, #1
 8008266:	d01e      	beq.n	80082a6 <USB_SetCurrentMode+0x84>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b31      	cmp	r3, #49	; 0x31
 800826c:	d9f0      	bls.n	8008250 <USB_SetCurrentMode+0x2e>
 800826e:	e01a      	b.n	80082a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d115      	bne.n	80082a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008282:	2001      	movs	r0, #1
 8008284:	f7fa fdca 	bl	8002e1c <HAL_Delay>
      ms++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3301      	adds	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f93e 	bl	8008510 <USB_GetMode>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <USB_SetCurrentMode+0x84>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b31      	cmp	r3, #49	; 0x31
 800829e:	d9f0      	bls.n	8008282 <USB_SetCurrentMode+0x60>
 80082a0:	e001      	b.n	80082a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e005      	b.n	80082b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b32      	cmp	r3, #50	; 0x32
 80082aa:	d101      	bne.n	80082b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4a13      	ldr	r2, [pc, #76]	; (8008320 <USB_FlushTxFifo+0x64>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d901      	bls.n	80082dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e01b      	b.n	8008314 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	daf2      	bge.n	80082ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	019b      	lsls	r3, r3, #6
 80082ec:	f043 0220 	orr.w	r2, r3, #32
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4a08      	ldr	r2, [pc, #32]	; (8008320 <USB_FlushTxFifo+0x64>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e006      	b.n	8008314 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b20      	cmp	r3, #32
 8008310:	d0f0      	beq.n	80082f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	00030d40 	.word	0x00030d40

08008324 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a11      	ldr	r2, [pc, #68]	; (8008380 <USB_FlushRxFifo+0x5c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d901      	bls.n	8008342 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e018      	b.n	8008374 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	daf2      	bge.n	8008330 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2210      	movs	r2, #16
 8008352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <USB_FlushRxFifo+0x5c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e006      	b.n	8008374 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 0310 	and.w	r3, r3, #16
 800836e:	2b10      	cmp	r3, #16
 8008370:	d0f0      	beq.n	8008354 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	00030d40 	.word	0x00030d40

08008384 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008384:	b480      	push	{r7}
 8008386:	b089      	sub	sp, #36	; 0x24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	460b      	mov	r3, r1
 8008394:	71fb      	strb	r3, [r7, #7]
 8008396:	4613      	mov	r3, r2
 8008398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80083a2:	88bb      	ldrh	r3, [r7, #4]
 80083a4:	3303      	adds	r3, #3
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80083aa:	2300      	movs	r3, #0
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	e018      	b.n	80083e2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	031a      	lsls	r2, r3, #12
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083bc:	461a      	mov	r2, r3
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	3301      	adds	r3, #1
 80083c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3301      	adds	r3, #1
 80083ce:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	3301      	adds	r3, #1
 80083d4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	3301      	adds	r3, #1
 80083da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	3301      	adds	r3, #1
 80083e0:	61bb      	str	r3, [r7, #24]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3e2      	bcc.n	80083b0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3724      	adds	r7, #36	; 0x24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b08b      	sub	sp, #44	; 0x2c
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	089b      	lsrs	r3, r3, #2
 8008412:	b29b      	uxth	r3, r3
 8008414:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800841e:	2300      	movs	r3, #0
 8008420:	623b      	str	r3, [r7, #32]
 8008422:	e014      	b.n	800844e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	3301      	adds	r3, #1
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	3301      	adds	r3, #1
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	3301      	adds	r3, #1
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	3301      	adds	r3, #1
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	3301      	adds	r3, #1
 800844c:	623b      	str	r3, [r7, #32]
 800844e:	6a3a      	ldr	r2, [r7, #32]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3e6      	bcc.n	8008424 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008456:	8bfb      	ldrh	r3, [r7, #30]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01e      	beq.n	800849a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008466:	461a      	mov	r2, r3
 8008468:	f107 0310 	add.w	r3, r7, #16
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
 800847c:	b2da      	uxtb	r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	701a      	strb	r2, [r3, #0]
      i++;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	3301      	adds	r3, #1
 8008486:	623b      	str	r3, [r7, #32]
      pDest++;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	3301      	adds	r3, #1
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800848e:	8bfb      	ldrh	r3, [r7, #30]
 8008490:	3b01      	subs	r3, #1
 8008492:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008494:	8bfb      	ldrh	r3, [r7, #30]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1ea      	bne.n	8008470 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800849c:	4618      	mov	r0, r3
 800849e:	372c      	adds	r7, #44	; 0x2c
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4013      	ands	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	4013      	ands	r3, r2
 8008500:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008502:	68bb      	ldr	r3, [r7, #8]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f003 0301 	and.w	r3, r3, #1
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a13      	ldr	r2, [pc, #76]	; (8008590 <USB_CoreReset+0x64>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e01b      	b.n	8008582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	daf2      	bge.n	8008538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f043 0201 	orr.w	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a09      	ldr	r2, [pc, #36]	; (8008590 <USB_CoreReset+0x64>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e006      	b.n	8008582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b01      	cmp	r3, #1
 800857e:	d0f0      	beq.n	8008562 <USB_CoreReset+0x36>

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	00030d40 	.word	0x00030d40

08008594 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008594:	b084      	sub	sp, #16
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085b4:	461a      	mov	r2, r3
 80085b6:	2300      	movs	r3, #0
 80085b8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085e0:	f023 0304 	bic.w	r3, r3, #4
 80085e4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085e6:	2110      	movs	r1, #16
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff fe67 	bl	80082bc <USB_FlushTxFifo>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fe93 	bl	8008324 <USB_FlushRxFifo>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	e015      	b.n	800863a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	461a      	mov	r2, r3
 800861c:	f04f 33ff 	mov.w	r3, #4294967295
 8008620:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862e:	461a      	mov	r2, r3
 8008630:	2300      	movs	r3, #0
 8008632:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	3301      	adds	r3, #1
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	429a      	cmp	r2, r3
 8008640:	d3e5      	bcc.n	800860e <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f04f 32ff 	mov.w	r2, #4294967295
 800864e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2280      	movs	r2, #128	; 0x80
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a0c      	ldr	r2, [pc, #48]	; (800868c <USB_HostInit+0xf8>)
 800865a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a0c      	ldr	r2, [pc, #48]	; (8008690 <USB_HostInit+0xfc>)
 8008660:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f043 0210 	orr.w	r2, r3, #16
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <USB_HostInit+0x100>)
 8008676:	4313      	orrs	r3, r2
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008688:	b004      	add	sp, #16
 800868a:	4770      	bx	lr
 800868c:	00600080 	.word	0x00600080
 8008690:	004000e0 	.word	0x004000e0
 8008694:	a3200008 	.word	0xa3200008

08008698 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086d0:	4313      	orrs	r3, r2
 80086d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d107      	bne.n	80086ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086e0:	461a      	mov	r2, r3
 80086e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80086e6:	6053      	str	r3, [r2, #4]
 80086e8:	e00c      	b.n	8008704 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d107      	bne.n	8008700 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f6:	461a      	mov	r2, r3
 80086f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80086fc:	6053      	str	r3, [r2, #4]
 80086fe:	e001      	b.n	8008704 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008732:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800873c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008740:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008742:	2064      	movs	r0, #100	; 0x64
 8008744:	f7fa fb6a 	bl	8002e1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008754:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008756:	200a      	movs	r0, #10
 8008758:	f7fa fb60 	bl	8002e1c <HAL_Delay>

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800878a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <USB_DriveVbus+0x44>
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d106      	bne.n	80087aa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80087a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087a8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b4:	d109      	bne.n	80087ca <USB_DriveVbus+0x64>
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80087c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	0c5b      	lsrs	r3, r3, #17
 80087f6:	f003 0303 	and.w	r3, r3, #3
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	b29b      	uxth	r3, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	461a      	mov	r2, r3
 8008836:	4603      	mov	r3, r0
 8008838:	70fb      	strb	r3, [r7, #3]
 800883a:	460b      	mov	r3, r1
 800883c:	70bb      	strb	r3, [r7, #2]
 800883e:	4613      	mov	r3, r2
 8008840:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4413      	add	r3, r2
 8008852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008856:	461a      	mov	r2, r3
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800885e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008862:	2b03      	cmp	r3, #3
 8008864:	d867      	bhi.n	8008936 <USB_HC_Init+0x10e>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <USB_HC_Init+0x44>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	0800887d 	.word	0x0800887d
 8008870:	080088f9 	.word	0x080088f9
 8008874:	0800887d 	.word	0x0800887d
 8008878:	080088bb 	.word	0x080088bb
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	4413      	add	r3, r2
 8008884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008888:	461a      	mov	r2, r3
 800888a:	f240 439d 	movw	r3, #1181	; 0x49d
 800888e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da51      	bge.n	800893c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80088b8:	e040      	b.n	800893c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	461a      	mov	r2, r3
 80088c8:	f240 639d 	movw	r3, #1693	; 0x69d
 80088cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	da34      	bge.n	8008940 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80088f6:	e023      	b.n	8008940 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008904:	461a      	mov	r2, r3
 8008906:	f240 2325 	movw	r3, #549	; 0x225
 800890a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800890c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008910:	2b00      	cmp	r3, #0
 8008912:	da17      	bge.n	8008944 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	440a      	add	r2, r1
 800892a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800892e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008932:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008934:	e006      	b.n	8008944 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	77fb      	strb	r3, [r7, #31]
      break;
 800893a:	e004      	b.n	8008946 <USB_HC_Init+0x11e>
      break;
 800893c:	bf00      	nop
 800893e:	e002      	b.n	8008946 <USB_HC_Init+0x11e>
      break;
 8008940:	bf00      	nop
 8008942:	e000      	b.n	8008946 <USB_HC_Init+0x11e>
      break;
 8008944:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	0151      	lsls	r1, r2, #5
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	440a      	add	r2, r1
 800895c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008960:	f043 0302 	orr.w	r3, r3, #2
 8008964:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	2101      	movs	r1, #1
 8008976:	fa01 f303 	lsl.w	r3, r1, r3
 800897a:	6939      	ldr	r1, [r7, #16]
 800897c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008980:	4313      	orrs	r3, r2
 8008982:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008990:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da03      	bge.n	80089a0 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800899c:	61bb      	str	r3, [r7, #24]
 800899e:	e001      	b.n	80089a4 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff ff17 	bl	80087d8 <USB_GetHostSpeed>
 80089aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80089ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d106      	bne.n	80089c2 <USB_HC_Init+0x19a>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d003      	beq.n	80089c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80089ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	e001      	b.n	80089c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089c6:	787b      	ldrb	r3, [r7, #1]
 80089c8:	059b      	lsls	r3, r3, #22
 80089ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089ce:	78bb      	ldrb	r3, [r7, #2]
 80089d0:	02db      	lsls	r3, r3, #11
 80089d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089dc:	049b      	lsls	r3, r3, #18
 80089de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80089e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80089e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a04:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d003      	beq.n	8008a16 <USB_HC_Init+0x1ee>
 8008a0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d10f      	bne.n	8008a36 <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3720      	adds	r7, #32
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a58:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d018      	beq.n	8008a94 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	8952      	ldrh	r2, [r2, #10]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	8952      	ldrh	r2, [r2, #10]
 8008a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a76:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8008a78:	8bfa      	ldrh	r2, [r7, #30]
 8008a7a:	8a7b      	ldrh	r3, [r7, #18]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d90b      	bls.n	8008a98 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8008a80:	8a7b      	ldrh	r3, [r7, #18]
 8008a82:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a84:	8bfb      	ldrh	r3, [r7, #30]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	8952      	ldrh	r2, [r2, #10]
 8008a8a:	fb03 f202 	mul.w	r2, r3, r2
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	615a      	str	r2, [r3, #20]
 8008a92:	e001      	b.n	8008a98 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8008a94:	2301      	movs	r3, #1
 8008a96:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	78db      	ldrb	r3, [r3, #3]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aa0:	8bfb      	ldrh	r3, [r7, #30]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	8952      	ldrh	r2, [r2, #10]
 8008aa6:	fb03 f202 	mul.w	r2, r3, r2
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	615a      	str	r2, [r3, #20]
 8008aae:	e003      	b.n	8008ab8 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ac0:	8bfb      	ldrh	r3, [r7, #30]
 8008ac2:	04d9      	lsls	r1, r3, #19
 8008ac4:	4b59      	ldr	r3, [pc, #356]	; (8008c2c <USB_HC_StartXfer+0x1ec>)
 8008ac6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ac8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	7b1b      	ldrb	r3, [r3, #12]
 8008ace:	075b      	lsls	r3, r3, #29
 8008ad0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ad4:	6979      	ldr	r1, [r7, #20]
 8008ad6:	0148      	lsls	r0, r1, #5
 8008ad8:	69b9      	ldr	r1, [r7, #24]
 8008ada:	4401      	add	r1, r0
 8008adc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ae0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae2:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf0c      	ite	eq
 8008af4:	2301      	moveq	r3, #1
 8008af6:	2300      	movne	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b1a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	7c7b      	ldrb	r3, [r7, #17]
 8008b2c:	075b      	lsls	r3, r3, #29
 8008b2e:	6979      	ldr	r1, [r7, #20]
 8008b30:	0148      	lsls	r0, r1, #5
 8008b32:	69b9      	ldr	r1, [r7, #24]
 8008b34:	4401      	add	r1, r0
 8008b36:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b54:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	60bb      	str	r3, [r7, #8]
 8008b66:	e003      	b.n	8008b70 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b6e:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b76:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b84:	461a      	mov	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d147      	bne.n	8008c22 <USB_HC_StartXfer+0x1e2>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d043      	beq.n	8008c22 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	7a1b      	ldrb	r3, [r3, #8]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d830      	bhi.n	8008c04 <USB_HC_StartXfer+0x1c4>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USB_HC_StartXfer+0x168>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bdd 	.word	0x08008bdd
 8008bb0:	08008bb9 	.word	0x08008bb9
 8008bb4:	08008bdd 	.word	0x08008bdd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	3303      	adds	r3, #3
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008bc2:	89fa      	ldrh	r2, [r7, #14]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d91c      	bls.n	8008c08 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f043 0220 	orr.w	r2, r3, #32
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bda:	e015      	b.n	8008c08 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	3303      	adds	r3, #3
 8008be2:	089b      	lsrs	r3, r3, #2
 8008be4:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008be6:	89fa      	ldrh	r2, [r7, #14]
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d90a      	bls.n	8008c0c <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c02:	e003      	b.n	8008c0c <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8008c04:	bf00      	nop
 8008c06:	e002      	b.n	8008c0e <USB_HC_StartXfer+0x1ce>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e000      	b.n	8008c0e <USB_HC_StartXfer+0x1ce>
        break;
 8008c0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6919      	ldr	r1, [r3, #16]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785a      	ldrb	r2, [r3, #1]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff fbb1 	bl	8008384 <USB_WritePacket>
  }

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	1ff80000 	.word	0x1ff80000

08008c30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	b29b      	uxth	r3, r3
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b089      	sub	sp, #36	; 0x24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	0c9b      	lsrs	r3, r3, #18
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	0fdb      	lsrs	r3, r3, #31
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	0fdb      	lsrs	r3, r3, #31
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	d10d      	bne.n	8008cd4 <USB_HC_Halt+0x82>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <USB_HC_Halt+0x82>
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d002      	beq.n	8008cd0 <USB_HC_Halt+0x7e>
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d101      	bne.n	8008cd4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e0d8      	b.n	8008e86 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <USB_HC_Halt+0x8e>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d173      	bne.n	8008dc8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cfe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d14a      	bne.n	8008da2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d133      	bne.n	8008d80 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d56:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d64:	d82e      	bhi.n	8008dc4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d7c:	d0ec      	beq.n	8008d58 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d7e:	e081      	b.n	8008e84 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008da0:	e070      	b.n	8008e84 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	69fa      	ldr	r2, [r7, #28]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dc0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dc2:	e05f      	b.n	8008e84 <USB_HC_Halt+0x232>
            break;
 8008dc4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dc6:	e05d      	b.n	8008e84 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008de6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d133      	bne.n	8008e60 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e36:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e44:	d81d      	bhi.n	8008e82 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e5c:	d0ec      	beq.n	8008e38 <USB_HC_Halt+0x1e6>
 8008e5e:	e011      	b.n	8008e84 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	e000      	b.n	8008e84 <USB_HC_Halt+0x232>
          break;
 8008e82:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3724      	adds	r7, #36	; 0x24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff f9aa 	bl	8008200 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eac:	2110      	movs	r1, #16
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fa04 	bl	80082bc <USB_FlushTxFifo>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fa30 	bl	8008324 <USB_FlushRxFifo>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	e01f      	b.n	8008f14 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eea:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ef2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008efa:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f08:	461a      	mov	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d9dc      	bls.n	8008ed4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	e034      	b.n	8008f8a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f36:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f3e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f46:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f54:	461a      	mov	r2, r3
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f66:	d80c      	bhi.n	8008f82 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f7e:	d0ec      	beq.n	8008f5a <USB_StopHost+0xc8>
 8008f80:	e000      	b.n	8008f84 <USB_StopHost+0xf2>
        break;
 8008f82:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	3301      	adds	r3, #1
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b0f      	cmp	r3, #15
 8008f8e:	d9c7      	bls.n	8008f20 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f96:	461a      	mov	r2, r3
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff f919 	bl	80081de <USB_EnableGlobalInt>

  return ret;
 8008fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3720      	adds	r7, #32
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008fbc:	4904      	ldr	r1, [pc, #16]	; (8008fd0 <MX_FATFS_Init+0x18>)
 8008fbe:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <MX_FATFS_Init+0x1c>)
 8008fc0:	f005 fd6c 	bl	800ea9c <FATFS_LinkDriver>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4b03      	ldr	r3, [pc, #12]	; (8008fd8 <MX_FATFS_Init+0x20>)
 8008fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fcc:	bf00      	nop
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20005490 	.word	0x20005490
 8008fd4:	08016aa8 	.word	0x08016aa8
 8008fd8:	2000548c 	.word	0x2000548c

08008fdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fe0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	4619      	mov	r1, r3
 8009016:	4808      	ldr	r0, [pc, #32]	; (8009038 <USBH_status+0x34>)
 8009018:	f000 fe32 	bl	8009c80 <USBH_MSC_UnitIsReady>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <USBH_status+0x24>
  {
    res = RES_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
 8009026:	e001      	b.n	800902c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200054c8 	.word	0x200054c8

0800903c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b094      	sub	sp, #80	; 0x50
 8009040:	af02      	add	r7, sp, #8
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009052:	7bf9      	ldrb	r1, [r7, #15]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4813      	ldr	r0, [pc, #76]	; (80090ac <USBH_read+0x70>)
 800905e:	f000 fe59 	bl	8009d14 <USBH_MSC_Read>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <USBH_read+0x34>
  {
    res = RES_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800906e:	e017      	b.n	80090a0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009070:	f107 0210 	add.w	r2, r7, #16
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	4619      	mov	r1, r3
 8009078:	480c      	ldr	r0, [pc, #48]	; (80090ac <USBH_read+0x70>)
 800907a:	f000 fe27 	bl	8009ccc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800907e:	7f7b      	ldrb	r3, [r7, #29]
 8009080:	2b3a      	cmp	r3, #58	; 0x3a
 8009082:	d005      	beq.n	8009090 <USBH_read+0x54>
 8009084:	2b3a      	cmp	r3, #58	; 0x3a
 8009086:	dc07      	bgt.n	8009098 <USBH_read+0x5c>
 8009088:	2b04      	cmp	r3, #4
 800908a:	d001      	beq.n	8009090 <USBH_read+0x54>
 800908c:	2b28      	cmp	r3, #40	; 0x28
 800908e:	d103      	bne.n	8009098 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009090:	2303      	movs	r3, #3
 8009092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009096:	e003      	b.n	80090a0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800909e:	bf00      	nop
    }
  }

  return res;
 80090a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3748      	adds	r7, #72	; 0x48
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200054c8 	.word	0x200054c8

080090b0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b094      	sub	sp, #80	; 0x50
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80090c6:	7bf9      	ldrb	r1, [r7, #15]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4817      	ldr	r0, [pc, #92]	; (8009130 <USBH_write+0x80>)
 80090d2:	f000 fe88 	bl	8009de6 <USBH_MSC_Write>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d103      	bne.n	80090e4 <USBH_write+0x34>
  {
    res = RES_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090e2:	e01f      	b.n	8009124 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80090e4:	f107 0210 	add.w	r2, r7, #16
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	4810      	ldr	r0, [pc, #64]	; (8009130 <USBH_write+0x80>)
 80090ee:	f000 fded 	bl	8009ccc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80090f2:	7f7b      	ldrb	r3, [r7, #29]
 80090f4:	2b3a      	cmp	r3, #58	; 0x3a
 80090f6:	d00d      	beq.n	8009114 <USBH_write+0x64>
 80090f8:	2b3a      	cmp	r3, #58	; 0x3a
 80090fa:	dc0f      	bgt.n	800911c <USBH_write+0x6c>
 80090fc:	2b28      	cmp	r3, #40	; 0x28
 80090fe:	d009      	beq.n	8009114 <USBH_write+0x64>
 8009100:	2b28      	cmp	r3, #40	; 0x28
 8009102:	dc0b      	bgt.n	800911c <USBH_write+0x6c>
 8009104:	2b04      	cmp	r3, #4
 8009106:	d005      	beq.n	8009114 <USBH_write+0x64>
 8009108:	2b27      	cmp	r3, #39	; 0x27
 800910a:	d107      	bne.n	800911c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800910c:	2302      	movs	r3, #2
 800910e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009112:	e007      	b.n	8009124 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009114:	2303      	movs	r3, #3
 8009116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800911a:	e003      	b.n	8009124 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009122:	bf00      	nop
    }
  }

  return res;
 8009124:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009128:	4618      	mov	r0, r3
 800912a:	3748      	adds	r7, #72	; 0x48
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200054c8 	.word	0x200054c8

08009134 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b090      	sub	sp, #64	; 0x40
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	603a      	str	r2, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	460b      	mov	r3, r1
 8009142:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800914a:	79bb      	ldrb	r3, [r7, #6]
 800914c:	2b03      	cmp	r3, #3
 800914e:	d852      	bhi.n	80091f6 <USBH_ioctl+0xc2>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USBH_ioctl+0x24>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009169 	.word	0x08009169
 800915c:	08009171 	.word	0x08009171
 8009160:	0800919b 	.word	0x0800919b
 8009164:	080091c7 	.word	0x080091c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800916e:	e045      	b.n	80091fc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009170:	f107 0208 	add.w	r2, r7, #8
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	4619      	mov	r1, r3
 8009178:	4823      	ldr	r0, [pc, #140]	; (8009208 <USBH_ioctl+0xd4>)
 800917a:	f000 fda7 	bl	8009ccc <USBH_MSC_GetLUNInfo>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009190:	e034      	b.n	80091fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009198:	e030      	b.n	80091fc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	4619      	mov	r1, r3
 80091a2:	4819      	ldr	r0, [pc, #100]	; (8009208 <USBH_ioctl+0xd4>)
 80091a4:	f000 fd92 	bl	8009ccc <USBH_MSC_GetLUNInfo>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80091ae:	8a3b      	ldrh	r3, [r7, #16]
 80091b0:	461a      	mov	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091bc:	e01e      	b.n	80091fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091c4:	e01a      	b.n	80091fc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80091c6:	f107 0208 	add.w	r2, r7, #8
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	4619      	mov	r1, r3
 80091ce:	480e      	ldr	r0, [pc, #56]	; (8009208 <USBH_ioctl+0xd4>)
 80091d0:	f000 fd7c 	bl	8009ccc <USBH_MSC_GetLUNInfo>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80091da:	8a3b      	ldrh	r3, [r7, #16]
 80091dc:	0a5b      	lsrs	r3, r3, #9
 80091de:	b29b      	uxth	r3, r3
 80091e0:	461a      	mov	r2, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80091ec:	e006      	b.n	80091fc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80091f4:	e002      	b.n	80091fc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80091f6:	2304      	movs	r3, #4
 80091f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80091fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009200:	4618      	mov	r0, r3
 8009202:	3740      	adds	r7, #64	; 0x40
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200054c8 	.word	0x200054c8

0800920c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800920c:	b590      	push	{r4, r7, lr}
 800920e:	b089      	sub	sp, #36	; 0x24
 8009210:	af04      	add	r7, sp, #16
 8009212:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800921a:	7919      	ldrb	r1, [r3, #4]
 800921c:	2350      	movs	r3, #80	; 0x50
 800921e:	2206      	movs	r2, #6
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f001 fc89 	bl	800ab38 <USBH_FindInterface>
 8009226:	4603      	mov	r3, r0
 8009228:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	2bff      	cmp	r3, #255	; 0xff
 800922e:	d002      	beq.n	8009236 <USBH_MSC_InterfaceInit+0x2a>
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d901      	bls.n	800923a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009236:	2302      	movs	r3, #2
 8009238:	e106      	b.n	8009448 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fc5e 	bl	800ab00 <USBH_SelectInterface>
 8009244:	4603      	mov	r3, r0
 8009246:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800924e:	2302      	movs	r3, #2
 8009250:	e0fa      	b.n	8009448 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 427c 	ldr.w	r4, [r3, #636]	; 0x27c
 8009258:	f44f 7080 	mov.w	r0, #256	; 0x100
 800925c:	f008 fd34 	bl	8011cc8 <malloc>
 8009260:	4603      	mov	r3, r0
 8009262:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	e0e7      	b.n	8009448 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800927c:	2100      	movs	r1, #0
 800927e:	68b8      	ldr	r0, [r7, #8]
 8009280:	f009 fee0 	bl	8013044 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	211a      	movs	r1, #26
 800928a:	fb01 f303 	mul.w	r3, r1, r3
 800928e:	4413      	add	r3, r2
 8009290:	f203 234e 	addw	r3, r3, #590	; 0x24e
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b25b      	sxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	da16      	bge.n	80092ca <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	211a      	movs	r1, #26
 80092a2:	fb01 f303 	mul.w	r3, r1, r3
 80092a6:	4413      	add	r3, r2
 80092a8:	f203 234e 	addw	r3, r3, #590	; 0x24e
 80092ac:	781a      	ldrb	r2, [r3, #0]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	211a      	movs	r1, #26
 80092b8:	fb01 f303 	mul.w	r3, r1, r3
 80092bc:	4413      	add	r3, r2
 80092be:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80092c2:	881a      	ldrh	r2, [r3, #0]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	815a      	strh	r2, [r3, #10]
 80092c8:	e015      	b.n	80092f6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	211a      	movs	r1, #26
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	f203 234e 	addw	r3, r3, #590	; 0x24e
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	211a      	movs	r1, #26
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	211a      	movs	r1, #26
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
 8009302:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b25b      	sxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	da16      	bge.n	800933c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	211a      	movs	r1, #26
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	4413      	add	r3, r2
 800931a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	211a      	movs	r1, #26
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009334:	881a      	ldrh	r2, [r3, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	815a      	strh	r2, [r3, #10]
 800933a:	e015      	b.n	8009368 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	211a      	movs	r1, #26
 8009342:	fb01 f303 	mul.w	r3, r1, r3
 8009346:	4413      	add	r3, r2
 8009348:	f203 2356 	addw	r3, r3, #598	; 0x256
 800934c:	781a      	ldrb	r2, [r3, #0]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	211a      	movs	r1, #26
 8009358:	fb01 f303 	mul.w	r3, r1, r3
 800935c:	4413      	add	r3, r2
 800935e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009362:	881a      	ldrh	r2, [r3, #0]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2200      	movs	r2, #0
 800936c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2200      	movs	r2, #0
 8009372:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	799b      	ldrb	r3, [r3, #6]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 ff76 	bl	800c272 <USBH_AllocPipe>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	79db      	ldrb	r3, [r3, #7]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 ff6c 	bl	800c272 <USBH_AllocPipe>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fdc4 	bl	8009f30 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	799b      	ldrb	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01e      	beq.n	80093ee <USBH_MSC_InterfaceInit+0x1e2>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	891b      	ldrh	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01a      	beq.n	80093ee <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	7959      	ldrb	r1, [r3, #5]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	7998      	ldrb	r0, [r3, #6]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 421c 	ldrb.w	r4, [r3, #540]	; 0x21c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	8912      	ldrh	r2, [r2, #8]
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	2202      	movs	r2, #2
 80093d4:	9201      	str	r2, [sp, #4]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	4623      	mov	r3, r4
 80093da:	4602      	mov	r2, r0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f002 ff19 	bl	800c214 <USBH_OpenPipe>
 80093e2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	79db      	ldrb	r3, [r3, #7]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d02c      	beq.n	8009446 <USBH_MSC_InterfaceInit+0x23a>
 80093ec:	e001      	b.n	80093f2 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e02a      	b.n	8009448 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	895b      	ldrh	r3, [r3, #10]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d025      	beq.n	8009446 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	7919      	ldrb	r1, [r3, #4]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	79d8      	ldrb	r0, [r3, #7]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 421c 	ldrb.w	r4, [r3, #540]	; 0x21c
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	8952      	ldrh	r2, [r2, #10]
 8009412:	9202      	str	r2, [sp, #8]
 8009414:	2202      	movs	r2, #2
 8009416:	9201      	str	r2, [sp, #4]
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	4623      	mov	r3, r4
 800941c:	4602      	mov	r2, r0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f002 fef8 	bl	800c214 <USBH_OpenPipe>
 8009424:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f005 fdf8 	bl	800f024 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	795b      	ldrb	r3, [r3, #5]
 8009438:	2200      	movs	r2, #0
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f005 fdf1 	bl	800f024 <USBH_LL_SetToggle>

  return USBH_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e000      	b.n	8009448 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009446:	2303      	movs	r3, #3
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}

08009450 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	795b      	ldrb	r3, [r3, #5]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	795b      	ldrb	r3, [r3, #5]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f002 feee 	bl	800c252 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 ff19 	bl	800c2b4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fedb 	bl	800c252 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	791b      	ldrb	r3, [r3, #4]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f002 ff06 	bl	800c2b4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f008 fc08 	bl	8011cd8 <free>
    phost->pActiveClass->pData = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80094ce:	2200      	movs	r2, #0
 80094d0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094ee:	2301      	movs	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	7b9b      	ldrb	r3, [r3, #14]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d041      	beq.n	800957e <USBH_MSC_ClassRequest+0xa2>
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	dc4b      	bgt.n	8009596 <USBH_MSC_ClassRequest+0xba>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <USBH_MSC_ClassRequest+0x2a>
 8009502:	2b02      	cmp	r3, #2
 8009504:	d147      	bne.n	8009596 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fcf1 	bl	8009ef2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b03      	cmp	r3, #3
 8009518:	d104      	bne.n	8009524 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d137      	bne.n	800959a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d804      	bhi.n	800953c <USBH_MSC_ClassRequest+0x60>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	3301      	adds	r3, #1
 8009538:	b2da      	uxtb	r2, r3
 800953a:	e000      	b.n	800953e <USBH_MSC_ClassRequest+0x62>
 800953c:	2202      	movs	r2, #2
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	73bb      	strb	r3, [r7, #14]
 8009546:	e014      	b.n	8009572 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	2134      	movs	r1, #52	; 0x34
 800954e:	fb01 f303 	mul.w	r3, r1, r3
 8009552:	4413      	add	r3, r2
 8009554:	3392      	adds	r3, #146	; 0x92
 8009556:	2202      	movs	r2, #2
 8009558:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	2134      	movs	r1, #52	; 0x34
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	4413      	add	r3, r2
 8009566:	33c1      	adds	r3, #193	; 0xc1
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	3301      	adds	r3, #1
 8009570:	73bb      	strb	r3, [r7, #14]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	7bba      	ldrb	r2, [r7, #14]
 8009578:	429a      	cmp	r2, r3
 800957a:	d3e5      	bcc.n	8009548 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800957c:	e00d      	b.n	800959a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f002 f8b9 	bl	800b6f8 <USBH_ClrFeature>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d108      	bne.n	800959e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	7bda      	ldrb	r2, [r3, #15]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009594:	e003      	b.n	800959e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009596:	bf00      	nop
 8009598:	e002      	b.n	80095a0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800959a:	bf00      	nop
 800959c:	e000      	b.n	80095a0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800959e:	bf00      	nop
  }

  return status;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80095c2:	2301      	movs	r3, #1
 80095c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80095c6:	2301      	movs	r3, #1
 80095c8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	7b1b      	ldrb	r3, [r3, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <USBH_MSC_Process+0x2e>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	f000 8271 	beq.w	8009aba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80095d8:	e272      	b.n	8009ac0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	429a      	cmp	r2, r3
 80095e8:	f080 824f 	bcs.w	8009a8a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f2:	4619      	mov	r1, r3
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	2334      	movs	r3, #52	; 0x34
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	4413      	add	r3, r2
 80095fe:	3391      	adds	r3, #145	; 0x91
 8009600:	2201      	movs	r2, #1
 8009602:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960a:	4619      	mov	r1, r3
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	2334      	movs	r3, #52	; 0x34
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	4413      	add	r3, r2
 8009616:	3390      	adds	r3, #144	; 0x90
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b08      	cmp	r3, #8
 800961c:	f200 8243 	bhi.w	8009aa6 <USBH_MSC_Process+0x4fa>
 8009620:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <USBH_MSC_Process+0x7c>)
 8009622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009626:	bf00      	nop
 8009628:	0800964d 	.word	0x0800964d
 800962c:	08009aa7 	.word	0x08009aa7
 8009630:	08009715 	.word	0x08009715
 8009634:	08009899 	.word	0x08009899
 8009638:	08009673 	.word	0x08009673
 800963c:	08009965 	.word	0x08009965
 8009640:	08009aa7 	.word	0x08009aa7
 8009644:	08009aa7 	.word	0x08009aa7
 8009648:	08009a79 	.word	0x08009a79
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009652:	4619      	mov	r1, r3
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	2334      	movs	r3, #52	; 0x34
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	4413      	add	r3, r2
 800965e:	3390      	adds	r3, #144	; 0x90
 8009660:	2204      	movs	r2, #4
 8009662:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009670:	e222      	b.n	8009ab8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009678:	b2d9      	uxtb	r1, r3
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009680:	461a      	mov	r2, r3
 8009682:	2334      	movs	r3, #52	; 0x34
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	3398      	adds	r3, #152	; 0x98
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4413      	add	r3, r2
 800968e:	3307      	adds	r3, #7
 8009690:	461a      	mov	r2, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 ff6a 	bl	800a56c <USBH_MSC_SCSI_Inquiry>
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800969c:	7bfb      	ldrb	r3, [r7, #15]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096a8:	4619      	mov	r1, r3
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	2334      	movs	r3, #52	; 0x34
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	3390      	adds	r3, #144	; 0x90
 80096b6:	2202      	movs	r2, #2
 80096b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d10c      	bne.n	80096da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096c6:	4619      	mov	r1, r3
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	2334      	movs	r3, #52	; 0x34
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	3390      	adds	r3, #144	; 0x90
 80096d4:	2205      	movs	r2, #5
 80096d6:	701a      	strb	r2, [r3, #0]
            break;
 80096d8:	e1e7      	b.n	8009aaa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b04      	cmp	r3, #4
 80096de:	f040 81e4 	bne.w	8009aaa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096e8:	4619      	mov	r1, r3
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	2334      	movs	r3, #52	; 0x34
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3390      	adds	r3, #144	; 0x90
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009700:	4619      	mov	r1, r3
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	2334      	movs	r3, #52	; 0x34
 8009706:	fb01 f303 	mul.w	r3, r1, r3
 800970a:	4413      	add	r3, r2
 800970c:	3391      	adds	r3, #145	; 0x91
 800970e:	2202      	movs	r2, #2
 8009710:	701a      	strb	r2, [r3, #0]
            break;
 8009712:	e1ca      	b.n	8009aaa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800971a:	b2db      	uxtb	r3, r3
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fe66 	bl	800a3f0 <USBH_MSC_SCSI_TestUnitReady>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d149      	bne.n	80097c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009734:	4619      	mov	r1, r3
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	2334      	movs	r3, #52	; 0x34
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	4413      	add	r3, r2
 8009740:	3392      	adds	r3, #146	; 0x92
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00c      	beq.n	8009762 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800974e:	4619      	mov	r1, r3
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	2334      	movs	r3, #52	; 0x34
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	4413      	add	r3, r2
 800975a:	33c1      	adds	r3, #193	; 0xc1
 800975c:	2201      	movs	r2, #1
 800975e:	701a      	strb	r2, [r3, #0]
 8009760:	e00b      	b.n	800977a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009768:	4619      	mov	r1, r3
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	2334      	movs	r3, #52	; 0x34
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	4413      	add	r3, r2
 8009774:	33c1      	adds	r3, #193	; 0xc1
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009780:	4619      	mov	r1, r3
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	2334      	movs	r3, #52	; 0x34
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	4413      	add	r3, r2
 800978c:	3390      	adds	r3, #144	; 0x90
 800978e:	2203      	movs	r2, #3
 8009790:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009798:	4619      	mov	r1, r3
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	2334      	movs	r3, #52	; 0x34
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	4413      	add	r3, r2
 80097a4:	3391      	adds	r3, #145	; 0x91
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097b0:	4619      	mov	r1, r3
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	2334      	movs	r3, #52	; 0x34
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	3392      	adds	r3, #146	; 0x92
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d14a      	bne.n	800985e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097ce:	4619      	mov	r1, r3
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	2334      	movs	r3, #52	; 0x34
 80097d4:	fb01 f303 	mul.w	r3, r1, r3
 80097d8:	4413      	add	r3, r2
 80097da:	3392      	adds	r3, #146	; 0x92
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d00c      	beq.n	80097fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097e8:	4619      	mov	r1, r3
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	2334      	movs	r3, #52	; 0x34
 80097ee:	fb01 f303 	mul.w	r3, r1, r3
 80097f2:	4413      	add	r3, r2
 80097f4:	33c1      	adds	r3, #193	; 0xc1
 80097f6:	2201      	movs	r2, #1
 80097f8:	701a      	strb	r2, [r3, #0]
 80097fa:	e00b      	b.n	8009814 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009802:	4619      	mov	r1, r3
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	2334      	movs	r3, #52	; 0x34
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	4413      	add	r3, r2
 800980e:	33c1      	adds	r3, #193	; 0xc1
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800981a:	4619      	mov	r1, r3
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	2334      	movs	r3, #52	; 0x34
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	4413      	add	r3, r2
 8009826:	3390      	adds	r3, #144	; 0x90
 8009828:	2205      	movs	r2, #5
 800982a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009832:	4619      	mov	r1, r3
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	2334      	movs	r3, #52	; 0x34
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	4413      	add	r3, r2
 800983e:	3391      	adds	r3, #145	; 0x91
 8009840:	2201      	movs	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800984a:	4619      	mov	r1, r3
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	2334      	movs	r3, #52	; 0x34
 8009850:	fb01 f303 	mul.w	r3, r1, r3
 8009854:	4413      	add	r3, r2
 8009856:	3392      	adds	r3, #146	; 0x92
 8009858:	2202      	movs	r2, #2
 800985a:	701a      	strb	r2, [r3, #0]
            break;
 800985c:	e127      	b.n	8009aae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b04      	cmp	r3, #4
 8009862:	f040 8124 	bne.w	8009aae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800986c:	4619      	mov	r1, r3
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	2334      	movs	r3, #52	; 0x34
 8009872:	fb01 f303 	mul.w	r3, r1, r3
 8009876:	4413      	add	r3, r2
 8009878:	3390      	adds	r3, #144	; 0x90
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009884:	4619      	mov	r1, r3
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	2334      	movs	r3, #52	; 0x34
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	4413      	add	r3, r2
 8009890:	3391      	adds	r3, #145	; 0x91
 8009892:	2202      	movs	r2, #2
 8009894:	701a      	strb	r2, [r3, #0]
            break;
 8009896:	e10a      	b.n	8009aae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800989e:	b2d9      	uxtb	r1, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098a6:	461a      	mov	r2, r3
 80098a8:	2334      	movs	r3, #52	; 0x34
 80098aa:	fb02 f303 	mul.w	r3, r2, r3
 80098ae:	3390      	adds	r3, #144	; 0x90
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4413      	add	r3, r2
 80098b4:	3304      	adds	r3, #4
 80098b6:	461a      	mov	r2, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fddc 	bl	800a476 <USBH_MSC_SCSI_ReadCapacity>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d120      	bne.n	800990a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098ce:	4619      	mov	r1, r3
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	2334      	movs	r3, #52	; 0x34
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	4413      	add	r3, r2
 80098da:	3390      	adds	r3, #144	; 0x90
 80098dc:	2201      	movs	r2, #1
 80098de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098e6:	4619      	mov	r1, r3
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	2334      	movs	r3, #52	; 0x34
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	3391      	adds	r3, #145	; 0x91
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098fe:	3301      	adds	r3, #1
 8009900:	b29a      	uxth	r2, r3
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009908:	e0d3      	b.n	8009ab2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b02      	cmp	r3, #2
 800990e:	d10c      	bne.n	800992a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009916:	4619      	mov	r1, r3
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	2334      	movs	r3, #52	; 0x34
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	4413      	add	r3, r2
 8009922:	3390      	adds	r3, #144	; 0x90
 8009924:	2205      	movs	r2, #5
 8009926:	701a      	strb	r2, [r3, #0]
            break;
 8009928:	e0c3      	b.n	8009ab2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b04      	cmp	r3, #4
 800992e:	f040 80c0 	bne.w	8009ab2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009938:	4619      	mov	r1, r3
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	2334      	movs	r3, #52	; 0x34
 800993e:	fb01 f303 	mul.w	r3, r1, r3
 8009942:	4413      	add	r3, r2
 8009944:	3390      	adds	r3, #144	; 0x90
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009950:	4619      	mov	r1, r3
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	2334      	movs	r3, #52	; 0x34
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	4413      	add	r3, r2
 800995c:	3391      	adds	r3, #145	; 0x91
 800995e:	2202      	movs	r2, #2
 8009960:	701a      	strb	r2, [r3, #0]
            break;
 8009962:	e0a6      	b.n	8009ab2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800996a:	b2d9      	uxtb	r1, r3
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009972:	461a      	mov	r2, r3
 8009974:	2334      	movs	r3, #52	; 0x34
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	3398      	adds	r3, #152	; 0x98
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4413      	add	r3, r2
 8009980:	3304      	adds	r3, #4
 8009982:	461a      	mov	r2, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fe96 	bl	800a6b6 <USBH_MSC_SCSI_RequestSense>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d145      	bne.n	8009a20 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800999a:	4619      	mov	r1, r3
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	2334      	movs	r3, #52	; 0x34
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	4413      	add	r3, r2
 80099a6:	339c      	adds	r3, #156	; 0x9c
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b06      	cmp	r3, #6
 80099ac:	d00c      	beq.n	80099c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099b4:	4619      	mov	r1, r3
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	2334      	movs	r3, #52	; 0x34
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	339c      	adds	r3, #156	; 0x9c
 80099c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d117      	bne.n	80099f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80099da:	4293      	cmp	r3, r2
 80099dc:	d80c      	bhi.n	80099f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099e4:	4619      	mov	r1, r3
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	2334      	movs	r3, #52	; 0x34
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	3390      	adds	r3, #144	; 0x90
 80099f2:	2202      	movs	r2, #2
 80099f4:	701a      	strb	r2, [r3, #0]
                  break;
 80099f6:	e05f      	b.n	8009ab8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80099fe:	4619      	mov	r1, r3
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	2334      	movs	r3, #52	; 0x34
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	3390      	adds	r3, #144	; 0x90
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a16:	3301      	adds	r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d10c      	bne.n	8009a40 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	2334      	movs	r3, #52	; 0x34
 8009a32:	fb01 f303 	mul.w	r3, r1, r3
 8009a36:	4413      	add	r3, r2
 8009a38:	3390      	adds	r3, #144	; 0x90
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	701a      	strb	r2, [r3, #0]
            break;
 8009a3e:	e03a      	b.n	8009ab6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d137      	bne.n	8009ab6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	2334      	movs	r3, #52	; 0x34
 8009a52:	fb01 f303 	mul.w	r3, r1, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	3390      	adds	r3, #144	; 0x90
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a64:	4619      	mov	r1, r3
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	2334      	movs	r3, #52	; 0x34
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	3391      	adds	r3, #145	; 0x91
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
            break;
 8009a76:	e01e      	b.n	8009ab6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a7e:	3301      	adds	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009a88:	e016      	b.n	8009ab8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2201      	movs	r2, #1
 8009a96:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a9e:	2102      	movs	r1, #2
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	4798      	blx	r3
      break;
 8009aa4:	e00c      	b.n	8009ac0 <USBH_MSC_Process+0x514>
            break;
 8009aa6:	bf00      	nop
 8009aa8:	e00a      	b.n	8009ac0 <USBH_MSC_Process+0x514>
            break;
 8009aaa:	bf00      	nop
 8009aac:	e008      	b.n	8009ac0 <USBH_MSC_Process+0x514>
            break;
 8009aae:	bf00      	nop
 8009ab0:	e006      	b.n	8009ac0 <USBH_MSC_Process+0x514>
            break;
 8009ab2:	bf00      	nop
 8009ab4:	e004      	b.n	8009ac0 <USBH_MSC_Process+0x514>
            break;
 8009ab6:	bf00      	nop
      break;
 8009ab8:	e002      	b.n	8009ac0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	bf00      	nop
  }
  return error;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop

08009acc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b088      	sub	sp, #32
 8009ae6:	af02      	add	r7, sp, #8
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009afc:	2301      	movs	r3, #1
 8009afe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	2134      	movs	r1, #52	; 0x34
 8009b06:	fb01 f303 	mul.w	r3, r1, r3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3390      	adds	r3, #144	; 0x90
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b07      	cmp	r3, #7
 8009b12:	d03c      	beq.n	8009b8e <USBH_MSC_RdWrProcess+0xac>
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	f300 80a7 	bgt.w	8009c68 <USBH_MSC_RdWrProcess+0x186>
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d06c      	beq.n	8009bf8 <USBH_MSC_RdWrProcess+0x116>
 8009b1e:	2b06      	cmp	r3, #6
 8009b20:	f040 80a2 	bne.w	8009c68 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009b24:	78f9      	ldrb	r1, [r7, #3]
 8009b26:	2300      	movs	r3, #0
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fea5 	bl	800a87e <USBH_MSC_SCSI_Read>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10b      	bne.n	8009b56 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	2134      	movs	r1, #52	; 0x34
 8009b44:	fb01 f303 	mul.w	r3, r1, r3
 8009b48:	4413      	add	r3, r2
 8009b4a:	3390      	adds	r3, #144	; 0x90
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b54:	e08a      	b.n	8009c6c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d109      	bne.n	8009b70 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	2134      	movs	r1, #52	; 0x34
 8009b62:	fb01 f303 	mul.w	r3, r1, r3
 8009b66:	4413      	add	r3, r2
 8009b68:	3390      	adds	r3, #144	; 0x90
 8009b6a:	2205      	movs	r2, #5
 8009b6c:	701a      	strb	r2, [r3, #0]
      break;
 8009b6e:	e07d      	b.n	8009c6c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d17a      	bne.n	8009c6c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	2134      	movs	r1, #52	; 0x34
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	4413      	add	r3, r2
 8009b82:	3390      	adds	r3, #144	; 0x90
 8009b84:	2208      	movs	r2, #8
 8009b86:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8c:	e06e      	b.n	8009c6c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009b8e:	78f9      	ldrb	r1, [r7, #3]
 8009b90:	2300      	movs	r3, #0
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	2200      	movs	r2, #0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fe05 	bl	800a7a8 <USBH_MSC_SCSI_Write>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	2134      	movs	r1, #52	; 0x34
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	3390      	adds	r3, #144	; 0x90
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bbe:	e057      	b.n	8009c70 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d109      	bne.n	8009bda <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	2134      	movs	r1, #52	; 0x34
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	3390      	adds	r3, #144	; 0x90
 8009bd4:	2205      	movs	r2, #5
 8009bd6:	701a      	strb	r2, [r3, #0]
      break;
 8009bd8:	e04a      	b.n	8009c70 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d147      	bne.n	8009c70 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	2134      	movs	r1, #52	; 0x34
 8009be6:	fb01 f303 	mul.w	r3, r1, r3
 8009bea:	4413      	add	r3, r2
 8009bec:	3390      	adds	r3, #144	; 0x90
 8009bee:	2208      	movs	r2, #8
 8009bf0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf6:	e03b      	b.n	8009c70 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2234      	movs	r2, #52	; 0x34
 8009bfc:	fb02 f303 	mul.w	r3, r2, r3
 8009c00:	3398      	adds	r3, #152	; 0x98
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	4413      	add	r3, r2
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fd52 	bl	800a6b6 <USBH_MSC_SCSI_RequestSense>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d113      	bne.n	8009c44 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	2134      	movs	r1, #52	; 0x34
 8009c22:	fb01 f303 	mul.w	r3, r1, r3
 8009c26:	4413      	add	r3, r2
 8009c28:	3390      	adds	r3, #144	; 0x90
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	2134      	movs	r1, #52	; 0x34
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	3391      	adds	r3, #145	; 0x91
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009c40:	2302      	movs	r3, #2
 8009c42:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d014      	beq.n	8009c74 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d111      	bne.n	8009c74 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	2134      	movs	r1, #52	; 0x34
 8009c56:	fb01 f303 	mul.w	r3, r1, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3390      	adds	r3, #144	; 0x90
 8009c5e:	2208      	movs	r2, #8
 8009c60:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009c62:	2302      	movs	r3, #2
 8009c64:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c66:	e005      	b.n	8009c74 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009c68:	bf00      	nop
 8009c6a:	e004      	b.n	8009c76 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009c74:	bf00      	nop

  }
  return error;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b0b      	cmp	r3, #11
 8009c9e:	d10c      	bne.n	8009cba <USBH_MSC_UnitIsReady+0x3a>
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	2134      	movs	r1, #52	; 0x34
 8009ca6:	fb01 f303 	mul.w	r3, r1, r3
 8009caa:	4413      	add	r3, r2
 8009cac:	3391      	adds	r3, #145	; 0x91
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e001      	b.n	8009cbe <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b0b      	cmp	r3, #11
 8009cec:	d10d      	bne.n	8009d0a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	2234      	movs	r2, #52	; 0x34
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
 8009cf6:	3390      	adds	r3, #144	; 0x90
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	2234      	movs	r2, #52	; 0x34
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f009 fa2e 	bl	8013162 <memcpy>
    return USBH_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	e000      	b.n	8009d0c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009d0a:	2302      	movs	r3, #2
  }
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	460b      	mov	r3, r1
 8009d22:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00e      	beq.n	8009d58 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009d40:	2b0b      	cmp	r3, #11
 8009d42:	d109      	bne.n	8009d58 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009d44:	7afb      	ldrb	r3, [r7, #11]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	2134      	movs	r1, #52	; 0x34
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	3390      	adds	r3, #144	; 0x90
 8009d52:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d001      	beq.n	8009d5c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e040      	b.n	8009dde <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2206      	movs	r2, #6
 8009d60:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009d62:	7afb      	ldrb	r3, [r7, #11]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	2134      	movs	r1, #52	; 0x34
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3390      	adds	r3, #144	; 0x90
 8009d70:	2206      	movs	r2, #6
 8009d72:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009d7e:	7af9      	ldrb	r1, [r7, #11]
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 fd78 	bl	800a87e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d94:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009d96:	e016      	b.n	8009dc6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	1ad2      	subs	r2, r2, r3
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	f242 7110 	movw	r1, #10000	; 0x2710
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d805      	bhi.n	8009dbc <USBH_MSC_Read+0xa8>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e00b      	b.n	8009dde <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f7ff fe89 	bl	8009ae2 <USBH_MSC_RdWrProcess>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d0e0      	beq.n	8009d98 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b088      	sub	sp, #32
 8009dea:	af02      	add	r7, sp, #8
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	460b      	mov	r3, r1
 8009df4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00e      	beq.n	8009e2a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009e12:	2b0b      	cmp	r3, #11
 8009e14:	d109      	bne.n	8009e2a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	2134      	movs	r1, #52	; 0x34
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	4413      	add	r3, r2
 8009e22:	3390      	adds	r3, #144	; 0x90
 8009e24:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d001      	beq.n	8009e2e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e040      	b.n	8009eb0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2207      	movs	r2, #7
 8009e32:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	2134      	movs	r1, #52	; 0x34
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	4413      	add	r3, r2
 8009e40:	3390      	adds	r3, #144	; 0x90
 8009e42:	2207      	movs	r2, #7
 8009e44:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009e50:	7af9      	ldrb	r1, [r7, #11]
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fca4 	bl	800a7a8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e66:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e68:	e016      	b.n	8009e98 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1ad2      	subs	r2, r2, r3
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	f242 7110 	movw	r1, #10000	; 0x2710
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d805      	bhi.n	8009e8e <USBH_MSC_Write+0xa8>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2201      	movs	r2, #1
 8009e92:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009e94:	2302      	movs	r3, #2
 8009e96:	e00b      	b.n	8009eb0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fe20 	bl	8009ae2 <USBH_MSC_RdWrProcess>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d0e0      	beq.n	8009e6a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2221      	movs	r2, #33	; 0x21
 8009ec4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	22ff      	movs	r2, #255	; 0xff
 8009eca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 ff44 	bl	800bd70 <USBH_CtlReq>
 8009ee8:	4603      	mov	r3, r0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	22a1      	movs	r2, #161	; 0xa1
 8009f00:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	22fe      	movs	r2, #254	; 0xfe
 8009f06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 ff26 	bl	800bd70 <USBH_CtlReq>
 8009f24:	4603      	mov	r3, r0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <USBH_MSC_BOT_Init+0x3c>)
 8009f46:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <USBH_MSC_BOT_Init+0x40>)
 8009f4c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	43425355 	.word	0x43425355
 8009f70:	20304050 	.word	0x20304050

08009f74 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009f80:	2301      	movs	r3, #1
 8009f82:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009f84:	2301      	movs	r3, #1
 8009f86:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	2b0a      	cmp	r3, #10
 8009fa8:	f200 819e 	bhi.w	800a2e8 <USBH_MSC_BOT_Process+0x374>
 8009fac:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <USBH_MSC_BOT_Process+0x40>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	08009fe1 	.word	0x08009fe1
 8009fb8:	0800a009 	.word	0x0800a009
 8009fbc:	0800a073 	.word	0x0800a073
 8009fc0:	0800a091 	.word	0x0800a091
 8009fc4:	0800a115 	.word	0x0800a115
 8009fc8:	0800a137 	.word	0x0800a137
 8009fcc:	0800a1cf 	.word	0x0800a1cf
 8009fd0:	0800a1eb 	.word	0x0800a1eb
 8009fd4:	0800a23d 	.word	0x0800a23d
 8009fd8:	0800a26d 	.word	0x0800a26d
 8009fdc:	0800a2cf 	.word	0x0800a2cf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	795b      	ldrb	r3, [r3, #5]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	9200      	str	r2, [sp, #0]
 8009ffe:	221f      	movs	r2, #31
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 f8c4 	bl	800c18e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a006:	e17e      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	795b      	ldrb	r3, [r3, #5]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f004 ffde 	bl	800efd0 <USBH_LL_GetURBState>
 800a014:	4603      	mov	r3, r0
 800a016:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a018:	7d3b      	ldrb	r3, [r7, #20]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d118      	bne.n	800a050 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00f      	beq.n	800a046 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a02c:	b25b      	sxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da04      	bge.n	800a03c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2203      	movs	r2, #3
 800a036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a03a:	e157      	b.n	800a2ec <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2205      	movs	r2, #5
 800a040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a044:	e152      	b.n	800a2ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2207      	movs	r2, #7
 800a04a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a04e:	e14d      	b.n	800a2ec <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a050:	7d3b      	ldrb	r3, [r7, #20]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d104      	bne.n	800a060 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a05e:	e145      	b.n	800a2ec <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a060:	7d3b      	ldrb	r3, [r7, #20]
 800a062:	2b05      	cmp	r3, #5
 800a064:	f040 8142 	bne.w	800a2ec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	220a      	movs	r2, #10
 800a06c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a070:	e13c      	b.n	800a2ec <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	895a      	ldrh	r2, [r3, #10]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	791b      	ldrb	r3, [r3, #4]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f002 f8a9 	bl	800c1d8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2204      	movs	r2, #4
 800a08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a08e:	e13a      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	791b      	ldrb	r3, [r3, #4]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f004 ff9a 	bl	800efd0 <USBH_LL_GetURBState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a0a0:	7d3b      	ldrb	r3, [r7, #20]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d12d      	bne.n	800a102 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	8952      	ldrh	r2, [r2, #10]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d910      	bls.n	800a0d4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	8952      	ldrh	r2, [r2, #10]
 800a0bc:	441a      	add	r2, r3
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	8952      	ldrh	r2, [r2, #10]
 800a0cc:	1a9a      	subs	r2, r3, r2
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0d2:	e002      	b.n	800a0da <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	895a      	ldrh	r2, [r3, #10]
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	791b      	ldrb	r3, [r3, #4]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f002 f871 	bl	800c1d8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a0f6:	e0fb      	b.n	800a2f0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2207      	movs	r2, #7
 800a0fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a100:	e0f6      	b.n	800a2f0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a102:	7d3b      	ldrb	r3, [r7, #20]
 800a104:	2b05      	cmp	r3, #5
 800a106:	f040 80f3 	bne.w	800a2f0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2209      	movs	r2, #9
 800a10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a112:	e0ed      	b.n	800a2f0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	891a      	ldrh	r2, [r3, #8]
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	795b      	ldrb	r3, [r3, #5]
 800a122:	2001      	movs	r0, #1
 800a124:	9000      	str	r0, [sp, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f002 f831 	bl	800c18e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2206      	movs	r2, #6
 800a130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a134:	e0e7      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f004 ff47 	bl	800efd0 <USBH_LL_GetURBState>
 800a142:	4603      	mov	r3, r0
 800a144:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a146:	7d3b      	ldrb	r3, [r7, #20]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d12f      	bne.n	800a1ac <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	8912      	ldrh	r2, [r2, #8]
 800a154:	4293      	cmp	r3, r2
 800a156:	d910      	bls.n	800a17a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	8912      	ldrh	r2, [r2, #8]
 800a162:	441a      	add	r2, r3
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	8912      	ldrh	r2, [r2, #8]
 800a172:	1a9a      	subs	r2, r3, r2
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	65da      	str	r2, [r3, #92]	; 0x5c
 800a178:	e002      	b.n	800a180 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2200      	movs	r2, #0
 800a17e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00c      	beq.n	800a1a2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	891a      	ldrh	r2, [r3, #8]
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	795b      	ldrb	r3, [r3, #5]
 800a196:	2001      	movs	r0, #1
 800a198:	9000      	str	r0, [sp, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 fff7 	bl	800c18e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a1a0:	e0a8      	b.n	800a2f4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2207      	movs	r2, #7
 800a1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1aa:	e0a3      	b.n	800a2f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1ac:	7d3b      	ldrb	r3, [r7, #20]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d104      	bne.n	800a1bc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2205      	movs	r2, #5
 800a1b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1ba:	e09b      	b.n	800a2f4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a1bc:	7d3b      	ldrb	r3, [r7, #20]
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	f040 8098 	bne.w	800a2f4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	220a      	movs	r2, #10
 800a1c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1cc:	e092      	b.n	800a2f4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	791b      	ldrb	r3, [r3, #4]
 800a1d8:	220d      	movs	r2, #13
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 fffc 	bl	800c1d8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2208      	movs	r2, #8
 800a1e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a1e8:	e08d      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f004 feed 	bl	800efd0 <USBH_LL_GetURBState>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a1fa:	7d3b      	ldrb	r3, [r7, #20]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d115      	bne.n	800a22c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f8a9 	bl	800a368 <USBH_MSC_DecodeCSW>
 800a216:	4603      	mov	r3, r0
 800a218:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a21a:	7d7b      	ldrb	r3, [r7, #21]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a224:	e068      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a226:	2302      	movs	r3, #2
 800a228:	75fb      	strb	r3, [r7, #23]
      break;
 800a22a:	e065      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a22c:	7d3b      	ldrb	r3, [r7, #20]
 800a22e:	2b05      	cmp	r3, #5
 800a230:	d162      	bne.n	800a2f8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2209      	movs	r2, #9
 800a236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a23a:	e05d      	b.n	800a2f8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	2200      	movs	r2, #0
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f864 	bl	800a310 <USBH_MSC_BOT_Abort>
 800a248:	4603      	mov	r3, r0
 800a24a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a24c:	7dbb      	ldrb	r3, [r7, #22]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2207      	movs	r2, #7
 800a256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a25a:	e04f      	b.n	800a2fc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a25c:	7dbb      	ldrb	r3, [r7, #22]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d14c      	bne.n	800a2fc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	220b      	movs	r2, #11
 800a266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a26a:	e047      	b.n	800a2fc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	2201      	movs	r2, #1
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f84c 	bl	800a310 <USBH_MSC_BOT_Abort>
 800a278:	4603      	mov	r3, r0
 800a27a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a27c:	7dbb      	ldrb	r3, [r7, #22]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d11d      	bne.n	800a2be <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f004 fefe 	bl	800f08a <USBH_LL_GetToggle>
 800a28e:	4603      	mov	r3, r0
 800a290:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	7959      	ldrb	r1, [r3, #5]
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	f1c3 0301 	rsb	r3, r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f004 febf 	bl	800f024 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	791b      	ldrb	r3, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f004 feb8 	bl	800f024 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2209      	movs	r2, #9
 800a2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a2bc:	e020      	b.n	800a300 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a2be:	7dbb      	ldrb	r3, [r7, #22]
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d11d      	bne.n	800a300 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	220b      	movs	r2, #11
 800a2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a2cc:	e018      	b.n	800a300 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fdf2 	bl	8009eb8 <USBH_MSC_BOT_REQ_Reset>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d112      	bne.n	800a304 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a2e6:	e00d      	b.n	800a304 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a2e8:	bf00      	nop
 800a2ea:	e00c      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2ec:	bf00      	nop
 800a2ee:	e00a      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2f0:	bf00      	nop
 800a2f2:	e008      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2f4:	bf00      	nop
 800a2f6:	e006      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2f8:	bf00      	nop
 800a2fa:	e004      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a2fc:	bf00      	nop
 800a2fe:	e002      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a300:	bf00      	nop
 800a302:	e000      	b.n	800a306 <USBH_MSC_BOT_Process+0x392>
      break;
 800a304:	bf00      	nop
  }
  return status;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
 800a31c:	4613      	mov	r3, r2
 800a31e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a320:	2302      	movs	r3, #2
 800a322:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a32a:	69db      	ldr	r3, [r3, #28]
 800a32c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a32e:	78bb      	ldrb	r3, [r7, #2]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <USBH_MSC_BOT_Abort+0x2a>
 800a334:	2b01      	cmp	r3, #1
 800a336:	d009      	beq.n	800a34c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a338:	e011      	b.n	800a35e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	79db      	ldrb	r3, [r3, #7]
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 f9d9 	bl	800b6f8 <USBH_ClrFeature>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
      break;
 800a34a:	e008      	b.n	800a35e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	799b      	ldrb	r3, [r3, #6]
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 f9d0 	bl	800b6f8 <USBH_ClrFeature>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
      break;
 800a35c:	bf00      	nop
  }
  return status;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a37a:	2301      	movs	r3, #1
 800a37c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f004 fd91 	bl	800eeac <USBH_LL_GetLastXferSize>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b0d      	cmp	r3, #13
 800a38e:	d002      	beq.n	800a396 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a390:	2302      	movs	r3, #2
 800a392:	73fb      	strb	r3, [r7, #15]
 800a394:	e024      	b.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a39a:	4a14      	ldr	r2, [pc, #80]	; (800a3ec <USBH_MSC_DecodeCSW+0x84>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d11d      	bne.n	800a3dc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d119      	bne.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
 800a3ba:	e011      	b.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d102      	bne.n	800a3cc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	73fb      	strb	r3, [r7, #15]
 800a3ca:	e009      	b.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d104      	bne.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	73fb      	strb	r3, [r7, #15]
 800a3da:	e001      	b.n	800a3e0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	53425355 	.word	0x53425355

0800a3f0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a410:	2b01      	cmp	r3, #1
 800a412:	d002      	beq.n	800a41a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a414:	2b02      	cmp	r3, #2
 800a416:	d021      	beq.n	800a45c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a418:	e028      	b.n	800a46c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2200      	movs	r2, #0
 800a41e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	220a      	movs	r2, #10
 800a42c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3363      	adds	r3, #99	; 0x63
 800a434:	2210      	movs	r2, #16
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f008 fe03 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2202      	movs	r2, #2
 800a452:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a456:	2301      	movs	r3, #1
 800a458:	73fb      	strb	r3, [r7, #15]
      break;
 800a45a:	e007      	b.n	800a46c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff fd87 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]
      break;
 800a46a:	bf00      	nop
  }

  return error;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	460b      	mov	r3, r1
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d002      	beq.n	800a4a2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d027      	beq.n	800a4f0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a4a0:	e05f      	b.n	800a562 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2208      	movs	r2, #8
 800a4a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2280      	movs	r2, #128	; 0x80
 800a4ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	220a      	movs	r2, #10
 800a4b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3363      	adds	r3, #99	; 0x63
 800a4bc:	2210      	movs	r2, #16
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f008 fdbf 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2225      	movs	r2, #37	; 0x25
 800a4ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f103 0210 	add.w	r2, r3, #16
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ee:	e038      	b.n	800a562 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7ff fd3d 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d12d      	bne.n	800a560 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50a:	3303      	adds	r3, #3
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a516:	3302      	adds	r3, #2
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	021b      	lsls	r3, r3, #8
 800a51c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a524:	3301      	adds	r3, #1
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a52a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	061b      	lsls	r3, r3, #24
 800a536:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a542:	3307      	adds	r3, #7
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	b29a      	uxth	r2, r3
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a54e:	3306      	adds	r3, #6
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b29b      	uxth	r3, r3
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b29b      	uxth	r3, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	809a      	strh	r2, [r3, #4]
      break;
 800a560:	bf00      	nop
  }

  return error;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	460b      	mov	r3, r1
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a57a:	2302      	movs	r3, #2
 800a57c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d002      	beq.n	800a598 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a592:	2b02      	cmp	r3, #2
 800a594:	d03d      	beq.n	800a612 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a596:	e089      	b.n	800a6ac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2224      	movs	r2, #36	; 0x24
 800a59c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2280      	movs	r2, #128	; 0x80
 800a5a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3363      	adds	r3, #99	; 0x63
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f008 fd44 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2212      	movs	r2, #18
 800a5c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	015b      	lsls	r3, r3, #5
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2224      	movs	r2, #36	; 0x24
 800a5e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f103 0210 	add.w	r2, r3, #16
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]
      break;
 800a610:	e04c      	b.n	800a6ac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	4619      	mov	r1, r3
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fcac 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a61c:	4603      	mov	r3, r0
 800a61e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d141      	bne.n	800a6aa <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a626:	2222      	movs	r2, #34	; 0x22
 800a628:	2100      	movs	r1, #0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f008 fd0a 	bl	8013044 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a658:	3301      	adds	r3, #1
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da03      	bge.n	800a66a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	709a      	strb	r2, [r3, #2]
 800a668:	e002      	b.n	800a670 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	1cd8      	adds	r0, r3, #3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a67a:	3308      	adds	r3, #8
 800a67c:	2208      	movs	r2, #8
 800a67e:	4619      	mov	r1, r3
 800a680:	f008 fd6f 	bl	8013162 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f103 000c 	add.w	r0, r3, #12
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a690:	3310      	adds	r3, #16
 800a692:	2210      	movs	r2, #16
 800a694:	4619      	mov	r1, r3
 800a696:	f008 fd64 	bl	8013162 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	331d      	adds	r3, #29
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a6a4:	3220      	adds	r2, #32
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	601a      	str	r2, [r3, #0]
      break;
 800a6aa:	bf00      	nop
  }

  return error;
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d002      	beq.n	800a6e2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d03d      	beq.n	800a75c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a6e0:	e05d      	b.n	800a79e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	220e      	movs	r2, #14
 800a6e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2280      	movs	r2, #128	; 0x80
 800a6ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	220a      	movs	r2, #10
 800a6f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	3363      	adds	r3, #99	; 0x63
 800a6fc:	2210      	movs	r2, #16
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f008 fc9f 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2203      	movs	r2, #3
 800a70a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	015b      	lsls	r3, r3, #5
 800a712:	b2da      	uxtb	r2, r3
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	220e      	movs	r2, #14
 800a72e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2202      	movs	r2, #2
 800a746:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f103 0210 	add.w	r2, r3, #16
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
      break;
 800a75a:	e020      	b.n	800a79e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff fc07 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d115      	bne.n	800a79c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a776:	3302      	adds	r3, #2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a78a:	7b1a      	ldrb	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a796:	7b5a      	ldrb	r2, [r3, #13]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	709a      	strb	r2, [r3, #2]
      break;
 800a79c:	bf00      	nop
  }

  return error;
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d002      	beq.n	800a7d6 <USBH_MSC_SCSI_Write+0x2e>
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d047      	beq.n	800a864 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a7d4:	e04e      	b.n	800a874 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	fb03 f202 	mul.w	r2, r3, r2
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3363      	adds	r3, #99	; 0x63
 800a7fc:	2210      	movs	r2, #16
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f008 fc1f 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	222a      	movs	r2, #42	; 0x2a
 800a80a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a80e:	79fa      	ldrb	r2, [r7, #7]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a816:	79ba      	ldrb	r2, [r7, #6]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a81e:	797a      	ldrb	r2, [r7, #5]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a826:	1d3b      	adds	r3, r7, #4
 800a828:	781a      	ldrb	r2, [r3, #0]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800a830:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800a83a:	f107 0320 	add.w	r3, r7, #32
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2202      	movs	r2, #2
 800a852:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a85e:	2301      	movs	r3, #1
 800a860:	75fb      	strb	r3, [r7, #23]
      break;
 800a862:	e007      	b.n	800a874 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff fb83 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a86e:	4603      	mov	r3, r0
 800a870:	75fb      	strb	r3, [r7, #23]
      break;
 800a872:	bf00      	nop
  }

  return error;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
 800a88a:	460b      	mov	r3, r1
 800a88c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800a88e:	2302      	movs	r3, #2
 800a890:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d002      	beq.n	800a8ac <USBH_MSC_SCSI_Read+0x2e>
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d047      	beq.n	800a93a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a8aa:	e04e      	b.n	800a94a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	fb03 f202 	mul.w	r2, r3, r2
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	220a      	movs	r2, #10
 800a8ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3363      	adds	r3, #99	; 0x63
 800a8d2:	2210      	movs	r2, #16
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f008 fbb4 	bl	8013044 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	2228      	movs	r2, #40	; 0x28
 800a8e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a8e4:	79fa      	ldrb	r2, [r7, #7]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a8ec:	79ba      	ldrb	r2, [r7, #6]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a8f4:	797a      	ldrb	r2, [r7, #5]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a8fc:	1d3b      	adds	r3, r7, #4
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800a906:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800a910:	f107 0320 	add.w	r3, r7, #32
 800a914:	781a      	ldrb	r2, [r3, #0]
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a934:	2301      	movs	r3, #1
 800a936:	75fb      	strb	r3, [r7, #23]
      break;
 800a938:	e007      	b.n	800a94a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	4619      	mov	r1, r3
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff fb18 	bl	8009f74 <USBH_MSC_BOT_Process>
 800a944:	4603      	mov	r3, r0
 800a946:	75fb      	strb	r3, [r7, #23]
      break;
 800a948:	bf00      	nop
  }

  return error;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a968:	2302      	movs	r3, #2
 800a96a:	e029      	b.n	800a9c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	79fa      	ldrb	r2, [r7, #7]
 800a970:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
  phost->ClassNumber = 0U;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 f81f 	bl	800a9c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
  phost->device.is_connected = 0U;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  phost->device.is_disconnected = 0U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
  phost->device.is_ReEnumerated = 0U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f004 f9c3 	bl	800ed44 <USBH_LL_Init>

  return USBH_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e009      	b.n	800a9ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	33a0      	adds	r3, #160	; 0xa0
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b0f      	cmp	r3, #15
 800a9f2:	d9f2      	bls.n	800a9da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	e009      	b.n	800aa0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2bff      	cmp	r3, #255	; 0xff
 800aa12:	d9f2      	bls.n	800a9fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  phost->Control.state = CTRL_SETUP;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2240      	movs	r2, #64	; 0x40
 800aa38:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  phost->device.RstCnt = 0U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
  phost->device.EnumCnt = 0U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	331c      	adds	r3, #28
 800aa64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f008 faea 	bl	8013044 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f008 fae1 	bl	8013044 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f203 2326 	addw	r3, r3, #550	; 0x226
 800aa88:	2212      	movs	r2, #18
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f008 fad9 	bl	8013044 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800aa98:	223e      	movs	r2, #62	; 0x3e
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f008 fad1 	bl	8013044 <memset>

  return USBH_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d016      	beq.n	800aaee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10e      	bne.n	800aae8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800aad0:	1c59      	adds	r1, r3, #1
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	339e      	adds	r3, #158	; 0x9e
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	e004      	b.n	800aaf2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aae8:	2302      	movs	r3, #2
 800aaea:	73fb      	strb	r3, [r7, #15]
 800aaec:	e001      	b.n	800aaf2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aaee:	2302      	movs	r3, #2
 800aaf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d204      	bcs.n	800ab26 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 800ab24:	e001      	b.n	800ab2a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab26:	2302      	movs	r3, #2
 800ab28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	70fb      	strb	r3, [r7, #3]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70bb      	strb	r3, [r7, #2]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800ab60:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab62:	e025      	b.n	800abb0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	221a      	movs	r2, #26
 800ab68:	fb02 f303 	mul.w	r3, r2, r3
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	3302      	adds	r3, #2
 800ab74:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	795b      	ldrb	r3, [r3, #5]
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d002      	beq.n	800ab86 <USBH_FindInterface+0x4e>
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	2bff      	cmp	r3, #255	; 0xff
 800ab84:	d111      	bne.n	800abaa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab8a:	78ba      	ldrb	r2, [r7, #2]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d002      	beq.n	800ab96 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab90:	78bb      	ldrb	r3, [r7, #2]
 800ab92:	2bff      	cmp	r3, #255	; 0xff
 800ab94:	d109      	bne.n	800abaa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab9a:	787a      	ldrb	r2, [r7, #1]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d002      	beq.n	800aba6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aba0:	787b      	ldrb	r3, [r7, #1]
 800aba2:	2bff      	cmp	r3, #255	; 0xff
 800aba4:	d101      	bne.n	800abaa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	e006      	b.n	800abb8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	3301      	adds	r3, #1
 800abae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d9d6      	bls.n	800ab64 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800abb6:	23ff      	movs	r3, #255	; 0xff
}
 800abb8:	4618      	mov	r0, r3
 800abba:	371c      	adds	r7, #28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f004 f8f5 	bl	800edbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800abd2:	2101      	movs	r1, #1
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f004 fa0e 	bl	800eff6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af04      	add	r7, sp, #16
 800abea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800abec:	2302      	movs	r3, #2
 800abee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d102      	bne.n	800ac06 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2203      	movs	r2, #3
 800ac04:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b0b      	cmp	r3, #11
 800ac0e:	f200 81be 	bhi.w	800af8e <USBH_Process+0x3aa>
 800ac12:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <USBH_Process+0x34>)
 800ac14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac7b 	.word	0x0800ac7b
 800ac20:	0800ace3 	.word	0x0800ace3
 800ac24:	0800af29 	.word	0x0800af29
 800ac28:	0800af8f 	.word	0x0800af8f
 800ac2c:	0800ad87 	.word	0x0800ad87
 800ac30:	0800aecf 	.word	0x0800aecf
 800ac34:	0800adbd 	.word	0x0800adbd
 800ac38:	0800addd 	.word	0x0800addd
 800ac3c:	0800adfd 	.word	0x0800adfd
 800ac40:	0800ae41 	.word	0x0800ae41
 800ac44:	0800af11 	.word	0x0800af11
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 819e 	beq.w	800af92 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac5c:	20c8      	movs	r0, #200	; 0xc8
 800ac5e:	f004 fa47 	bl	800f0f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f004 f907 	bl	800ee76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        phost->Timeout = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac78:	e18b      	b.n	800af92 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d107      	bne.n	800ac94 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
        phost->gState = HOST_DEV_ATTACHED;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac92:	e18d      	b.n	800afb0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac9e:	d914      	bls.n	800acca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800aca6:	3301      	adds	r3, #1
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
          if (phost->device.RstCnt > 3U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d903      	bls.n	800acc2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	220d      	movs	r2, #13
 800acbe:	701a      	strb	r2, [r3, #0]
      break;
 800acc0:	e176      	b.n	800afb0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	701a      	strb	r2, [r3, #0]
      break;
 800acc8:	e172      	b.n	800afb0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acd0:	f103 020a 	add.w	r2, r3, #10
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
          USBH_Delay(10U);
 800acda:	200a      	movs	r0, #10
 800acdc:	f004 fa08 	bl	800f0f0 <USBH_Delay>
      break;
 800ace0:	e166      	b.n	800afb0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf2:	2104      	movs	r1, #4
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800acf8:	2064      	movs	r0, #100	; 0x64
 800acfa:	f004 f9f9 	bl	800f0f0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f004 f892 	bl	800ee28 <USBH_LL_GetSpeed>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

      phost->gState = HOST_ENUMERATION;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2205      	movs	r2, #5
 800ad12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad14:	2100      	movs	r1, #0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 faab 	bl	800c272 <USBH_AllocPipe>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ad24:	2180      	movs	r1, #128	; 0x80
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 faa3 	bl	800c272 <USBH_AllocPipe>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	7919      	ldrb	r1, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad48:	b292      	uxth	r2, r2
 800ad4a:	9202      	str	r2, [sp, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	9201      	str	r2, [sp, #4]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4603      	mov	r3, r0
 800ad54:	2280      	movs	r2, #128	; 0x80
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fa5c 	bl	800c214 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	7959      	ldrb	r1, [r3, #5]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad70:	b292      	uxth	r2, r2
 800ad72:	9202      	str	r2, [sp, #8]
 800ad74:	2200      	movs	r2, #0
 800ad76:	9201      	str	r2, [sp, #4]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f001 fa48 	bl	800c214 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad84:	e114      	b.n	800afb0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f918 	bl	800afbc <USBH_HandleEnum>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f040 80fe 	bne.w	800af96 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d103      	bne.n	800adb4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2208      	movs	r2, #8
 800adb0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800adb2:	e0f0      	b.n	800af96 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2207      	movs	r2, #7
 800adb8:	701a      	strb	r2, [r3, #0]
      break;
 800adba:	e0ec      	b.n	800af96 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80e9 	beq.w	800af9a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adce:	2101      	movs	r1, #1
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2208      	movs	r2, #8
 800add8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800adda:	e0de      	b.n	800af9a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fc3f 	bl	800b66a <USBH_SetCfg>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f040 80d5 	bne.w	800af9e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2209      	movs	r2, #9
 800adf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adfa:	e0d0      	b.n	800af9e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d016      	beq.n	800ae38 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fc4f 	bl	800b6b0 <USBH_SetFeature>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d103      	bne.n	800ae26 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	220a      	movs	r2, #10
 800ae22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae24:	e0bd      	b.n	800afa2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	f040 80b9 	bne.w	800afa2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	220a      	movs	r2, #10
 800ae34:	701a      	strb	r2, [r3, #0]
      break;
 800ae36:	e0b4      	b.n	800afa2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	701a      	strb	r2, [r3, #0]
      break;
 800ae3e:	e0b0      	b.n	800afa2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 80ad 	beq.w	800afa6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	e016      	b.n	800ae88 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	329e      	adds	r2, #158	; 0x9e
 800ae60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae64:	791a      	ldrb	r2, [r3, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3247 	ldrb.w	r3, [r3, #583]	; 0x247
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d108      	bne.n	800ae82 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae70:	7bfa      	ldrb	r2, [r7, #15]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	329e      	adds	r2, #158	; 0x9e
 800ae76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
            break;
 800ae80:	e005      	b.n	800ae8e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	3301      	adds	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0e5      	beq.n	800ae5a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d016      	beq.n	800aec6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2206      	movs	r2, #6
 800aeae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeb6:	2103      	movs	r1, #3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aebc:	e073      	b.n	800afa6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	220d      	movs	r2, #13
 800aec2:	701a      	strb	r2, [r3, #0]
      break;
 800aec4:	e06f      	b.n	800afa6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	220d      	movs	r2, #13
 800aeca:	701a      	strb	r2, [r3, #0]
      break;
 800aecc:	e06b      	b.n	800afa6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d017      	beq.n	800af08 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	220b      	movs	r2, #11
 800aef4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aef6:	e058      	b.n	800afaa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d154      	bne.n	800afaa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	220d      	movs	r2, #13
 800af04:	701a      	strb	r2, [r3, #0]
      break;
 800af06:	e050      	b.n	800afaa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220d      	movs	r2, #13
 800af0c:	701a      	strb	r2, [r3, #0]
      break;
 800af0e:	e04c      	b.n	800afaa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d049      	beq.n	800afae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
      }
      break;
 800af26:	e042      	b.n	800afae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221

      (void)DeInitStateMachine(phost);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fd49 	bl	800a9c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d009      	beq.n	800af54 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      }

      if (phost->pUser != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af64:	2105      	movs	r1, #5
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b01      	cmp	r3, #1
 800af74:	d107      	bne.n	800af86 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fe20 	bl	800abc4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af84:	e014      	b.n	800afb0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f003 ff18 	bl	800edbc <USBH_LL_Start>
      break;
 800af8c:	e010      	b.n	800afb0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800af8e:	bf00      	nop
 800af90:	e00e      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800af92:	bf00      	nop
 800af94:	e00c      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800af96:	bf00      	nop
 800af98:	e00a      	b.n	800afb0 <USBH_Process+0x3cc>
    break;
 800af9a:	bf00      	nop
 800af9c:	e008      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800af9e:	bf00      	nop
 800afa0:	e006      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800afa2:	bf00      	nop
 800afa4:	e004      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <USBH_Process+0x3cc>
      break;
 800afae:	bf00      	nop
  }
  return USBH_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop

0800afbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af04      	add	r7, sp, #16
 800afc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800afc8:	2301      	movs	r3, #1
 800afca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	2b07      	cmp	r3, #7
 800afd2:	f200 81c1 	bhi.w	800b358 <USBH_HandleEnum+0x39c>
 800afd6:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <USBH_HandleEnum+0x20>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800affd 	.word	0x0800affd
 800afe0:	0800b0bb 	.word	0x0800b0bb
 800afe4:	0800b125 	.word	0x0800b125
 800afe8:	0800b1b3 	.word	0x0800b1b3
 800afec:	0800b21d 	.word	0x0800b21d
 800aff0:	0800b28d 	.word	0x0800b28d
 800aff4:	0800b2d3 	.word	0x0800b2d3
 800aff8:	0800b319 	.word	0x0800b319
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800affc:	2108      	movs	r1, #8
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa50 	bl	800b4a4 <USBH_Get_DevDesc>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d130      	bne.n	800b070 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 222d 	ldrb.w	r2, [r3, #557]	; 0x22d
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	7919      	ldrb	r1, [r3, #4]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b032:	b292      	uxth	r2, r2
 800b034:	9202      	str	r2, [sp, #8]
 800b036:	2200      	movs	r2, #0
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	4603      	mov	r3, r0
 800b03e:	2280      	movs	r2, #128	; 0x80
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 f8e7 	bl	800c214 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7959      	ldrb	r1, [r3, #5]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b05a:	b292      	uxth	r2, r2
 800b05c:	9202      	str	r2, [sp, #8]
 800b05e:	2200      	movs	r2, #0
 800b060:	9201      	str	r2, [sp, #4]
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	4603      	mov	r3, r0
 800b066:	2200      	movs	r2, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f8d3 	bl	800c214 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b06e:	e175      	b.n	800b35c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b03      	cmp	r3, #3
 800b074:	f040 8172 	bne.w	800b35c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b07e:	3301      	adds	r3, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
        if (phost->device.EnumCnt > 3U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d903      	bls.n	800b09a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220d      	movs	r2, #13
 800b096:	701a      	strb	r2, [r3, #0]
      break;
 800b098:	e160      	b.n	800b35c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	795b      	ldrb	r3, [r3, #5]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 f907 	bl	800c2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	791b      	ldrb	r3, [r3, #4]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f901 	bl	800c2b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
      break;
 800b0b8:	e150      	b.n	800b35c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b0ba:	2112      	movs	r1, #18
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f9f1 	bl	800b4a4 <USBH_Get_DevDesc>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0d2:	e145      	b.n	800b360 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	f040 8142 	bne.w	800b360 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
        if (phost->device.EnumCnt > 3U)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d903      	bls.n	800b0fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	220d      	movs	r2, #13
 800b0fa:	701a      	strb	r2, [r3, #0]
      break;
 800b0fc:	e130      	b.n	800b360 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	795b      	ldrb	r3, [r3, #5]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 f8d5 	bl	800c2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	791b      	ldrb	r3, [r3, #4]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f8cf 	bl	800c2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	701a      	strb	r2, [r3, #0]
      break;
 800b122:	e11d      	b.n	800b360 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b124:	2101      	movs	r1, #1
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa7b 	bl	800b622 <USBH_SetAddress>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b130:	7bbb      	ldrb	r3, [r7, #14]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d132      	bne.n	800b19c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b136:	2002      	movs	r0, #2
 800b138:	f003 ffda 	bl	800f0f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2203      	movs	r2, #3
 800b148:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	7919      	ldrb	r1, [r3, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b15e:	b292      	uxth	r2, r2
 800b160:	9202      	str	r2, [sp, #8]
 800b162:	2200      	movs	r2, #0
 800b164:	9201      	str	r2, [sp, #4]
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	4603      	mov	r3, r0
 800b16a:	2280      	movs	r2, #128	; 0x80
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 f851 	bl	800c214 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	7959      	ldrb	r1, [r3, #5]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 021c 	ldrb.w	r0, [r3, #540]	; 0x21c
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b186:	b292      	uxth	r2, r2
 800b188:	9202      	str	r2, [sp, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	9201      	str	r2, [sp, #4]
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4603      	mov	r3, r0
 800b192:	2200      	movs	r2, #0
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f83d 	bl	800c214 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b19a:	e0e3      	b.n	800b364 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	f040 80e0 	bne.w	800b364 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	220d      	movs	r2, #13
 800b1a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	705a      	strb	r2, [r3, #1]
      break;
 800b1b0:	e0d8      	b.n	800b364 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b1b2:	2109      	movs	r1, #9
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f9a1 	bl	800b4fc <USBH_Get_CfgDesc>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d103      	bne.n	800b1cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2204      	movs	r2, #4
 800b1c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1ca:	e0cd      	b.n	800b368 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	f040 80ca 	bne.w	800b368 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
        if (phost->device.EnumCnt > 3U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d903      	bls.n	800b1f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	220d      	movs	r2, #13
 800b1f2:	701a      	strb	r2, [r3, #0]
      break;
 800b1f4:	e0b8      	b.n	800b368 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	795b      	ldrb	r3, [r3, #5]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f859 	bl	800c2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	791b      	ldrb	r3, [r3, #4]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 f853 	bl	800c2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
      break;
 800b21a:	e0a5      	b.n	800b368 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f969 	bl	800b4fc <USBH_Get_CfgDesc>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d103      	bne.n	800b23c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2205      	movs	r2, #5
 800b238:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b23a:	e097      	b.n	800b36c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	2b03      	cmp	r3, #3
 800b240:	f040 8094 	bne.w	800b36c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b24a:	3301      	adds	r3, #1
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
        if (phost->device.EnumCnt > 3U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d903      	bls.n	800b266 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	220d      	movs	r2, #13
 800b262:	701a      	strb	r2, [r3, #0]
      break;
 800b264:	e082      	b.n	800b36c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	795b      	ldrb	r3, [r3, #5]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f001 f821 	bl	800c2b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	791b      	ldrb	r3, [r3, #4]
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 f81b 	bl	800c2b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
      break;
 800b28a:	e06f      	b.n	800b36c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800b292:	2b00      	cmp	r3, #0
 800b294:	d019      	beq.n	800b2ca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 1234 	ldrb.w	r1, [r3, #564]	; 0x234
                                        phost->device.Data, 0xFFU);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2a2:	23ff      	movs	r3, #255	; 0xff
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f953 	bl	800b550 <USBH_Get_StringDesc>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2206      	movs	r2, #6
 800b2b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2ba:	e059      	b.n	800b370 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d156      	bne.n	800b370 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2206      	movs	r2, #6
 800b2c6:	705a      	strb	r2, [r3, #1]
      break;
 800b2c8:	e052      	b.n	800b370 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2206      	movs	r2, #6
 800b2ce:	705a      	strb	r2, [r3, #1]
      break;
 800b2d0:	e04e      	b.n	800b370 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3235 	ldrb.w	r3, [r3, #565]	; 0x235
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d019      	beq.n	800b310 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 1235 	ldrb.w	r1, [r3, #565]	; 0x235
                                        phost->device.Data, 0xFFU);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2e8:	23ff      	movs	r3, #255	; 0xff
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f930 	bl	800b550 <USBH_Get_StringDesc>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2207      	movs	r2, #7
 800b2fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b300:	e038      	b.n	800b374 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b03      	cmp	r3, #3
 800b306:	d135      	bne.n	800b374 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2207      	movs	r2, #7
 800b30c:	705a      	strb	r2, [r3, #1]
      break;
 800b30e:	e031      	b.n	800b374 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2207      	movs	r2, #7
 800b314:	705a      	strb	r2, [r3, #1]
      break;
 800b316:	e02d      	b.n	800b374 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d017      	beq.n	800b352 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 1236 	ldrb.w	r1, [r3, #566]	; 0x236
                                        phost->device.Data, 0xFFU);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b32e:	23ff      	movs	r3, #255	; 0xff
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f90d 	bl	800b550 <USBH_Get_StringDesc>
 800b336:	4603      	mov	r3, r0
 800b338:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b344:	e018      	b.n	800b378 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b346:	7bbb      	ldrb	r3, [r7, #14]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d115      	bne.n	800b378 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]
      break;
 800b350:	e012      	b.n	800b378 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]
      break;
 800b356:	e00f      	b.n	800b378 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b358:	bf00      	nop
 800b35a:	e00e      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b35c:	bf00      	nop
 800b35e:	e00c      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b360:	bf00      	nop
 800b362:	e00a      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b364:	bf00      	nop
 800b366:	e008      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b368:	bf00      	nop
 800b36a:	e006      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b36c:	bf00      	nop
 800b36e:	e004      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b370:	bf00      	nop
 800b372:	e002      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <USBH_HandleEnum+0x3be>
      break;
 800b378:	bf00      	nop
  }
  return Status;
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  USBH_HandleSof(phost);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f804 	bl	800b3c6 <USBH_HandleSof>
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b0b      	cmp	r3, #11
 800b3d6:	d10a      	bne.n	800b3ee <USBH_HandleSof+0x28>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
  }
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b406:	bf00      	nop
}
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223

  return;
 800b422:	bf00      	nop
}
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  phost->device.is_disconnected = 0U;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
  phost->device.is_ReEnumerated = 0U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
  phost->device.is_connected = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  phost->device.PortEnabled = 0U;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f003 fcb8 	bl	800edf2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	791b      	ldrb	r3, [r3, #4]
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 ff13 	bl	800c2b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	795b      	ldrb	r3, [r3, #5]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 ff0d 	bl	800c2b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b4b0:	887b      	ldrh	r3, [r7, #2]
 800b4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b6:	d901      	bls.n	800b4bc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e01b      	b.n	800b4f4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b4c2:	887b      	ldrh	r3, [r7, #2]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f872 	bl	800b5b8 <USBH_GetDescriptor>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b4e4:	887a      	ldrh	r2, [r7, #2]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f929 	bl	800b740 <USBH_ParseDevDesc>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af02      	add	r7, sp, #8
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	460b      	mov	r3, r1
 800b506:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	331c      	adds	r3, #28
 800b50c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b50e:	887b      	ldrh	r3, [r7, #2]
 800b510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b514:	d901      	bls.n	800b51a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b516:	2303      	movs	r3, #3
 800b518:	e016      	b.n	800b548 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b51a:	887b      	ldrh	r3, [r7, #2]
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b524:	2100      	movs	r1, #0
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f846 	bl	800b5b8 <USBH_GetDescriptor>
 800b52c:	4603      	mov	r3, r0
 800b52e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d107      	bne.n	800b546 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b536:	887b      	ldrh	r3, [r7, #2]
 800b538:	461a      	mov	r2, r3
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f9b3 	bl	800b8a8 <USBH_ParseCfgDesc>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b546:	7bfb      	ldrb	r3, [r7, #15]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af02      	add	r7, sp, #8
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	461a      	mov	r2, r3
 800b55c:	460b      	mov	r3, r1
 800b55e:	72fb      	strb	r3, [r7, #11]
 800b560:	4613      	mov	r3, r2
 800b562:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b564:	893b      	ldrh	r3, [r7, #8]
 800b566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56a:	d802      	bhi.n	800b572 <USBH_Get_StringDesc+0x22>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b572:	2303      	movs	r3, #3
 800b574:	e01c      	b.n	800b5b0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b57e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b586:	893b      	ldrh	r3, [r7, #8]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	460b      	mov	r3, r1
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 f812 	bl	800b5b8 <USBH_GetDescriptor>
 800b594:	4603      	mov	r3, r0
 800b596:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d107      	bne.n	800b5ae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5a4:	893a      	ldrh	r2, [r7, #8]
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fb93 	bl	800bcd4 <USBH_ParseStringDesc>
  }

  return status;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	607b      	str	r3, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	72fb      	strb	r3, [r7, #11]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	789b      	ldrb	r3, [r3, #2]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d11c      	bne.n	800b60c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2206      	movs	r2, #6
 800b5e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	893a      	ldrh	r2, [r7, #8]
 800b5e8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b5ea:	893b      	ldrh	r3, [r7, #8]
 800b5ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5f4:	d104      	bne.n	800b600 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f240 4209 	movw	r2, #1033	; 0x409
 800b5fc:	829a      	strh	r2, [r3, #20]
 800b5fe:	e002      	b.n	800b606 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	8b3a      	ldrh	r2, [r7, #24]
 800b60a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b60c:	8b3b      	ldrh	r3, [r7, #24]
 800b60e:	461a      	mov	r2, r3
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fbac 	bl	800bd70 <USBH_CtlReq>
 800b618:	4603      	mov	r3, r0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	789b      	ldrb	r3, [r3, #2]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10f      	bne.n	800b656 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2205      	movs	r2, #5
 800b640:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b642:	78fb      	ldrb	r3, [r7, #3]
 800b644:	b29a      	uxth	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b656:	2200      	movs	r2, #0
 800b658:	2100      	movs	r1, #0
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fb88 	bl	800bd70 <USBH_CtlReq>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	789b      	ldrb	r3, [r3, #2]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10e      	bne.n	800b69c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2209      	movs	r2, #9
 800b688:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	887a      	ldrh	r2, [r7, #2]
 800b68e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b69c:	2200      	movs	r2, #0
 800b69e:	2100      	movs	r1, #0
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fb65 	bl	800bd70 <USBH_CtlReq>
 800b6a6:	4603      	mov	r3, r0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	789b      	ldrb	r3, [r3, #2]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10f      	bne.n	800b6e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fb41 	bl	800bd70 <USBH_CtlReq>
 800b6ee:	4603      	mov	r3, r0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	789b      	ldrb	r3, [r3, #2]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d10f      	bne.n	800b72c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	b29a      	uxth	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b72c:	2200      	movs	r2, #0
 800b72e:	2100      	movs	r1, #0
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fb1d 	bl	800bd70 <USBH_CtlReq>
 800b736:	4603      	mov	r3, r0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4613      	mov	r3, r2
 800b74c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f203 2326 	addw	r3, r3, #550	; 0x226
 800b754:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b760:	2302      	movs	r3, #2
 800b762:	e098      	b.n	800b896 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	781a      	ldrb	r2, [r3, #0]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	785a      	ldrb	r2, [r3, #1]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	3302      	adds	r3, #2
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	3303      	adds	r3, #3
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	b29b      	uxth	r3, r3
 800b788:	4313      	orrs	r3, r2
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	791a      	ldrb	r2, [r3, #4]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	795a      	ldrb	r2, [r3, #5]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	799a      	ldrb	r2, [r3, #6]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	79da      	ldrb	r2, [r3, #7]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d11b      	bne.n	800b7fc <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	79db      	ldrb	r3, [r3, #7]
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	dc0f      	bgt.n	800b7ec <USBH_ParseDevDesc+0xac>
 800b7cc:	2b08      	cmp	r3, #8
 800b7ce:	db0f      	blt.n	800b7f0 <USBH_ParseDevDesc+0xb0>
 800b7d0:	3b08      	subs	r3, #8
 800b7d2:	4a34      	ldr	r2, [pc, #208]	; (800b8a4 <USBH_ParseDevDesc+0x164>)
 800b7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bf14      	ite	ne
 800b7e0:	2301      	movne	r3, #1
 800b7e2:	2300      	moveq	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d106      	bne.n	800b7f8 <USBH_ParseDevDesc+0xb8>
 800b7ea:	e001      	b.n	800b7f0 <USBH_ParseDevDesc+0xb0>
 800b7ec:	2b40      	cmp	r3, #64	; 0x40
 800b7ee:	d003      	beq.n	800b7f8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2208      	movs	r2, #8
 800b7f4:	71da      	strb	r2, [r3, #7]
        break;
 800b7f6:	e000      	b.n	800b7fa <USBH_ParseDevDesc+0xba>
        break;
 800b7f8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b7fa:	e00e      	b.n	800b81a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800b802:	2b02      	cmp	r3, #2
 800b804:	d107      	bne.n	800b816 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	79db      	ldrb	r3, [r3, #7]
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	d005      	beq.n	800b81a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2208      	movs	r2, #8
 800b812:	71da      	strb	r2, [r3, #7]
 800b814:	e001      	b.n	800b81a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b816:	2303      	movs	r3, #3
 800b818:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	2b08      	cmp	r3, #8
 800b81e:	d939      	bls.n	800b894 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3308      	adds	r3, #8
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	b29a      	uxth	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	3309      	adds	r3, #9
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	b29b      	uxth	r3, r3
 800b834:	4313      	orrs	r3, r2
 800b836:	b29a      	uxth	r2, r3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	330a      	adds	r3, #10
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	b29a      	uxth	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	330b      	adds	r3, #11
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	021b      	lsls	r3, r3, #8
 800b84e:	b29b      	uxth	r3, r3
 800b850:	4313      	orrs	r3, r2
 800b852:	b29a      	uxth	r2, r3
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	330c      	adds	r3, #12
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	b29a      	uxth	r2, r3
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	330d      	adds	r3, #13
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	021b      	lsls	r3, r3, #8
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4313      	orrs	r3, r2
 800b86e:	b29a      	uxth	r2, r3
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	7b9a      	ldrb	r2, [r3, #14]
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	7bda      	ldrb	r2, [r3, #15]
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	7c1a      	ldrb	r2, [r3, #16]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	7c5a      	ldrb	r2, [r3, #17]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b894:	7dfb      	ldrb	r3, [r7, #23]
}
 800b896:	4618      	mov	r0, r3
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	01000101 	.word	0x01000101

0800b8a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08c      	sub	sp, #48	; 0x30
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800b8bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e0db      	b.n	800ba92 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	781a      	ldrb	r2, [r3, #0]
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	785a      	ldrb	r2, [r3, #1]
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	3302      	adds	r3, #2
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	3303      	adds	r3, #3
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	b29b      	uxth	r3, r3
 800b902:	4313      	orrs	r3, r2
 800b904:	b29b      	uxth	r3, r3
 800b906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b90a:	bf28      	it	cs
 800b90c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b910:	b29a      	uxth	r2, r3
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	791a      	ldrb	r2, [r3, #4]
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	795a      	ldrb	r2, [r3, #5]
 800b922:	6a3b      	ldr	r3, [r7, #32]
 800b924:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	799a      	ldrb	r2, [r3, #6]
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	79da      	ldrb	r2, [r3, #7]
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	7a1a      	ldrb	r2, [r3, #8]
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b09      	cmp	r3, #9
 800b944:	d002      	beq.n	800b94c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	2209      	movs	r2, #9
 800b94a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b94c:	88fb      	ldrh	r3, [r7, #6]
 800b94e:	2b09      	cmp	r3, #9
 800b950:	f240 809d 	bls.w	800ba8e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800b954:	2309      	movs	r3, #9
 800b956:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b95c:	e081      	b.n	800ba62 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b95e:	f107 0316 	add.w	r3, r7, #22
 800b962:	4619      	mov	r1, r3
 800b964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b966:	f000 f9e8 	bl	800bd3a <USBH_GetNextDesc>
 800b96a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	2b04      	cmp	r3, #4
 800b972:	d176      	bne.n	800ba62 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b09      	cmp	r3, #9
 800b97a:	d002      	beq.n	800b982 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	2209      	movs	r2, #9
 800b980:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b986:	221a      	movs	r2, #26
 800b988:	fb02 f303 	mul.w	r3, r2, r3
 800b98c:	3308      	adds	r3, #8
 800b98e:	6a3a      	ldr	r2, [r7, #32]
 800b990:	4413      	add	r3, r2
 800b992:	3302      	adds	r3, #2
 800b994:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b998:	69f8      	ldr	r0, [r7, #28]
 800b99a:	f000 f87e 	bl	800ba9a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9a8:	e043      	b.n	800ba32 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b9aa:	f107 0316 	add.w	r3, r7, #22
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9b2:	f000 f9c2 	bl	800bd3a <USBH_GetNextDesc>
 800b9b6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d138      	bne.n	800ba32 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	795b      	ldrb	r3, [r3, #5]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d113      	bne.n	800b9f0 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d003      	beq.n	800b9d8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	799b      	ldrb	r3, [r3, #6]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d10b      	bne.n	800b9f0 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	79db      	ldrb	r3, [r3, #7]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <USBH_ParseCfgDesc+0x150>
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	d007      	beq.n	800b9f8 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	2209      	movs	r2, #9
 800b9ec:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b9ee:	e003      	b.n	800b9f8 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2207      	movs	r2, #7
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	e000      	b.n	800b9fa <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b9f8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba02:	3201      	adds	r2, #1
 800ba04:	00d2      	lsls	r2, r2, #3
 800ba06:	211a      	movs	r1, #26
 800ba08:	fb01 f303 	mul.w	r3, r1, r3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3308      	adds	r3, #8
 800ba10:	6a3a      	ldr	r2, [r7, #32]
 800ba12:	4413      	add	r3, r2
 800ba14:	3304      	adds	r3, #4
 800ba16:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ba18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1a:	69b9      	ldr	r1, [r7, #24]
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f870 	bl	800bb02 <USBH_ParseEPDesc>
 800ba22:	4603      	mov	r3, r0
 800ba24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ba28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	791b      	ldrb	r3, [r3, #4]
 800ba36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d204      	bcs.n	800ba48 <USBH_ParseCfgDesc+0x1a0>
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	885a      	ldrh	r2, [r3, #2]
 800ba42:	8afb      	ldrh	r3, [r7, #22]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d8b0      	bhi.n	800b9aa <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	791b      	ldrb	r3, [r3, #4]
 800ba4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d201      	bcs.n	800ba58 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e01c      	b.n	800ba92 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800ba58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d805      	bhi.n	800ba76 <USBH_ParseCfgDesc+0x1ce>
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	885a      	ldrh	r2, [r3, #2]
 800ba6e:	8afb      	ldrh	r3, [r7, #22]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	f63f af74 	bhi.w	800b95e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	791b      	ldrb	r3, [r3, #4]
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	bf28      	it	cs
 800ba7e:	2302      	movcs	r3, #2
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d201      	bcs.n	800ba8e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e001      	b.n	800ba92 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800ba8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3730      	adds	r7, #48	; 0x30
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	781a      	ldrb	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	785a      	ldrb	r2, [r3, #1]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	789a      	ldrb	r2, [r3, #2]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	78da      	ldrb	r2, [r3, #3]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	3304      	adds	r3, #4
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	bf28      	it	cs
 800bace:	2302      	movcs	r3, #2
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	795a      	ldrb	r2, [r3, #5]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	799a      	ldrb	r2, [r3, #6]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	79da      	ldrb	r2, [r3, #7]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	7a1a      	ldrb	r2, [r3, #8]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	721a      	strb	r2, [r3, #8]
}
 800baf6:	bf00      	nop
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b087      	sub	sp, #28
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	781a      	ldrb	r2, [r3, #0]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	785a      	ldrb	r2, [r3, #1]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	789a      	ldrb	r2, [r3, #2]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	78da      	ldrb	r2, [r3, #3]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3304      	adds	r3, #4
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3305      	adds	r3, #5
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	4313      	orrs	r3, r2
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	799a      	ldrb	r2, [r3, #6]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	889b      	ldrh	r3, [r3, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d009      	beq.n	800bb72 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bb62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb66:	d804      	bhi.n	800bb72 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb70:	d901      	bls.n	800bb76 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800bb72:	2303      	movs	r3, #3
 800bb74:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d136      	bne.n	800bbee <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	78db      	ldrb	r3, [r3, #3]
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d108      	bne.n	800bb9e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	889b      	ldrh	r3, [r3, #4]
 800bb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb94:	f240 8097 	bls.w	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	75fb      	strb	r3, [r7, #23]
 800bb9c:	e093      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	78db      	ldrb	r3, [r3, #3]
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d107      	bne.n	800bbba <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	889b      	ldrh	r3, [r3, #4]
 800bbae:	2b40      	cmp	r3, #64	; 0x40
 800bbb0:	f240 8089 	bls.w	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	75fb      	strb	r3, [r7, #23]
 800bbb8:	e085      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	78db      	ldrb	r3, [r3, #3]
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d005      	beq.n	800bbd2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	78db      	ldrb	r3, [r3, #3]
 800bbca:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d10a      	bne.n	800bbe8 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	799b      	ldrb	r3, [r3, #6]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <USBH_ParseEPDesc+0xe0>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	799b      	ldrb	r3, [r3, #6]
 800bbde:	2b10      	cmp	r3, #16
 800bbe0:	d970      	bls.n	800bcc4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bbe6:	e06d      	b.n	800bcc4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	75fb      	strb	r3, [r7, #23]
 800bbec:	e06b      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d13c      	bne.n	800bc72 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	78db      	ldrb	r3, [r3, #3]
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d005      	beq.n	800bc10 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	78db      	ldrb	r3, [r3, #3]
 800bc08:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d106      	bne.n	800bc1e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	889b      	ldrh	r3, [r3, #4]
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	d956      	bls.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc1c:	e053      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	78db      	ldrb	r3, [r3, #3]
 800bc22:	f003 0303 	and.w	r3, r3, #3
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d10e      	bne.n	800bc48 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	799b      	ldrb	r3, [r3, #6]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bc36:	2b10      	cmp	r3, #16
 800bc38:	d803      	bhi.n	800bc42 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bc3e:	2b40      	cmp	r3, #64	; 0x40
 800bc40:	d941      	bls.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc42:	2303      	movs	r3, #3
 800bc44:	75fb      	strb	r3, [r7, #23]
 800bc46:	e03e      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	78db      	ldrb	r3, [r3, #3]
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d10b      	bne.n	800bc6c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	799b      	ldrb	r3, [r3, #6]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <USBH_ParseEPDesc+0x164>
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	889b      	ldrh	r3, [r3, #4]
 800bc60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc64:	d32f      	bcc.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc66:	2303      	movs	r3, #3
 800bc68:	75fb      	strb	r3, [r7, #23]
 800bc6a:	e02c      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	75fb      	strb	r3, [r7, #23]
 800bc70:	e029      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d120      	bne.n	800bcbe <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	78db      	ldrb	r3, [r3, #3]
 800bc80:	f003 0303 	and.w	r3, r3, #3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d106      	bne.n	800bc96 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	889b      	ldrh	r3, [r3, #4]
 800bc8c:	2b08      	cmp	r3, #8
 800bc8e:	d01a      	beq.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bc90:	2303      	movs	r3, #3
 800bc92:	75fb      	strb	r3, [r7, #23]
 800bc94:	e017      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	78db      	ldrb	r3, [r3, #3]
 800bc9a:	f003 0303 	and.w	r3, r3, #3
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d10a      	bne.n	800bcb8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	799b      	ldrb	r3, [r3, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <USBH_ParseEPDesc+0x1b0>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	889b      	ldrh	r3, [r3, #4]
 800bcae:	2b08      	cmp	r3, #8
 800bcb0:	d909      	bls.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	75fb      	strb	r3, [r7, #23]
 800bcb6:	e006      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	75fb      	strb	r3, [r7, #23]
 800bcbc:	e003      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e000      	b.n	800bcc6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bcc4:	bf00      	nop
  }

  return status;
 800bcc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	371c      	adds	r7, #28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3301      	adds	r3, #1
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b03      	cmp	r3, #3
 800bcea:	d120      	bne.n	800bd2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	1e9a      	subs	r2, r3, #2
 800bcf2:	88fb      	ldrh	r3, [r7, #6]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	bf28      	it	cs
 800bcf8:	4613      	movcs	r3, r2
 800bcfa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3302      	adds	r3, #2
 800bd00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bd02:	2300      	movs	r3, #0
 800bd04:	82fb      	strh	r3, [r7, #22]
 800bd06:	e00b      	b.n	800bd20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bd08:	8afb      	ldrh	r3, [r7, #22]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3301      	adds	r3, #1
 800bd18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bd1a:	8afb      	ldrh	r3, [r7, #22]
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	82fb      	strh	r3, [r7, #22]
 800bd20:	8afa      	ldrh	r2, [r7, #22]
 800bd22:	8abb      	ldrh	r3, [r7, #20]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d3ef      	bcc.n	800bd08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
  }
}
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	881a      	ldrh	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	4413      	add	r3, r2
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd62:	68fb      	ldr	r3, [r7, #12]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	789b      	ldrb	r3, [r3, #2]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d002      	beq.n	800bd90 <USBH_CtlReq+0x20>
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d00f      	beq.n	800bdae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bd8e:	e027      	b.n	800bde0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	88fa      	ldrh	r2, [r7, #6]
 800bd9a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2202      	movs	r2, #2
 800bda6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	75fb      	strb	r3, [r7, #23]
      break;
 800bdac:	e018      	b.n	800bde0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f81c 	bl	800bdec <USBH_HandleControl>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <USBH_CtlReq+0x54>
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d106      	bne.n	800bdd2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	761a      	strb	r2, [r3, #24]
      break;
 800bdd0:	e005      	b.n	800bdde <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d102      	bne.n	800bdde <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	709a      	strb	r2, [r3, #2]
      break;
 800bdde:	bf00      	nop
  }
  return status;
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af02      	add	r7, sp, #8
 800bdf2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7e1b      	ldrb	r3, [r3, #24]
 800be00:	3b01      	subs	r3, #1
 800be02:	2b0a      	cmp	r3, #10
 800be04:	f200 8156 	bhi.w	800c0b4 <USBH_HandleControl+0x2c8>
 800be08:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <USBH_HandleControl+0x24>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be3d 	.word	0x0800be3d
 800be14:	0800be57 	.word	0x0800be57
 800be18:	0800bec1 	.word	0x0800bec1
 800be1c:	0800bee7 	.word	0x0800bee7
 800be20:	0800bf1f 	.word	0x0800bf1f
 800be24:	0800bf49 	.word	0x0800bf49
 800be28:	0800bf9b 	.word	0x0800bf9b
 800be2c:	0800bfbd 	.word	0x0800bfbd
 800be30:	0800bff9 	.word	0x0800bff9
 800be34:	0800c01f 	.word	0x0800c01f
 800be38:	0800c05d 	.word	0x0800c05d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f103 0110 	add.w	r1, r3, #16
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	795b      	ldrb	r3, [r3, #5]
 800be46:	461a      	mov	r2, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f943 	bl	800c0d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2202      	movs	r2, #2
 800be52:	761a      	strb	r2, [r3, #24]
      break;
 800be54:	e139      	b.n	800c0ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	795b      	ldrb	r3, [r3, #5]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f003 f8b7 	bl	800efd0 <USBH_LL_GetURBState>
 800be62:	4603      	mov	r3, r0
 800be64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800be66:	7bbb      	ldrb	r3, [r7, #14]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d11e      	bne.n	800beaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7c1b      	ldrb	r3, [r3, #16]
 800be70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	8adb      	ldrh	r3, [r3, #22]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800be7e:	7b7b      	ldrb	r3, [r7, #13]
 800be80:	2b80      	cmp	r3, #128	; 0x80
 800be82:	d103      	bne.n	800be8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2203      	movs	r2, #3
 800be88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be8a:	e115      	b.n	800c0b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2205      	movs	r2, #5
 800be90:	761a      	strb	r2, [r3, #24]
      break;
 800be92:	e111      	b.n	800c0b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800be94:	7b7b      	ldrb	r3, [r7, #13]
 800be96:	2b80      	cmp	r3, #128	; 0x80
 800be98:	d103      	bne.n	800bea2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2209      	movs	r2, #9
 800be9e:	761a      	strb	r2, [r3, #24]
      break;
 800bea0:	e10a      	b.n	800c0b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2207      	movs	r2, #7
 800bea6:	761a      	strb	r2, [r3, #24]
      break;
 800bea8:	e106      	b.n	800c0b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b04      	cmp	r3, #4
 800beae:	d003      	beq.n	800beb8 <USBH_HandleControl+0xcc>
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	f040 8100 	bne.w	800c0b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	220b      	movs	r2, #11
 800bebc:	761a      	strb	r2, [r3, #24]
      break;
 800bebe:	e0fb      	b.n	800c0b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6899      	ldr	r1, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	899a      	ldrh	r2, [r3, #12]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	791b      	ldrb	r3, [r3, #4]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f93a 	bl	800c152 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2204      	movs	r2, #4
 800bee2:	761a      	strb	r2, [r3, #24]
      break;
 800bee4:	e0f1      	b.n	800c0ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	791b      	ldrb	r3, [r3, #4]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f003 f86f 	bl	800efd0 <USBH_LL_GetURBState>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d102      	bne.n	800bf02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2209      	movs	r2, #9
 800bf00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d102      	bne.n	800bf0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf0c:	e0d6      	b.n	800c0bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bf0e:	7bbb      	ldrb	r3, [r7, #14]
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	f040 80d3 	bne.w	800c0bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	220b      	movs	r2, #11
 800bf1a:	761a      	strb	r2, [r3, #24]
      break;
 800bf1c:	e0ce      	b.n	800c0bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6899      	ldr	r1, [r3, #8]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	899a      	ldrh	r2, [r3, #12]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	795b      	ldrb	r3, [r3, #5]
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	9000      	str	r0, [sp, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f8ea 	bl	800c108 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2206      	movs	r2, #6
 800bf44:	761a      	strb	r2, [r3, #24]
      break;
 800bf46:	e0c0      	b.n	800c0ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	795b      	ldrb	r3, [r3, #5]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f003 f83e 	bl	800efd0 <USBH_LL_GetURBState>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d103      	bne.n	800bf66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2207      	movs	r2, #7
 800bf62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf64:	e0ac      	b.n	800c0c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	2b05      	cmp	r3, #5
 800bf6a:	d105      	bne.n	800bf78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	220c      	movs	r2, #12
 800bf70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bf72:	2303      	movs	r3, #3
 800bf74:	73fb      	strb	r3, [r7, #15]
      break;
 800bf76:	e0a3      	b.n	800c0c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d103      	bne.n	800bf86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2205      	movs	r2, #5
 800bf82:	761a      	strb	r2, [r3, #24]
      break;
 800bf84:	e09c      	b.n	800c0c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	f040 8099 	bne.w	800c0c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	220b      	movs	r2, #11
 800bf92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bf94:	2302      	movs	r3, #2
 800bf96:	73fb      	strb	r3, [r7, #15]
      break;
 800bf98:	e092      	b.n	800c0c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	791b      	ldrb	r3, [r3, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f8d5 	bl	800c152 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2208      	movs	r2, #8
 800bfb8:	761a      	strb	r2, [r3, #24]

      break;
 800bfba:	e086      	b.n	800c0ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	791b      	ldrb	r3, [r3, #4]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f003 f804 	bl	800efd0 <USBH_LL_GetURBState>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d105      	bne.n	800bfde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	220d      	movs	r2, #13
 800bfd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bfdc:	e072      	b.n	800c0c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d103      	bne.n	800bfec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	220b      	movs	r2, #11
 800bfe8:	761a      	strb	r2, [r3, #24]
      break;
 800bfea:	e06b      	b.n	800c0c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b05      	cmp	r3, #5
 800bff0:	d168      	bne.n	800c0c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bff2:	2303      	movs	r3, #3
 800bff4:	73fb      	strb	r3, [r7, #15]
      break;
 800bff6:	e065      	b.n	800c0c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	795b      	ldrb	r3, [r3, #5]
 800bffc:	2201      	movs	r2, #1
 800bffe:	9200      	str	r2, [sp, #0]
 800c000:	2200      	movs	r2, #0
 800c002:	2100      	movs	r1, #0
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f87f 	bl	800c108 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c010:	b29a      	uxth	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	220a      	movs	r2, #10
 800c01a:	761a      	strb	r2, [r3, #24]
      break;
 800c01c:	e055      	b.n	800c0ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	795b      	ldrb	r3, [r3, #5]
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f002 ffd3 	bl	800efd0 <USBH_LL_GetURBState>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d105      	bne.n	800c040 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	220d      	movs	r2, #13
 800c03c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c03e:	e043      	b.n	800c0c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d103      	bne.n	800c04e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2209      	movs	r2, #9
 800c04a:	761a      	strb	r2, [r3, #24]
      break;
 800c04c:	e03c      	b.n	800c0c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
 800c050:	2b04      	cmp	r3, #4
 800c052:	d139      	bne.n	800c0c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	220b      	movs	r2, #11
 800c058:	761a      	strb	r2, [r3, #24]
      break;
 800c05a:	e035      	b.n	800c0c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7e5b      	ldrb	r3, [r3, #25]
 800c060:	3301      	adds	r3, #1
 800c062:	b2da      	uxtb	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	765a      	strb	r2, [r3, #25]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	7e5b      	ldrb	r3, [r3, #25]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d806      	bhi.n	800c07e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c07c:	e025      	b.n	800c0ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c084:	2106      	movs	r1, #6
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	795b      	ldrb	r3, [r3, #5]
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f90c 	bl	800c2b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	791b      	ldrb	r3, [r3, #4]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f906 	bl	800c2b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b2:	e00a      	b.n	800c0ca <USBH_HandleControl+0x2de>

    default:
      break;
 800c0b4:	bf00      	nop
 800c0b6:	e008      	b.n	800c0ca <USBH_HandleControl+0x2de>
      break;
 800c0b8:	bf00      	nop
 800c0ba:	e006      	b.n	800c0ca <USBH_HandleControl+0x2de>
      break;
 800c0bc:	bf00      	nop
 800c0be:	e004      	b.n	800c0ca <USBH_HandleControl+0x2de>
      break;
 800c0c0:	bf00      	nop
 800c0c2:	e002      	b.n	800c0ca <USBH_HandleControl+0x2de>
      break;
 800c0c4:	bf00      	nop
 800c0c6:	e000      	b.n	800c0ca <USBH_HandleControl+0x2de>
      break;
 800c0c8:	bf00      	nop
  }

  return status;
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af04      	add	r7, sp, #16
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0e2:	79f9      	ldrb	r1, [r7, #7]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	2308      	movs	r3, #8
 800c0ea:	9302      	str	r3, [sp, #8]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f002 ff38 	bl	800ef6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af04      	add	r7, sp, #16
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4611      	mov	r1, r2
 800c114:	461a      	mov	r2, r3
 800c116:	460b      	mov	r3, r1
 800c118:	80fb      	strh	r3, [r7, #6]
 800c11a:	4613      	mov	r3, r2
 800c11c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c12c:	7979      	ldrb	r1, [r7, #5]
 800c12e:	7e3b      	ldrb	r3, [r7, #24]
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	88fb      	ldrh	r3, [r7, #6]
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	2301      	movs	r3, #1
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	2300      	movs	r3, #0
 800c140:	2200      	movs	r2, #0
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f002 ff13 	bl	800ef6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b088      	sub	sp, #32
 800c156:	af04      	add	r7, sp, #16
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	4611      	mov	r1, r2
 800c15e:	461a      	mov	r2, r3
 800c160:	460b      	mov	r3, r1
 800c162:	80fb      	strh	r3, [r7, #6]
 800c164:	4613      	mov	r3, r2
 800c166:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c168:	7979      	ldrb	r1, [r7, #5]
 800c16a:	2300      	movs	r3, #0
 800c16c:	9303      	str	r3, [sp, #12]
 800c16e:	88fb      	ldrh	r3, [r7, #6]
 800c170:	9302      	str	r3, [sp, #8]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	2301      	movs	r3, #1
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	2300      	movs	r3, #0
 800c17c:	2201      	movs	r2, #1
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f002 fef5 	bl	800ef6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c184:	2300      	movs	r3, #0

}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b088      	sub	sp, #32
 800c192:	af04      	add	r7, sp, #16
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	4611      	mov	r1, r2
 800c19a:	461a      	mov	r2, r3
 800c19c:	460b      	mov	r3, r1
 800c19e:	80fb      	strh	r3, [r7, #6]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1b2:	7979      	ldrb	r1, [r7, #5]
 800c1b4:	7e3b      	ldrb	r3, [r7, #24]
 800c1b6:	9303      	str	r3, [sp, #12]
 800c1b8:	88fb      	ldrh	r3, [r7, #6]
 800c1ba:	9302      	str	r3, [sp, #8]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f002 fed0 	bl	800ef6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b088      	sub	sp, #32
 800c1dc:	af04      	add	r7, sp, #16
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	80fb      	strh	r3, [r7, #6]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1ee:	7979      	ldrb	r1, [r7, #5]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	9303      	str	r3, [sp, #12]
 800c1f4:	88fb      	ldrh	r3, [r7, #6]
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	2302      	movs	r3, #2
 800c202:	2201      	movs	r2, #1
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f002 feb2 	bl	800ef6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af04      	add	r7, sp, #16
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	4608      	mov	r0, r1
 800c21e:	4611      	mov	r1, r2
 800c220:	461a      	mov	r2, r3
 800c222:	4603      	mov	r3, r0
 800c224:	70fb      	strb	r3, [r7, #3]
 800c226:	460b      	mov	r3, r1
 800c228:	70bb      	strb	r3, [r7, #2]
 800c22a:	4613      	mov	r3, r2
 800c22c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c22e:	7878      	ldrb	r0, [r7, #1]
 800c230:	78ba      	ldrb	r2, [r7, #2]
 800c232:	78f9      	ldrb	r1, [r7, #3]
 800c234:	8b3b      	ldrh	r3, [r7, #24]
 800c236:	9302      	str	r3, [sp, #8]
 800c238:	7d3b      	ldrb	r3, [r7, #20]
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	7c3b      	ldrb	r3, [r7, #16]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f002 fe45 	bl	800eed2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f002 fe64 	bl	800ef30 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f836 	bl	800c2f0 <USBH_GetFreePipe>
 800c284:	4603      	mov	r3, r0
 800c286:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c288:	89fb      	ldrh	r3, [r7, #14]
 800c28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00a      	beq.n	800c2a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	89fb      	ldrh	r3, [r7, #14]
 800c296:	f003 030f 	and.w	r3, r3, #15
 800c29a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	33a0      	adds	r3, #160	; 0xa0
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	440b      	add	r3, r1
 800c2a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c2a8:	89fb      	ldrh	r3, [r7, #14]
 800c2aa:	b2db      	uxtb	r3, r3
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	2b0f      	cmp	r3, #15
 800c2c4:	d80d      	bhi.n	800c2e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c2c6:	78fb      	ldrb	r3, [r7, #3]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	33a0      	adds	r3, #160	; 0xa0
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	78fb      	ldrb	r3, [r7, #3]
 800c2d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c2d8:	6879      	ldr	r1, [r7, #4]
 800c2da:	33a0      	adds	r3, #160	; 0xa0
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
 800c300:	e00f      	b.n	800c322 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	33a0      	adds	r3, #160	; 0xa0
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	4413      	add	r3, r2
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	e007      	b.n	800c32c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	3301      	adds	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2b0f      	cmp	r3, #15
 800c326:	d9ec      	bls.n	800c302 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c328:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	4a08      	ldr	r2, [pc, #32]	; (800c368 <disk_status+0x30>)
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	79fa      	ldrb	r2, [r7, #7]
 800c350:	4905      	ldr	r1, [pc, #20]	; (800c368 <disk_status+0x30>)
 800c352:	440a      	add	r2, r1
 800c354:	7a12      	ldrb	r2, [r2, #8]
 800c356:	4610      	mov	r0, r2
 800c358:	4798      	blx	r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	200054bc 	.word	0x200054bc

0800c36c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	4a0d      	ldr	r2, [pc, #52]	; (800c3b4 <disk_initialize+0x48>)
 800c37e:	5cd3      	ldrb	r3, [r2, r3]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d111      	bne.n	800c3a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c384:	79fb      	ldrb	r3, [r7, #7]
 800c386:	4a0b      	ldr	r2, [pc, #44]	; (800c3b4 <disk_initialize+0x48>)
 800c388:	2101      	movs	r1, #1
 800c38a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	4a09      	ldr	r2, [pc, #36]	; (800c3b4 <disk_initialize+0x48>)
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	79fa      	ldrb	r2, [r7, #7]
 800c39a:	4906      	ldr	r1, [pc, #24]	; (800c3b4 <disk_initialize+0x48>)
 800c39c:	440a      	add	r2, r1
 800c39e:	7a12      	ldrb	r2, [r2, #8]
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200054bc 	.word	0x200054bc

0800c3b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	4a0a      	ldr	r2, [pc, #40]	; (800c3f4 <disk_read+0x3c>)
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	689c      	ldr	r4, [r3, #8]
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
 800c3d6:	4a07      	ldr	r2, [pc, #28]	; (800c3f4 <disk_read+0x3c>)
 800c3d8:	4413      	add	r3, r2
 800c3da:	7a18      	ldrb	r0, [r3, #8]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	47a0      	blx	r4
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd90      	pop	{r4, r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	200054bc 	.word	0x200054bc

0800c3f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c3f8:	b590      	push	{r4, r7, lr}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	603b      	str	r3, [r7, #0]
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	4a0a      	ldr	r2, [pc, #40]	; (800c434 <disk_write+0x3c>)
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	68dc      	ldr	r4, [r3, #12]
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	4a07      	ldr	r2, [pc, #28]	; (800c434 <disk_write+0x3c>)
 800c418:	4413      	add	r3, r2
 800c41a:	7a18      	ldrb	r0, [r3, #8]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	68b9      	ldr	r1, [r7, #8]
 800c422:	47a0      	blx	r4
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]
  return res;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	371c      	adds	r7, #28
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd90      	pop	{r4, r7, pc}
 800c432:	bf00      	nop
 800c434:	200054bc 	.word	0x200054bc

0800c438 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	603a      	str	r2, [r7, #0]
 800c442:	71fb      	strb	r3, [r7, #7]
 800c444:	460b      	mov	r3, r1
 800c446:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	4a09      	ldr	r2, [pc, #36]	; (800c470 <disk_ioctl+0x38>)
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	79fa      	ldrb	r2, [r7, #7]
 800c456:	4906      	ldr	r1, [pc, #24]	; (800c470 <disk_ioctl+0x38>)
 800c458:	440a      	add	r2, r1
 800c45a:	7a10      	ldrb	r0, [r2, #8]
 800c45c:	79b9      	ldrb	r1, [r7, #6]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	4798      	blx	r3
 800c462:	4603      	mov	r3, r0
 800c464:	73fb      	strb	r3, [r7, #15]
  return res;
 800c466:	7bfb      	ldrb	r3, [r7, #15]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200054bc 	.word	0x200054bc

0800c474 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3301      	adds	r3, #1
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c484:	89fb      	ldrh	r3, [r7, #14]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	b21a      	sxth	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b21b      	sxth	r3, r3
 800c490:	4313      	orrs	r3, r2
 800c492:	b21b      	sxth	r3, r3
 800c494:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c496:	89fb      	ldrh	r3, [r7, #14]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3303      	adds	r3, #3
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	3202      	adds	r2, #2
 800c4bc:	7812      	ldrb	r2, [r2, #0]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	021b      	lsls	r3, r3, #8
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	7812      	ldrb	r2, [r2, #0]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	021b      	lsls	r3, r3, #8
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	7812      	ldrb	r2, [r2, #0]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
	return rv;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	887a      	ldrh	r2, [r7, #2]
 800c4fe:	b2d2      	uxtb	r2, r2
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	887b      	ldrh	r3, [r7, #2]
 800c504:	0a1b      	lsrs	r3, r3, #8
 800c506:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	607a      	str	r2, [r7, #4]
 800c50e:	887a      	ldrh	r2, [r7, #2]
 800c510:	b2d2      	uxtb	r2, r2
 800c512:	701a      	strb	r2, [r3, #0]
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	b2d2      	uxtb	r2, r2
 800c534:	701a      	strb	r2, [r3, #0]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	0a1b      	lsrs	r3, r3, #8
 800c53a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	1c5a      	adds	r2, r3, #1
 800c540:	607a      	str	r2, [r7, #4]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	b2d2      	uxtb	r2, r2
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	0a1b      	lsrs	r3, r3, #8
 800c54c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	607a      	str	r2, [r7, #4]
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	b2d2      	uxtb	r2, r2
 800c558:	701a      	strb	r2, [r3, #0]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	0a1b      	lsrs	r3, r3, #8
 800c55e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
}
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00d      	beq.n	800c5ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	1c53      	adds	r3, r2, #1
 800c596:	613b      	str	r3, [r7, #16]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	1c59      	adds	r1, r3, #1
 800c59c:	6179      	str	r1, [r7, #20]
 800c59e:	7812      	ldrb	r2, [r2, #0]
 800c5a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	607b      	str	r3, [r7, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1f1      	bne.n	800c592 <mem_cpy+0x1a>
	}
}
 800c5ae:	bf00      	nop
 800c5b0:	371c      	adds	r7, #28
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c5ba:	b480      	push	{r7}
 800c5bc:	b087      	sub	sp, #28
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	60f8      	str	r0, [r7, #12]
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	617a      	str	r2, [r7, #20]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	b2d2      	uxtb	r2, r2
 800c5d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	607b      	str	r3, [r7, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f3      	bne.n	800c5ca <mem_set+0x10>
}
 800c5e2:	bf00      	nop
 800c5e4:	bf00      	nop
 800c5e6:	371c      	adds	r7, #28
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c5f0:	b480      	push	{r7}
 800c5f2:	b089      	sub	sp, #36	; 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	61fb      	str	r3, [r7, #28]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	61fa      	str	r2, [r7, #28]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	4619      	mov	r1, r3
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	61ba      	str	r2, [r7, #24]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	1acb      	subs	r3, r1, r3
 800c61c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3b01      	subs	r3, #1
 800c622:	607b      	str	r3, [r7, #4]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <mem_cmp+0x40>
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d0eb      	beq.n	800c608 <mem_cmp+0x18>

	return r;
 800c630:	697b      	ldr	r3, [r7, #20]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3724      	adds	r7, #36	; 0x24
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c63e:	b480      	push	{r7}
 800c640:	b083      	sub	sp, #12
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c648:	e002      	b.n	800c650 <chk_chr+0x12>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3301      	adds	r3, #1
 800c64e:	607b      	str	r3, [r7, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d005      	beq.n	800c664 <chk_chr+0x26>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	461a      	mov	r2, r3
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	4293      	cmp	r3, r2
 800c662:	d1f2      	bne.n	800c64a <chk_chr+0xc>
	return *str;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	781b      	ldrb	r3, [r3, #0]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c67e:	2300      	movs	r3, #0
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	60fb      	str	r3, [r7, #12]
 800c686:	e029      	b.n	800c6dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c688:	4a27      	ldr	r2, [pc, #156]	; (800c728 <chk_lock+0xb4>)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	011b      	lsls	r3, r3, #4
 800c68e:	4413      	add	r3, r2
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d01d      	beq.n	800c6d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c696:	4a24      	ldr	r2, [pc, #144]	; (800c728 <chk_lock+0xb4>)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	011b      	lsls	r3, r3, #4
 800c69c:	4413      	add	r3, r2
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d116      	bne.n	800c6d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c6a8:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <chk_lock+0xb4>)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d10c      	bne.n	800c6d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6bc:	4a1a      	ldr	r2, [pc, #104]	; (800c728 <chk_lock+0xb4>)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d102      	bne.n	800c6d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6d0:	e007      	b.n	800c6e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d9d2      	bls.n	800c688 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d109      	bne.n	800c6fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d102      	bne.n	800c6f4 <chk_lock+0x80>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d101      	bne.n	800c6f8 <chk_lock+0x84>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e010      	b.n	800c71a <chk_lock+0xa6>
 800c6f8:	2312      	movs	r3, #18
 800c6fa:	e00e      	b.n	800c71a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d108      	bne.n	800c714 <chk_lock+0xa0>
 800c702:	4a09      	ldr	r2, [pc, #36]	; (800c728 <chk_lock+0xb4>)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	011b      	lsls	r3, r3, #4
 800c708:	4413      	add	r3, r2
 800c70a:	330c      	adds	r3, #12
 800c70c:	881b      	ldrh	r3, [r3, #0]
 800c70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c712:	d101      	bne.n	800c718 <chk_lock+0xa4>
 800c714:	2310      	movs	r3, #16
 800c716:	e000      	b.n	800c71a <chk_lock+0xa6>
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	2000549c 	.word	0x2000549c

0800c72c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c732:	2300      	movs	r3, #0
 800c734:	607b      	str	r3, [r7, #4]
 800c736:	e002      	b.n	800c73e <enq_lock+0x12>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3301      	adds	r3, #1
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d806      	bhi.n	800c752 <enq_lock+0x26>
 800c744:	4a09      	ldr	r2, [pc, #36]	; (800c76c <enq_lock+0x40>)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	4413      	add	r3, r2
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1f2      	bne.n	800c738 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b02      	cmp	r3, #2
 800c756:	bf14      	ite	ne
 800c758:	2301      	movne	r3, #1
 800c75a:	2300      	moveq	r3, #0
 800c75c:	b2db      	uxtb	r3, r3
}
 800c75e:	4618      	mov	r0, r3
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	2000549c 	.word	0x2000549c

0800c770 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	e01f      	b.n	800c7c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c780:	4a41      	ldr	r2, [pc, #260]	; (800c888 <inc_lock+0x118>)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	011b      	lsls	r3, r3, #4
 800c786:	4413      	add	r3, r2
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d113      	bne.n	800c7ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c792:	4a3d      	ldr	r2, [pc, #244]	; (800c888 <inc_lock+0x118>)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	4413      	add	r3, r2
 800c79a:	3304      	adds	r3, #4
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d109      	bne.n	800c7ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c7a6:	4a38      	ldr	r2, [pc, #224]	; (800c888 <inc_lock+0x118>)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d006      	beq.n	800c7c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d9dc      	bls.n	800c780 <inc_lock+0x10>
 800c7c6:	e000      	b.n	800c7ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c7c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d132      	bne.n	800c836 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	e002      	b.n	800c7dc <inc_lock+0x6c>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d806      	bhi.n	800c7f0 <inc_lock+0x80>
 800c7e2:	4a29      	ldr	r2, [pc, #164]	; (800c888 <inc_lock+0x118>)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	011b      	lsls	r3, r3, #4
 800c7e8:	4413      	add	r3, r2
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1f2      	bne.n	800c7d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d101      	bne.n	800c7fa <inc_lock+0x8a>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e040      	b.n	800c87c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4922      	ldr	r1, [pc, #136]	; (800c888 <inc_lock+0x118>)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	440b      	add	r3, r1
 800c806:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	689a      	ldr	r2, [r3, #8]
 800c80c:	491e      	ldr	r1, [pc, #120]	; (800c888 <inc_lock+0x118>)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	011b      	lsls	r3, r3, #4
 800c812:	440b      	add	r3, r1
 800c814:	3304      	adds	r3, #4
 800c816:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	695a      	ldr	r2, [r3, #20]
 800c81c:	491a      	ldr	r1, [pc, #104]	; (800c888 <inc_lock+0x118>)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	011b      	lsls	r3, r3, #4
 800c822:	440b      	add	r3, r1
 800c824:	3308      	adds	r3, #8
 800c826:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c828:	4a17      	ldr	r2, [pc, #92]	; (800c888 <inc_lock+0x118>)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	011b      	lsls	r3, r3, #4
 800c82e:	4413      	add	r3, r2
 800c830:	330c      	adds	r3, #12
 800c832:	2200      	movs	r2, #0
 800c834:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d009      	beq.n	800c850 <inc_lock+0xe0>
 800c83c:	4a12      	ldr	r2, [pc, #72]	; (800c888 <inc_lock+0x118>)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	011b      	lsls	r3, r3, #4
 800c842:	4413      	add	r3, r2
 800c844:	330c      	adds	r3, #12
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <inc_lock+0xe0>
 800c84c:	2300      	movs	r3, #0
 800c84e:	e015      	b.n	800c87c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d108      	bne.n	800c868 <inc_lock+0xf8>
 800c856:	4a0c      	ldr	r2, [pc, #48]	; (800c888 <inc_lock+0x118>)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	011b      	lsls	r3, r3, #4
 800c85c:	4413      	add	r3, r2
 800c85e:	330c      	adds	r3, #12
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	b29a      	uxth	r2, r3
 800c866:	e001      	b.n	800c86c <inc_lock+0xfc>
 800c868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c86c:	4906      	ldr	r1, [pc, #24]	; (800c888 <inc_lock+0x118>)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	011b      	lsls	r3, r3, #4
 800c872:	440b      	add	r3, r1
 800c874:	330c      	adds	r3, #12
 800c876:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3301      	adds	r3, #1
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	2000549c 	.word	0x2000549c

0800c88c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3b01      	subs	r3, #1
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d825      	bhi.n	800c8ec <dec_lock+0x60>
		n = Files[i].ctr;
 800c8a0:	4a17      	ldr	r2, [pc, #92]	; (800c900 <dec_lock+0x74>)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	4413      	add	r3, r2
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c8ae:	89fb      	ldrh	r3, [r7, #14]
 800c8b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b4:	d101      	bne.n	800c8ba <dec_lock+0x2e>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c8ba:	89fb      	ldrh	r3, [r7, #14]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <dec_lock+0x3a>
 800c8c0:	89fb      	ldrh	r3, [r7, #14]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c8c6:	4a0e      	ldr	r2, [pc, #56]	; (800c900 <dec_lock+0x74>)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	011b      	lsls	r3, r3, #4
 800c8cc:	4413      	add	r3, r2
 800c8ce:	330c      	adds	r3, #12
 800c8d0:	89fa      	ldrh	r2, [r7, #14]
 800c8d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c8d4:	89fb      	ldrh	r3, [r7, #14]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d105      	bne.n	800c8e6 <dec_lock+0x5a>
 800c8da:	4a09      	ldr	r2, [pc, #36]	; (800c900 <dec_lock+0x74>)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	4413      	add	r3, r2
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	737b      	strb	r3, [r7, #13]
 800c8ea:	e001      	b.n	800c8f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c8f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	2000549c 	.word	0x2000549c

0800c904 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e010      	b.n	800c934 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c912:	4a0d      	ldr	r2, [pc, #52]	; (800c948 <clear_lock+0x44>)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	4413      	add	r3, r2
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d105      	bne.n	800c92e <clear_lock+0x2a>
 800c922:	4a09      	ldr	r2, [pc, #36]	; (800c948 <clear_lock+0x44>)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	4413      	add	r3, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3301      	adds	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d9eb      	bls.n	800c912 <clear_lock+0xe>
	}
}
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	2000549c 	.word	0x2000549c

0800c94c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	78db      	ldrb	r3, [r3, #3]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d034      	beq.n	800c9ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	7858      	ldrb	r0, [r3, #1]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c970:	2301      	movs	r3, #1
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	f7ff fd40 	bl	800c3f8 <disk_write>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d002      	beq.n	800c984 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c97e:	2301      	movs	r3, #1
 800c980:	73fb      	strb	r3, [r7, #15]
 800c982:	e022      	b.n	800c9ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	1ad2      	subs	r2, r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	429a      	cmp	r2, r3
 800c998:	d217      	bcs.n	800c9ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	789b      	ldrb	r3, [r3, #2]
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	e010      	b.n	800c9c4 <sync_window+0x78>
					wsect += fs->fsize;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	7858      	ldrb	r0, [r3, #1]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	f7ff fd1d 	bl	800c3f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	613b      	str	r3, [r7, #16]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d8eb      	bhi.n	800c9a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d01b      	beq.n	800ca24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff ffad 	bl	800c94c <sync_window>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d113      	bne.n	800ca24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7858      	ldrb	r0, [r3, #1]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca06:	2301      	movs	r3, #1
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	f7ff fcd5 	bl	800c3b8 <disk_read>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295
 800ca18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff ff87 	bl	800c94c <sync_window>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d158      	bne.n	800cafa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d148      	bne.n	800cae2 <sync_fs+0xb2>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	791b      	ldrb	r3, [r3, #4]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d144      	bne.n	800cae2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3330      	adds	r3, #48	; 0x30
 800ca5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca60:	2100      	movs	r1, #0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fda9 	bl	800c5ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3330      	adds	r3, #48	; 0x30
 800ca6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff fd38 	bl	800c4ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3330      	adds	r3, #48	; 0x30
 800ca7e:	4921      	ldr	r1, [pc, #132]	; (800cb04 <sync_fs+0xd4>)
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fd4d 	bl	800c520 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	3330      	adds	r3, #48	; 0x30
 800ca8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca8e:	491e      	ldr	r1, [pc, #120]	; (800cb08 <sync_fs+0xd8>)
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff fd45 	bl	800c520 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3330      	adds	r3, #48	; 0x30
 800ca9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	4619      	mov	r1, r3
 800caa4:	4610      	mov	r0, r2
 800caa6:	f7ff fd3b 	bl	800c520 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3330      	adds	r3, #48	; 0x30
 800caae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7ff fd31 	bl	800c520 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	69db      	ldr	r3, [r3, #28]
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7858      	ldrb	r0, [r3, #1]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad6:	2301      	movs	r3, #1
 800cad8:	f7ff fc8e 	bl	800c3f8 <disk_write>
			fs->fsi_flag = 0;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	2200      	movs	r2, #0
 800cae8:	2100      	movs	r1, #0
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff fca4 	bl	800c438 <disk_ioctl>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <sync_fs+0xca>
 800caf6:	2301      	movs	r3, #1
 800caf8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	41615252 	.word	0x41615252
 800cb08:	61417272 	.word	0x61417272

0800cb0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	3b02      	subs	r3, #2
 800cb1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	3b02      	subs	r3, #2
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d301      	bcc.n	800cb2c <clust2sect+0x20>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e008      	b.n	800cb3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	895b      	ldrh	r3, [r3, #10]
 800cb30:	461a      	mov	r2, r3
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	fb03 f202 	mul.w	r2, r3, r2
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3c:	4413      	add	r3, r2
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b086      	sub	sp, #24
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d904      	bls.n	800cb6a <get_fat+0x20>
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d302      	bcc.n	800cb70 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	e08f      	b.n	800cc90 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cb70:	f04f 33ff 	mov.w	r3, #4294967295
 800cb74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d062      	beq.n	800cc44 <get_fat+0xfa>
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	dc7c      	bgt.n	800cc7c <get_fat+0x132>
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d002      	beq.n	800cb8c <get_fat+0x42>
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d042      	beq.n	800cc10 <get_fat+0xc6>
 800cb8a:	e077      	b.n	800cc7c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4413      	add	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	0a5b      	lsrs	r3, r3, #9
 800cba2:	4413      	add	r3, r2
 800cba4:	4619      	mov	r1, r3
 800cba6:	6938      	ldr	r0, [r7, #16]
 800cba8:	f7ff ff14 	bl	800c9d4 <move_window>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d167      	bne.n	800cc82 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	1c5a      	adds	r2, r3, #1
 800cbb6:	60fa      	str	r2, [r7, #12]
 800cbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbc4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	6a1a      	ldr	r2, [r3, #32]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	0a5b      	lsrs	r3, r3, #9
 800cbce:	4413      	add	r3, r2
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6938      	ldr	r0, [r7, #16]
 800cbd4:	f7ff fefe 	bl	800c9d4 <move_window>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d153      	bne.n	800cc86 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	461a      	mov	r2, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <get_fat+0xbc>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	091b      	lsrs	r3, r3, #4
 800cc04:	e002      	b.n	800cc0c <get_fat+0xc2>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc0c:	617b      	str	r3, [r7, #20]
			break;
 800cc0e:	e03f      	b.n	800cc90 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	6a1a      	ldr	r2, [r3, #32]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	0a1b      	lsrs	r3, r3, #8
 800cc18:	4413      	add	r3, r2
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6938      	ldr	r0, [r7, #16]
 800cc1e:	f7ff fed9 	bl	800c9d4 <move_window>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d130      	bne.n	800cc8a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cc36:	4413      	add	r3, r2
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff fc1b 	bl	800c474 <ld_word>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	617b      	str	r3, [r7, #20]
			break;
 800cc42:	e025      	b.n	800cc90 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	6a1a      	ldr	r2, [r3, #32]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	09db      	lsrs	r3, r3, #7
 800cc4c:	4413      	add	r3, r2
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6938      	ldr	r0, [r7, #16]
 800cc52:	f7ff febf 	bl	800c9d4 <move_window>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d118      	bne.n	800cc8e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cc6a:	4413      	add	r3, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fc19 	bl	800c4a4 <ld_dword>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc78:	617b      	str	r3, [r7, #20]
			break;
 800cc7a:	e009      	b.n	800cc90 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	e006      	b.n	800cc90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc82:	bf00      	nop
 800cc84:	e004      	b.n	800cc90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc86:	bf00      	nop
 800cc88:	e002      	b.n	800cc90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc8a:	bf00      	nop
 800cc8c:	e000      	b.n	800cc90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc8e:	bf00      	nop
		}
	}

	return val;
 800cc90:	697b      	ldr	r3, [r7, #20]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cc9a:	b590      	push	{r4, r7, lr}
 800cc9c:	b089      	sub	sp, #36	; 0x24
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cca6:	2302      	movs	r3, #2
 800cca8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	f240 80d9 	bls.w	800ce64 <put_fat+0x1ca>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	f080 80d3 	bcs.w	800ce64 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	f000 8096 	beq.w	800cdf4 <put_fat+0x15a>
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	f300 80cb 	bgt.w	800ce64 <put_fat+0x1ca>
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d002      	beq.n	800ccd8 <put_fat+0x3e>
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d06e      	beq.n	800cdb4 <put_fat+0x11a>
 800ccd6:	e0c5      	b.n	800ce64 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	085b      	lsrs	r3, r3, #1
 800cce0:	69ba      	ldr	r2, [r7, #24]
 800cce2:	4413      	add	r3, r2
 800cce4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a1a      	ldr	r2, [r3, #32]
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	0a5b      	lsrs	r3, r3, #9
 800ccee:	4413      	add	r3, r2
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fe6e 	bl	800c9d4 <move_window>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccfc:	7ffb      	ldrb	r3, [r7, #31]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f040 80a9 	bne.w	800ce56 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	1c59      	adds	r1, r3, #1
 800cd0e:	61b9      	str	r1, [r7, #24]
 800cd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd14:	4413      	add	r3, r2
 800cd16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00d      	beq.n	800cd3e <put_fat+0xa4>
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b25b      	sxtb	r3, r3
 800cd28:	f003 030f 	and.w	r3, r3, #15
 800cd2c:	b25a      	sxtb	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	011b      	lsls	r3, r3, #4
 800cd34:	b25b      	sxtb	r3, r3
 800cd36:	4313      	orrs	r3, r2
 800cd38:	b25b      	sxtb	r3, r3
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	e001      	b.n	800cd42 <put_fat+0xa8>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6a1a      	ldr	r2, [r3, #32]
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	0a5b      	lsrs	r3, r3, #9
 800cd54:	4413      	add	r3, r2
 800cd56:	4619      	mov	r1, r3
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f7ff fe3b 	bl	800c9d4 <move_window>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd62:	7ffb      	ldrb	r3, [r7, #31]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d178      	bne.n	800ce5a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd74:	4413      	add	r3, r2
 800cd76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <put_fat+0xf0>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	091b      	lsrs	r3, r3, #4
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	e00e      	b.n	800cda8 <put_fat+0x10e>
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	b25b      	sxtb	r3, r3
 800cd90:	f023 030f 	bic.w	r3, r3, #15
 800cd94:	b25a      	sxtb	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	0a1b      	lsrs	r3, r3, #8
 800cd9a:	b25b      	sxtb	r3, r3
 800cd9c:	f003 030f 	and.w	r3, r3, #15
 800cda0:	b25b      	sxtb	r3, r3
 800cda2:	4313      	orrs	r3, r2
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	70da      	strb	r2, [r3, #3]
			break;
 800cdb2:	e057      	b.n	800ce64 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6a1a      	ldr	r2, [r3, #32]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	0a1b      	lsrs	r3, r3, #8
 800cdbc:	4413      	add	r3, r2
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff fe07 	bl	800c9d4 <move_window>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdca:	7ffb      	ldrb	r3, [r7, #31]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d146      	bne.n	800ce5e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cdde:	4413      	add	r3, r2
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	b292      	uxth	r2, r2
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fb7f 	bl	800c4ea <st_word>
			fs->wflag = 1;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	70da      	strb	r2, [r3, #3]
			break;
 800cdf2:	e037      	b.n	800ce64 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a1a      	ldr	r2, [r3, #32]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	09db      	lsrs	r3, r3, #7
 800cdfc:	4413      	add	r3, r2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f7ff fde7 	bl	800c9d4 <move_window>
 800ce06:	4603      	mov	r3, r0
 800ce08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce0a:	7ffb      	ldrb	r3, [r7, #31]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d128      	bne.n	800ce62 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ce24:	4413      	add	r3, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fb3c 	bl	800c4a4 <ld_dword>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ce32:	4323      	orrs	r3, r4
 800ce34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ce44:	4413      	add	r3, r2
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fb69 	bl	800c520 <st_dword>
			fs->wflag = 1;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2201      	movs	r2, #1
 800ce52:	70da      	strb	r2, [r3, #3]
			break;
 800ce54:	e006      	b.n	800ce64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce56:	bf00      	nop
 800ce58:	e004      	b.n	800ce64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce5a:	bf00      	nop
 800ce5c:	e002      	b.n	800ce64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce5e:	bf00      	nop
 800ce60:	e000      	b.n	800ce64 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce62:	bf00      	nop
		}
	}
	return res;
 800ce64:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3724      	adds	r7, #36	; 0x24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd90      	pop	{r4, r7, pc}

0800ce6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b088      	sub	sp, #32
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d904      	bls.n	800ce94 <remove_chain+0x26>
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	695b      	ldr	r3, [r3, #20]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d301      	bcc.n	800ce98 <remove_chain+0x2a>
 800ce94:	2302      	movs	r3, #2
 800ce96:	e04b      	b.n	800cf30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00c      	beq.n	800ceb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	6879      	ldr	r1, [r7, #4]
 800cea4:	69b8      	ldr	r0, [r7, #24]
 800cea6:	f7ff fef8 	bl	800cc9a <put_fat>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ceae:	7ffb      	ldrb	r3, [r7, #31]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <remove_chain+0x4a>
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
 800ceb6:	e03b      	b.n	800cf30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ceb8:	68b9      	ldr	r1, [r7, #8]
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f7ff fe45 	bl	800cb4a <get_fat>
 800cec0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d031      	beq.n	800cf2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d101      	bne.n	800ced2 <remove_chain+0x64>
 800cece:	2302      	movs	r3, #2
 800ced0:	e02e      	b.n	800cf30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced8:	d101      	bne.n	800cede <remove_chain+0x70>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e028      	b.n	800cf30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cede:	2200      	movs	r2, #0
 800cee0:	68b9      	ldr	r1, [r7, #8]
 800cee2:	69b8      	ldr	r0, [r7, #24]
 800cee4:	f7ff fed9 	bl	800cc9a <put_fat>
 800cee8:	4603      	mov	r3, r0
 800ceea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ceec:	7ffb      	ldrb	r3, [r7, #31]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <remove_chain+0x88>
 800cef2:	7ffb      	ldrb	r3, [r7, #31]
 800cef4:	e01c      	b.n	800cf30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	3b02      	subs	r3, #2
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d20b      	bcs.n	800cf1c <remove_chain+0xae>
			fs->free_clst++;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	791b      	ldrb	r3, [r3, #4]
 800cf12:	f043 0301 	orr.w	r3, r3, #1
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d3c6      	bcc.n	800ceb8 <remove_chain+0x4a>
 800cf2a:	e000      	b.n	800cf2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cf2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3720      	adds	r7, #32
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10d      	bne.n	800cf6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d004      	beq.n	800cf64 <create_chain+0x2c>
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d31b      	bcc.n	800cf9c <create_chain+0x64>
 800cf64:	2301      	movs	r3, #1
 800cf66:	61bb      	str	r3, [r7, #24]
 800cf68:	e018      	b.n	800cf9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff fdec 	bl	800cb4a <get_fat>
 800cf72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d801      	bhi.n	800cf7e <create_chain+0x46>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e070      	b.n	800d060 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d101      	bne.n	800cf8a <create_chain+0x52>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	e06a      	b.n	800d060 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d201      	bcs.n	800cf98 <create_chain+0x60>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	e063      	b.n	800d060 <create_chain+0x128>
		scl = clst;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	695b      	ldr	r3, [r3, #20]
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d307      	bcc.n	800cfc0 <create_chain+0x88>
				ncl = 2;
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d901      	bls.n	800cfc0 <create_chain+0x88>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e04f      	b.n	800d060 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cfc0:	69f9      	ldr	r1, [r7, #28]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7ff fdc1 	bl	800cb4a <get_fat>
 800cfc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00e      	beq.n	800cfee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d003      	beq.n	800cfde <create_chain+0xa6>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d101      	bne.n	800cfe2 <create_chain+0xaa>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	e03e      	b.n	800d060 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cfe2:	69fa      	ldr	r2, [r7, #28]
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d1da      	bne.n	800cfa0 <create_chain+0x68>
 800cfea:	2300      	movs	r3, #0
 800cfec:	e038      	b.n	800d060 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cfee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cff0:	f04f 32ff 	mov.w	r2, #4294967295
 800cff4:	69f9      	ldr	r1, [r7, #28]
 800cff6:	6938      	ldr	r0, [r7, #16]
 800cff8:	f7ff fe4f 	bl	800cc9a <put_fat>
 800cffc:	4603      	mov	r3, r0
 800cffe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d000:	7dfb      	ldrb	r3, [r7, #23]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d109      	bne.n	800d01a <create_chain+0xe2>
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d006      	beq.n	800d01a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d00c:	69fa      	ldr	r2, [r7, #28]
 800d00e:	6839      	ldr	r1, [r7, #0]
 800d010:	6938      	ldr	r0, [r7, #16]
 800d012:	f7ff fe42 	bl	800cc9a <put_fat>
 800d016:	4603      	mov	r3, r0
 800d018:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d116      	bne.n	800d04e <create_chain+0x116>
		fs->last_clst = ncl;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	691a      	ldr	r2, [r3, #16]
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	3b02      	subs	r3, #2
 800d030:	429a      	cmp	r2, r3
 800d032:	d804      	bhi.n	800d03e <create_chain+0x106>
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	1e5a      	subs	r2, r3, #1
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	791b      	ldrb	r3, [r3, #4]
 800d042:	f043 0301 	orr.w	r3, r3, #1
 800d046:	b2da      	uxtb	r2, r3
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	711a      	strb	r2, [r3, #4]
 800d04c:	e007      	b.n	800d05e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d102      	bne.n	800d05a <create_chain+0x122>
 800d054:	f04f 33ff 	mov.w	r3, #4294967295
 800d058:	e000      	b.n	800d05c <create_chain+0x124>
 800d05a:	2301      	movs	r3, #1
 800d05c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d05e:	69fb      	ldr	r3, [r7, #28]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d068:	b480      	push	{r7}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07c:	3304      	adds	r3, #4
 800d07e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	0a5b      	lsrs	r3, r3, #9
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	8952      	ldrh	r2, [r2, #10]
 800d088:	fbb3 f3f2 	udiv	r3, r3, r2
 800d08c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1d1a      	adds	r2, r3, #4
 800d092:	613a      	str	r2, [r7, #16]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <clmt_clust+0x3a>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e010      	b.n	800d0c4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d307      	bcc.n	800d0ba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0b8:	e7e9      	b.n	800d08e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d0ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	4413      	add	r3, r2
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	371c      	adds	r7, #28
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0e6:	d204      	bcs.n	800d0f2 <dir_sdi+0x22>
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f003 031f 	and.w	r3, r3, #31
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e063      	b.n	800d1be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d106      	bne.n	800d116 <dir_sdi+0x46>
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d902      	bls.n	800d116 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10c      	bne.n	800d136 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	095b      	lsrs	r3, r3, #5
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	8912      	ldrh	r2, [r2, #8]
 800d124:	4293      	cmp	r3, r2
 800d126:	d301      	bcc.n	800d12c <dir_sdi+0x5c>
 800d128:	2302      	movs	r3, #2
 800d12a:	e048      	b.n	800d1be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	61da      	str	r2, [r3, #28]
 800d134:	e029      	b.n	800d18a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	895b      	ldrh	r3, [r3, #10]
 800d13a:	025b      	lsls	r3, r3, #9
 800d13c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d13e:	e019      	b.n	800d174 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6979      	ldr	r1, [r7, #20]
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff fd00 	bl	800cb4a <get_fat>
 800d14a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d152:	d101      	bne.n	800d158 <dir_sdi+0x88>
 800d154:	2301      	movs	r3, #1
 800d156:	e032      	b.n	800d1be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d904      	bls.n	800d168 <dir_sdi+0x98>
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	429a      	cmp	r2, r3
 800d166:	d301      	bcc.n	800d16c <dir_sdi+0x9c>
 800d168:	2302      	movs	r3, #2
 800d16a:	e028      	b.n	800d1be <dir_sdi+0xee>
			ofs -= csz;
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d2e1      	bcs.n	800d140 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d17c:	6979      	ldr	r1, [r7, #20]
 800d17e:	6938      	ldr	r0, [r7, #16]
 800d180:	f7ff fcc4 	bl	800cb0c <clust2sect>
 800d184:	4602      	mov	r2, r0
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <dir_sdi+0xcc>
 800d198:	2302      	movs	r3, #2
 800d19a:	e010      	b.n	800d1be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	69da      	ldr	r2, [r3, #28]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	0a5b      	lsrs	r3, r3, #9
 800d1a4:	441a      	add	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b6:	441a      	add	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b086      	sub	sp, #24
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	3320      	adds	r3, #32
 800d1dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <dir_next+0x28>
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1ec:	d301      	bcc.n	800d1f2 <dir_next+0x2c>
 800d1ee:	2304      	movs	r3, #4
 800d1f0:	e0aa      	b.n	800d348 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f040 8098 	bne.w	800d32e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	69db      	ldr	r3, [r3, #28]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10b      	bne.n	800d228 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	095b      	lsrs	r3, r3, #5
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	8912      	ldrh	r2, [r2, #8]
 800d218:	4293      	cmp	r3, r2
 800d21a:	f0c0 8088 	bcc.w	800d32e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	61da      	str	r2, [r3, #28]
 800d224:	2304      	movs	r3, #4
 800d226:	e08f      	b.n	800d348 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	0a5b      	lsrs	r3, r3, #9
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	8952      	ldrh	r2, [r2, #10]
 800d230:	3a01      	subs	r2, #1
 800d232:	4013      	ands	r3, r2
 800d234:	2b00      	cmp	r3, #0
 800d236:	d17a      	bne.n	800d32e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	4619      	mov	r1, r3
 800d240:	4610      	mov	r0, r2
 800d242:	f7ff fc82 	bl	800cb4a <get_fat>
 800d246:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d801      	bhi.n	800d252 <dir_next+0x8c>
 800d24e:	2302      	movs	r3, #2
 800d250:	e07a      	b.n	800d348 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d258:	d101      	bne.n	800d25e <dir_next+0x98>
 800d25a:	2301      	movs	r3, #1
 800d25c:	e074      	b.n	800d348 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	697a      	ldr	r2, [r7, #20]
 800d264:	429a      	cmp	r2, r3
 800d266:	d358      	bcc.n	800d31a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d104      	bne.n	800d278 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	61da      	str	r2, [r3, #28]
 800d274:	2304      	movs	r3, #4
 800d276:	e067      	b.n	800d348 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7ff fe59 	bl	800cf38 <create_chain>
 800d286:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <dir_next+0xcc>
 800d28e:	2307      	movs	r3, #7
 800d290:	e05a      	b.n	800d348 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d101      	bne.n	800d29c <dir_next+0xd6>
 800d298:	2302      	movs	r3, #2
 800d29a:	e055      	b.n	800d348 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d101      	bne.n	800d2a8 <dir_next+0xe2>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e04f      	b.n	800d348 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff fb4f 	bl	800c94c <sync_window>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <dir_next+0xf2>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e047      	b.n	800d348 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3330      	adds	r3, #48	; 0x30
 800d2bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7ff f979 	bl	800c5ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	613b      	str	r3, [r7, #16]
 800d2cc:	6979      	ldr	r1, [r7, #20]
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7ff fc1c 	bl	800cb0c <clust2sect>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d2da:	e012      	b.n	800d302 <dir_next+0x13c>
						fs->wflag = 1;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f7ff fb32 	bl	800c94c <sync_window>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <dir_next+0x12c>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e02a      	b.n	800d348 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	62da      	str	r2, [r3, #44]	; 0x2c
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	895b      	ldrh	r3, [r3, #10]
 800d306:	461a      	mov	r2, r3
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d3e6      	bcc.n	800d2dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	1ad2      	subs	r2, r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d320:	6979      	ldr	r1, [r7, #20]
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff fbf2 	bl	800cb0c <clust2sect>
 800d328:	4602      	mov	r2, r0
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d340:	441a      	add	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d360:	2100      	movs	r1, #0
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7ff feb4 	bl	800d0d0 <dir_sdi>
 800d368:	4603      	mov	r3, r0
 800d36a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d12b      	bne.n	800d3ca <dir_alloc+0x7a>
		n = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	4619      	mov	r1, r3
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7ff fb29 	bl	800c9d4 <move_window>
 800d382:	4603      	mov	r3, r0
 800d384:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d386:	7dfb      	ldrb	r3, [r7, #23]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d11d      	bne.n	800d3c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2be5      	cmp	r3, #229	; 0xe5
 800d394:	d004      	beq.n	800d3a0 <dir_alloc+0x50>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d107      	bne.n	800d3b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	613b      	str	r3, [r7, #16]
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d102      	bne.n	800d3b4 <dir_alloc+0x64>
 800d3ae:	e00c      	b.n	800d3ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff ff05 	bl	800d1c6 <dir_next>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0d7      	beq.n	800d376 <dir_alloc+0x26>
 800d3c6:	e000      	b.n	800d3ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d3c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	2b04      	cmp	r3, #4
 800d3ce:	d101      	bne.n	800d3d4 <dir_alloc+0x84>
 800d3d0:	2307      	movs	r3, #7
 800d3d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3718      	adds	r7, #24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	331a      	adds	r3, #26
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff f841 	bl	800c474 <ld_word>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d109      	bne.n	800d412 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	3314      	adds	r3, #20
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff f836 	bl	800c474 <ld_word>
 800d408:	4603      	mov	r3, r0
 800d40a:	041b      	lsls	r3, r3, #16
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d412:	68fb      	ldr	r3, [r7, #12]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	331a      	adds	r3, #26
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	b292      	uxth	r2, r2
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f7ff f859 	bl	800c4ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d109      	bne.n	800d454 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f103 0214 	add.w	r2, r3, #20
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	0c1b      	lsrs	r3, r3, #16
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4619      	mov	r1, r3
 800d44e:	4610      	mov	r0, r2
 800d450:	f7ff f84b 	bl	800c4ea <st_word>
	}
}
 800d454:	bf00      	nop
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d46a:	2100      	movs	r1, #0
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fe2f 	bl	800d0d0 <dir_sdi>
 800d472:	4603      	mov	r3, r0
 800d474:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <dir_find+0x24>
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	e03e      	b.n	800d4fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	4619      	mov	r1, r3
 800d486:	6938      	ldr	r0, [r7, #16]
 800d488:	f7ff faa4 	bl	800c9d4 <move_window>
 800d48c:	4603      	mov	r3, r0
 800d48e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d490:	7dfb      	ldrb	r3, [r7, #23]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d12f      	bne.n	800d4f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <dir_find+0x4e>
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	75fb      	strb	r3, [r7, #23]
 800d4a8:	e028      	b.n	800d4fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	330b      	adds	r3, #11
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	330b      	adds	r3, #11
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 0308 	and.w	r3, r3, #8
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <dir_find+0x86>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a18      	ldr	r0, [r3, #32]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3324      	adds	r3, #36	; 0x24
 800d4d4:	220b      	movs	r2, #11
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	f7ff f88a 	bl	800c5f0 <mem_cmp>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00b      	beq.n	800d4fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff fe6e 	bl	800d1c6 <dir_next>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d4ee:	7dfb      	ldrb	r3, [r7, #23]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0c5      	beq.n	800d480 <dir_find+0x24>
 800d4f4:	e002      	b.n	800d4fc <dir_find+0xa0>
		if (res != FR_OK) break;
 800d4f6:	bf00      	nop
 800d4f8:	e000      	b.n	800d4fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d4fa:	bf00      	nop

	return res;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d514:	2101      	movs	r1, #1
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ff1a 	bl	800d350 <dir_alloc>
 800d51c:	4603      	mov	r3, r0
 800d51e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d520:	7bfb      	ldrb	r3, [r7, #15]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d11c      	bne.n	800d560 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	4619      	mov	r1, r3
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	f7ff fa51 	bl	800c9d4 <move_window>
 800d532:	4603      	mov	r3, r0
 800d534:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d111      	bne.n	800d560 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a1b      	ldr	r3, [r3, #32]
 800d540:	2220      	movs	r2, #32
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff f838 	bl	800c5ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a18      	ldr	r0, [r3, #32]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3324      	adds	r3, #36	; 0x24
 800d552:	220b      	movs	r2, #11
 800d554:	4619      	mov	r1, r3
 800d556:	f7ff f80f 	bl	800c578 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2201      	movs	r2, #1
 800d55e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d560:	7bfb      	ldrb	r3, [r7, #15]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
	...

0800d56c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	3324      	adds	r3, #36	; 0x24
 800d580:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d582:	220b      	movs	r2, #11
 800d584:	2120      	movs	r1, #32
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	f7ff f817 	bl	800c5ba <mem_set>
	si = i = 0; ni = 8;
 800d58c:	2300      	movs	r3, #0
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	61fb      	str	r3, [r7, #28]
 800d594:	2308      	movs	r3, #8
 800d596:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	61fa      	str	r2, [r7, #28]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d5a6:	7efb      	ldrb	r3, [r7, #27]
 800d5a8:	2b20      	cmp	r3, #32
 800d5aa:	d94e      	bls.n	800d64a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d5ac:	7efb      	ldrb	r3, [r7, #27]
 800d5ae:	2b2f      	cmp	r3, #47	; 0x2f
 800d5b0:	d006      	beq.n	800d5c0 <create_name+0x54>
 800d5b2:	7efb      	ldrb	r3, [r7, #27]
 800d5b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d5b6:	d110      	bne.n	800d5da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d5b8:	e002      	b.n	800d5c0 <create_name+0x54>
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	61fb      	str	r3, [r7, #28]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b2f      	cmp	r3, #47	; 0x2f
 800d5ca:	d0f6      	beq.n	800d5ba <create_name+0x4e>
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b5c      	cmp	r3, #92	; 0x5c
 800d5d6:	d0f0      	beq.n	800d5ba <create_name+0x4e>
			break;
 800d5d8:	e038      	b.n	800d64c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d5da:	7efb      	ldrb	r3, [r7, #27]
 800d5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d5de:	d003      	beq.n	800d5e8 <create_name+0x7c>
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d30c      	bcc.n	800d602 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b0b      	cmp	r3, #11
 800d5ec:	d002      	beq.n	800d5f4 <create_name+0x88>
 800d5ee:	7efb      	ldrb	r3, [r7, #27]
 800d5f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d5f2:	d001      	beq.n	800d5f8 <create_name+0x8c>
 800d5f4:	2306      	movs	r3, #6
 800d5f6:	e044      	b.n	800d682 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d5f8:	2308      	movs	r3, #8
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	230b      	movs	r3, #11
 800d5fe:	617b      	str	r3, [r7, #20]
			continue;
 800d600:	e022      	b.n	800d648 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d606:	2b00      	cmp	r3, #0
 800d608:	da04      	bge.n	800d614 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d60a:	7efb      	ldrb	r3, [r7, #27]
 800d60c:	3b80      	subs	r3, #128	; 0x80
 800d60e:	4a1f      	ldr	r2, [pc, #124]	; (800d68c <create_name+0x120>)
 800d610:	5cd3      	ldrb	r3, [r2, r3]
 800d612:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d614:	7efb      	ldrb	r3, [r7, #27]
 800d616:	4619      	mov	r1, r3
 800d618:	481d      	ldr	r0, [pc, #116]	; (800d690 <create_name+0x124>)
 800d61a:	f7ff f810 	bl	800c63e <chk_chr>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <create_name+0xbc>
 800d624:	2306      	movs	r3, #6
 800d626:	e02c      	b.n	800d682 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d628:	7efb      	ldrb	r3, [r7, #27]
 800d62a:	2b60      	cmp	r3, #96	; 0x60
 800d62c:	d905      	bls.n	800d63a <create_name+0xce>
 800d62e:	7efb      	ldrb	r3, [r7, #27]
 800d630:	2b7a      	cmp	r3, #122	; 0x7a
 800d632:	d802      	bhi.n	800d63a <create_name+0xce>
 800d634:	7efb      	ldrb	r3, [r7, #27]
 800d636:	3b20      	subs	r3, #32
 800d638:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	1c5a      	adds	r2, r3, #1
 800d63e:	613a      	str	r2, [r7, #16]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	4413      	add	r3, r2
 800d644:	7efa      	ldrb	r2, [r7, #27]
 800d646:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d648:	e7a6      	b.n	800d598 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d64a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	441a      	add	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <create_name+0xf4>
 800d65c:	2306      	movs	r3, #6
 800d65e:	e010      	b.n	800d682 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	2be5      	cmp	r3, #229	; 0xe5
 800d666:	d102      	bne.n	800d66e <create_name+0x102>
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2205      	movs	r2, #5
 800d66c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d66e:	7efb      	ldrb	r3, [r7, #27]
 800d670:	2b20      	cmp	r3, #32
 800d672:	d801      	bhi.n	800d678 <create_name+0x10c>
 800d674:	2204      	movs	r2, #4
 800d676:	e000      	b.n	800d67a <create_name+0x10e>
 800d678:	2200      	movs	r2, #0
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	330b      	adds	r3, #11
 800d67e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d680:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d682:	4618      	mov	r0, r3
 800d684:	3720      	adds	r7, #32
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	08016abc 	.word	0x08016abc
 800d690:	080169ec 	.word	0x080169ec

0800d694 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6a8:	e002      	b.n	800d6b0 <follow_path+0x1c>
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	603b      	str	r3, [r7, #0]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6b6:	d0f8      	beq.n	800d6aa <follow_path+0x16>
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b5c      	cmp	r3, #92	; 0x5c
 800d6be:	d0f4      	beq.n	800d6aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b1f      	cmp	r3, #31
 800d6cc:	d80a      	bhi.n	800d6e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2280      	movs	r2, #128	; 0x80
 800d6d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fcf9 	bl	800d0d0 <dir_sdi>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	75fb      	strb	r3, [r7, #23]
 800d6e2:	e043      	b.n	800d76c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6e4:	463b      	mov	r3, r7
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ff3f 	bl	800d56c <create_name>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d134      	bne.n	800d762 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff feaf 	bl	800d45c <dir_find>
 800d6fe:	4603      	mov	r3, r0
 800d700:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d708:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00a      	beq.n	800d726 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d710:	7dfb      	ldrb	r3, [r7, #23]
 800d712:	2b04      	cmp	r3, #4
 800d714:	d127      	bne.n	800d766 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	f003 0304 	and.w	r3, r3, #4
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d122      	bne.n	800d766 <follow_path+0xd2>
 800d720:	2305      	movs	r3, #5
 800d722:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d724:	e01f      	b.n	800d766 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d11c      	bne.n	800d76a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	799b      	ldrb	r3, [r3, #6]
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d102      	bne.n	800d742 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d73c:	2305      	movs	r3, #5
 800d73e:	75fb      	strb	r3, [r7, #23]
 800d740:	e014      	b.n	800d76c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d750:	4413      	add	r3, r2
 800d752:	4619      	mov	r1, r3
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7ff fe42 	bl	800d3de <ld_clust>
 800d75a:	4602      	mov	r2, r0
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d760:	e7c0      	b.n	800d6e4 <follow_path+0x50>
			if (res != FR_OK) break;
 800d762:	bf00      	nop
 800d764:	e002      	b.n	800d76c <follow_path+0xd8>
				break;
 800d766:	bf00      	nop
 800d768:	e000      	b.n	800d76c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d76a:	bf00      	nop
			}
		}
	}

	return res;
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d776:	b480      	push	{r7}
 800d778:	b087      	sub	sp, #28
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d77e:	f04f 33ff 	mov.w	r3, #4294967295
 800d782:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d031      	beq.n	800d7f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	617b      	str	r3, [r7, #20]
 800d792:	e002      	b.n	800d79a <get_ldnumber+0x24>
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	3301      	adds	r3, #1
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	d903      	bls.n	800d7aa <get_ldnumber+0x34>
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b3a      	cmp	r3, #58	; 0x3a
 800d7a8:	d1f4      	bne.n	800d794 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b3a      	cmp	r3, #58	; 0x3a
 800d7b0:	d11c      	bne.n	800d7ec <get_ldnumber+0x76>
			tp = *path;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	60fa      	str	r2, [r7, #12]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	3b30      	subs	r3, #48	; 0x30
 800d7c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b09      	cmp	r3, #9
 800d7c8:	d80e      	bhi.n	800d7e8 <get_ldnumber+0x72>
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d10a      	bne.n	800d7e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d107      	bne.n	800d7e8 <get_ldnumber+0x72>
					vol = (int)i;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	e002      	b.n	800d7f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d7f0:	693b      	ldr	r3, [r7, #16]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
	...

0800d800 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	70da      	strb	r2, [r3, #3]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f04f 32ff 	mov.w	r2, #4294967295
 800d816:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d818:	6839      	ldr	r1, [r7, #0]
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7ff f8da 	bl	800c9d4 <move_window>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <check_fs+0x2a>
 800d826:	2304      	movs	r3, #4
 800d828:	e038      	b.n	800d89c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3330      	adds	r3, #48	; 0x30
 800d82e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fe1e 	bl	800c474 <ld_word>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d840:	429a      	cmp	r2, r3
 800d842:	d001      	beq.n	800d848 <check_fs+0x48>
 800d844:	2303      	movs	r3, #3
 800d846:	e029      	b.n	800d89c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d84e:	2be9      	cmp	r3, #233	; 0xe9
 800d850:	d009      	beq.n	800d866 <check_fs+0x66>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d858:	2beb      	cmp	r3, #235	; 0xeb
 800d85a:	d11e      	bne.n	800d89a <check_fs+0x9a>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d862:	2b90      	cmp	r3, #144	; 0x90
 800d864:	d119      	bne.n	800d89a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	3330      	adds	r3, #48	; 0x30
 800d86a:	3336      	adds	r3, #54	; 0x36
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fe19 	bl	800c4a4 <ld_dword>
 800d872:	4603      	mov	r3, r0
 800d874:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d878:	4a0a      	ldr	r2, [pc, #40]	; (800d8a4 <check_fs+0xa4>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d101      	bne.n	800d882 <check_fs+0x82>
 800d87e:	2300      	movs	r3, #0
 800d880:	e00c      	b.n	800d89c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3330      	adds	r3, #48	; 0x30
 800d886:	3352      	adds	r3, #82	; 0x52
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe fe0b 	bl	800c4a4 <ld_dword>
 800d88e:	4603      	mov	r3, r0
 800d890:	4a05      	ldr	r2, [pc, #20]	; (800d8a8 <check_fs+0xa8>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d101      	bne.n	800d89a <check_fs+0x9a>
 800d896:	2300      	movs	r3, #0
 800d898:	e000      	b.n	800d89c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d89a:	2302      	movs	r3, #2
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	00544146 	.word	0x00544146
 800d8a8:	33544146 	.word	0x33544146

0800d8ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b096      	sub	sp, #88	; 0x58
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff ff58 	bl	800d776 <get_ldnumber>
 800d8c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	da01      	bge.n	800d8d2 <find_volume+0x26>
 800d8ce:	230b      	movs	r3, #11
 800d8d0:	e22d      	b.n	800dd2e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d8d2:	4aa1      	ldr	r2, [pc, #644]	; (800db58 <find_volume+0x2ac>)
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <find_volume+0x3a>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	e223      	b.n	800dd2e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	f023 0301 	bic.w	r3, r3, #1
 800d8f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01a      	beq.n	800d932 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	785b      	ldrb	r3, [r3, #1]
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe fd19 	bl	800c338 <disk_status>
 800d906:	4603      	mov	r3, r0
 800d908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d90c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10c      	bne.n	800d932 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <find_volume+0x82>
 800d91e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d922:	f003 0304 	and.w	r3, r3, #4
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d92a:	230a      	movs	r3, #10
 800d92c:	e1ff      	b.n	800dd2e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d92e:	2300      	movs	r3, #0
 800d930:	e1fd      	b.n	800dd2e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	785b      	ldrb	r3, [r3, #1]
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fd11 	bl	800c36c <disk_initialize>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d954:	f003 0301 	and.w	r3, r3, #1
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d95c:	2303      	movs	r3, #3
 800d95e:	e1e6      	b.n	800dd2e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <find_volume+0xca>
 800d966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d001      	beq.n	800d976 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d972:	230a      	movs	r3, #10
 800d974:	e1db      	b.n	800dd2e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d97a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d97c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d97e:	f7ff ff3f 	bl	800d800 <check_fs>
 800d982:	4603      	mov	r3, r0
 800d984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d149      	bne.n	800da24 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d990:	2300      	movs	r3, #0
 800d992:	643b      	str	r3, [r7, #64]	; 0x40
 800d994:	e01e      	b.n	800d9d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d998:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d99e:	011b      	lsls	r3, r3, #4
 800d9a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d9a4:	4413      	add	r3, r2
 800d9a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d006      	beq.n	800d9c0 <find_volume+0x114>
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fd74 	bl	800c4a4 <ld_dword>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	e000      	b.n	800d9c2 <find_volume+0x116>
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	3358      	adds	r3, #88	; 0x58
 800d9c8:	443b      	add	r3, r7
 800d9ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	643b      	str	r3, [r7, #64]	; 0x40
 800d9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d9dd      	bls.n	800d996 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9da:	2300      	movs	r3, #0
 800d9dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <find_volume+0x13e>
 800d9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	3358      	adds	r3, #88	; 0x58
 800d9f0:	443b      	add	r3, r7
 800d9f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d9f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d005      	beq.n	800da0a <find_volume+0x15e>
 800d9fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da02:	f7ff fefd 	bl	800d800 <check_fs>
 800da06:	4603      	mov	r3, r0
 800da08:	e000      	b.n	800da0c <find_volume+0x160>
 800da0a:	2303      	movs	r3, #3
 800da0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da14:	2b01      	cmp	r3, #1
 800da16:	d905      	bls.n	800da24 <find_volume+0x178>
 800da18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1a:	3301      	adds	r3, #1
 800da1c:	643b      	str	r3, [r7, #64]	; 0x40
 800da1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da20:	2b03      	cmp	r3, #3
 800da22:	d9e2      	bls.n	800d9ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da28:	2b04      	cmp	r3, #4
 800da2a:	d101      	bne.n	800da30 <find_volume+0x184>
 800da2c:	2301      	movs	r3, #1
 800da2e:	e17e      	b.n	800dd2e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da34:	2b01      	cmp	r3, #1
 800da36:	d901      	bls.n	800da3c <find_volume+0x190>
 800da38:	230d      	movs	r3, #13
 800da3a:	e178      	b.n	800dd2e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	3330      	adds	r3, #48	; 0x30
 800da40:	330b      	adds	r3, #11
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fd16 	bl	800c474 <ld_word>
 800da48:	4603      	mov	r3, r0
 800da4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da4e:	d001      	beq.n	800da54 <find_volume+0x1a8>
 800da50:	230d      	movs	r3, #13
 800da52:	e16c      	b.n	800dd2e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	3330      	adds	r3, #48	; 0x30
 800da58:	3316      	adds	r3, #22
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fd0a 	bl	800c474 <ld_word>
 800da60:	4603      	mov	r3, r0
 800da62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <find_volume+0x1cc>
 800da6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6c:	3330      	adds	r3, #48	; 0x30
 800da6e:	3324      	adds	r3, #36	; 0x24
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fd17 	bl	800c4a4 <ld_dword>
 800da76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da7c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	789b      	ldrb	r3, [r3, #2]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d005      	beq.n	800da9c <find_volume+0x1f0>
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	789b      	ldrb	r3, [r3, #2]
 800da94:	2b02      	cmp	r3, #2
 800da96:	d001      	beq.n	800da9c <find_volume+0x1f0>
 800da98:	230d      	movs	r3, #13
 800da9a:	e148      	b.n	800dd2e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	789b      	ldrb	r3, [r3, #2]
 800daa0:	461a      	mov	r2, r3
 800daa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daa4:	fb02 f303 	mul.w	r3, r2, r3
 800daa8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dab0:	b29a      	uxth	r2, r3
 800dab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d008      	beq.n	800dad0 <find_volume+0x224>
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	895b      	ldrh	r3, [r3, #10]
 800dac2:	461a      	mov	r2, r3
 800dac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac6:	895b      	ldrh	r3, [r3, #10]
 800dac8:	3b01      	subs	r3, #1
 800daca:	4013      	ands	r3, r2
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <find_volume+0x228>
 800dad0:	230d      	movs	r3, #13
 800dad2:	e12c      	b.n	800dd2e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	3330      	adds	r3, #48	; 0x30
 800dad8:	3311      	adds	r3, #17
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe fcca 	bl	800c474 <ld_word>
 800dae0:	4603      	mov	r3, r0
 800dae2:	461a      	mov	r2, r3
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	891b      	ldrh	r3, [r3, #8]
 800daec:	f003 030f 	and.w	r3, r3, #15
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <find_volume+0x24e>
 800daf6:	230d      	movs	r3, #13
 800daf8:	e119      	b.n	800dd2e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	3330      	adds	r3, #48	; 0x30
 800dafe:	3313      	adds	r3, #19
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fcb7 	bl	800c474 <ld_word>
 800db06:	4603      	mov	r3, r0
 800db08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d106      	bne.n	800db1e <find_volume+0x272>
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	3330      	adds	r3, #48	; 0x30
 800db14:	3320      	adds	r3, #32
 800db16:	4618      	mov	r0, r3
 800db18:	f7fe fcc4 	bl	800c4a4 <ld_dword>
 800db1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	3330      	adds	r3, #48	; 0x30
 800db22:	330e      	adds	r3, #14
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe fca5 	bl	800c474 <ld_word>
 800db2a:	4603      	mov	r3, r0
 800db2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <find_volume+0x28c>
 800db34:	230d      	movs	r3, #13
 800db36:	e0fa      	b.n	800dd2e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db3c:	4413      	add	r3, r2
 800db3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db40:	8912      	ldrh	r2, [r2, #8]
 800db42:	0912      	lsrs	r2, r2, #4
 800db44:	b292      	uxth	r2, r2
 800db46:	4413      	add	r3, r2
 800db48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	429a      	cmp	r2, r3
 800db50:	d204      	bcs.n	800db5c <find_volume+0x2b0>
 800db52:	230d      	movs	r3, #13
 800db54:	e0eb      	b.n	800dd2e <find_volume+0x482>
 800db56:	bf00      	nop
 800db58:	20005494 	.word	0x20005494
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db64:	8952      	ldrh	r2, [r2, #10]
 800db66:	fbb3 f3f2 	udiv	r3, r3, r2
 800db6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <find_volume+0x2ca>
 800db72:	230d      	movs	r3, #13
 800db74:	e0db      	b.n	800dd2e <find_volume+0x482>
		fmt = FS_FAT32;
 800db76:	2303      	movs	r3, #3
 800db78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db82:	4293      	cmp	r3, r2
 800db84:	d802      	bhi.n	800db8c <find_volume+0x2e0>
 800db86:	2302      	movs	r3, #2
 800db88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db92:	4293      	cmp	r3, r2
 800db94:	d802      	bhi.n	800db9c <find_volume+0x2f0>
 800db96:	2301      	movs	r3, #1
 800db98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	1c9a      	adds	r2, r3, #2
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dba8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dbaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbae:	441a      	add	r2, r3
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dbb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb8:	441a      	add	r2, r3
 800dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dbbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d11e      	bne.n	800dc04 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	3330      	adds	r3, #48	; 0x30
 800dbca:	332a      	adds	r3, #42	; 0x2a
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fe fc51 	bl	800c474 <ld_word>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <find_volume+0x330>
 800dbd8:	230d      	movs	r3, #13
 800dbda:	e0a8      	b.n	800dd2e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	891b      	ldrh	r3, [r3, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <find_volume+0x33c>
 800dbe4:	230d      	movs	r3, #13
 800dbe6:	e0a2      	b.n	800dd2e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	3330      	adds	r3, #48	; 0x30
 800dbec:	332c      	adds	r3, #44	; 0x2c
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fc58 	bl	800c4a4 <ld_dword>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	647b      	str	r3, [r7, #68]	; 0x44
 800dc02:	e01f      	b.n	800dc44 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	891b      	ldrh	r3, [r3, #8]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <find_volume+0x364>
 800dc0c:	230d      	movs	r3, #13
 800dc0e:	e08e      	b.n	800dd2e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	6a1a      	ldr	r2, [r3, #32]
 800dc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc16:	441a      	add	r2, r3
 800dc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d103      	bne.n	800dc2c <find_volume+0x380>
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	e00a      	b.n	800dc42 <find_volume+0x396>
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	695a      	ldr	r2, [r3, #20]
 800dc30:	4613      	mov	r3, r2
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	4413      	add	r3, r2
 800dc36:	085a      	lsrs	r2, r3, #1
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	695b      	ldr	r3, [r3, #20]
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc42:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	699a      	ldr	r2, [r3, #24]
 800dc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc4e:	0a5b      	lsrs	r3, r3, #9
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d201      	bcs.n	800dc58 <find_volume+0x3ac>
 800dc54:	230d      	movs	r3, #13
 800dc56:	e06a      	b.n	800dd2e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	611a      	str	r2, [r3, #16]
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	691a      	ldr	r2, [r3, #16]
 800dc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc66:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d149      	bne.n	800dd0a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	3330      	adds	r3, #48	; 0x30
 800dc7a:	3330      	adds	r3, #48	; 0x30
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fe fbf9 	bl	800c474 <ld_word>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d140      	bne.n	800dd0a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc90:	f7fe fea0 	bl	800c9d4 <move_window>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d137      	bne.n	800dd0a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	3330      	adds	r3, #48	; 0x30
 800dca4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fbe3 	bl	800c474 <ld_word>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d127      	bne.n	800dd0a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	3330      	adds	r3, #48	; 0x30
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe fbf0 	bl	800c4a4 <ld_dword>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	4a1c      	ldr	r2, [pc, #112]	; (800dd38 <find_volume+0x48c>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d11e      	bne.n	800dd0a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	3330      	adds	r3, #48	; 0x30
 800dcd0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe fbe5 	bl	800c4a4 <ld_dword>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	4a17      	ldr	r2, [pc, #92]	; (800dd3c <find_volume+0x490>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d113      	bne.n	800dd0a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce4:	3330      	adds	r3, #48	; 0x30
 800dce6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe fbda 	bl	800c4a4 <ld_dword>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf8:	3330      	adds	r3, #48	; 0x30
 800dcfa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fbd0 	bl	800c4a4 <ld_dword>
 800dd04:	4602      	mov	r2, r0
 800dd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd08:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dd10:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd12:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <find_volume+0x494>)
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	3301      	adds	r3, #1
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	4b09      	ldr	r3, [pc, #36]	; (800dd40 <find_volume+0x494>)
 800dd1c:	801a      	strh	r2, [r3, #0]
 800dd1e:	4b08      	ldr	r3, [pc, #32]	; (800dd40 <find_volume+0x494>)
 800dd20:	881a      	ldrh	r2, [r3, #0]
 800dd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd24:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd28:	f7fe fdec 	bl	800c904 <clear_lock>
#endif
	return FR_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3758      	adds	r7, #88	; 0x58
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	41615252 	.word	0x41615252
 800dd3c:	61417272 	.word	0x61417272
 800dd40:	20005498 	.word	0x20005498

0800dd44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd4e:	2309      	movs	r3, #9
 800dd50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01c      	beq.n	800dd92 <validate+0x4e>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d018      	beq.n	800dd92 <validate+0x4e>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d013      	beq.n	800dd92 <validate+0x4e>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	889a      	ldrh	r2, [r3, #4]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	88db      	ldrh	r3, [r3, #6]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d10c      	bne.n	800dd92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe fada 	bl	800c338 <disk_status>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <validate+0x4e>
			res = FR_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <validate+0x5a>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	e000      	b.n	800dda0 <validate+0x5c>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	6013      	str	r3, [r2, #0]
	return res;
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
	...

0800ddb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddc2:	f107 0310 	add.w	r3, r7, #16
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7ff fcd5 	bl	800d776 <get_ldnumber>
 800ddcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da01      	bge.n	800ddd8 <f_mount+0x28>
 800ddd4:	230b      	movs	r3, #11
 800ddd6:	e02b      	b.n	800de30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddd8:	4a17      	ldr	r2, [pc, #92]	; (800de38 <f_mount+0x88>)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dde8:	69b8      	ldr	r0, [r7, #24]
 800ddea:	f7fe fd8b 	bl	800c904 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	490d      	ldr	r1, [pc, #52]	; (800de38 <f_mount+0x88>)
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <f_mount+0x66>
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d001      	beq.n	800de1a <f_mount+0x6a>
 800de16:	2300      	movs	r3, #0
 800de18:	e00a      	b.n	800de30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de1a:	f107 010c 	add.w	r1, r7, #12
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	2200      	movs	r2, #0
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fd41 	bl	800d8ac <find_volume>
 800de2a:	4603      	mov	r3, r0
 800de2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20005494 	.word	0x20005494

0800de3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b098      	sub	sp, #96	; 0x60
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	4613      	mov	r3, r2
 800de48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <f_open+0x18>
 800de50:	2309      	movs	r3, #9
 800de52:	e1ad      	b.n	800e1b0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de5c:	79fa      	ldrb	r2, [r7, #7]
 800de5e:	f107 0110 	add.w	r1, r7, #16
 800de62:	f107 0308 	add.w	r3, r7, #8
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fd20 	bl	800d8ac <find_volume>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800de72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de76:	2b00      	cmp	r3, #0
 800de78:	f040 8191 	bne.w	800e19e <f_open+0x362>
		dj.obj.fs = fs;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	f107 0314 	add.w	r3, r7, #20
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fc03 	bl	800d694 <follow_path>
 800de8e:	4603      	mov	r3, r0
 800de90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d11a      	bne.n	800ded2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dea0:	b25b      	sxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	da03      	bge.n	800deae <f_open+0x72>
				res = FR_INVALID_NAME;
 800dea6:	2306      	movs	r3, #6
 800dea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800deac:	e011      	b.n	800ded2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	f023 0301 	bic.w	r3, r3, #1
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	bf14      	ite	ne
 800deb8:	2301      	movne	r3, #1
 800deba:	2300      	moveq	r3, #0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	461a      	mov	r2, r3
 800dec0:	f107 0314 	add.w	r3, r7, #20
 800dec4:	4611      	mov	r1, r2
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe fbd4 	bl	800c674 <chk_lock>
 800decc:	4603      	mov	r3, r0
 800dece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	f003 031c 	and.w	r3, r3, #28
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d07f      	beq.n	800dfdc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dedc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d017      	beq.n	800df14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee8:	2b04      	cmp	r3, #4
 800deea:	d10e      	bne.n	800df0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800deec:	f7fe fc1e 	bl	800c72c <enq_lock>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d006      	beq.n	800df04 <f_open+0xc8>
 800def6:	f107 0314 	add.w	r3, r7, #20
 800defa:	4618      	mov	r0, r3
 800defc:	f7ff fb03 	bl	800d506 <dir_register>
 800df00:	4603      	mov	r3, r0
 800df02:	e000      	b.n	800df06 <f_open+0xca>
 800df04:	2312      	movs	r3, #18
 800df06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	f043 0308 	orr.w	r3, r3, #8
 800df10:	71fb      	strb	r3, [r7, #7]
 800df12:	e010      	b.n	800df36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df14:	7ebb      	ldrb	r3, [r7, #26]
 800df16:	f003 0311 	and.w	r3, r3, #17
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d003      	beq.n	800df26 <f_open+0xea>
					res = FR_DENIED;
 800df1e:	2307      	movs	r3, #7
 800df20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800df24:	e007      	b.n	800df36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <f_open+0xfa>
 800df30:	2308      	movs	r3, #8
 800df32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d168      	bne.n	800e010 <f_open+0x1d4>
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	f003 0308 	and.w	r3, r3, #8
 800df44:	2b00      	cmp	r3, #0
 800df46:	d063      	beq.n	800e010 <f_open+0x1d4>
				dw = GET_FATTIME();
 800df48:	f7fb f848 	bl	8008fdc <get_fattime>
 800df4c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df50:	330e      	adds	r3, #14
 800df52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe fae3 	bl	800c520 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5c:	3316      	adds	r3, #22
 800df5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df60:	4618      	mov	r0, r3
 800df62:	f7fe fadd 	bl	800c520 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df68:	330b      	adds	r3, #11
 800df6a:	2220      	movs	r2, #32
 800df6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff fa32 	bl	800d3de <ld_clust>
 800df7a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df80:	2200      	movs	r2, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff fa4a 	bl	800d41c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8a:	331c      	adds	r3, #28
 800df8c:	2100      	movs	r1, #0
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fe fac6 	bl	800c520 <st_dword>
					fs->wflag = 1;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2201      	movs	r2, #1
 800df98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d037      	beq.n	800e010 <f_open+0x1d4>
						dw = fs->winsect;
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dfa6:	f107 0314 	add.w	r3, r7, #20
 800dfaa:	2200      	movs	r2, #0
 800dfac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe ff5d 	bl	800ce6e <remove_chain>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dfba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d126      	bne.n	800e010 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fd04 	bl	800c9d4 <move_window>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfd6:	3a01      	subs	r2, #1
 800dfd8:	60da      	str	r2, [r3, #12]
 800dfda:	e019      	b.n	800e010 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dfdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d115      	bne.n	800e010 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dfe4:	7ebb      	ldrb	r3, [r7, #26]
 800dfe6:	f003 0310 	and.w	r3, r3, #16
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dfee:	2304      	movs	r3, #4
 800dff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dff4:	e00c      	b.n	800e010 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	f003 0302 	and.w	r3, r3, #2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d007      	beq.n	800e010 <f_open+0x1d4>
 800e000:	7ebb      	ldrb	r3, [r7, #26]
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <f_open+0x1d4>
						res = FR_DENIED;
 800e00a:	2307      	movs	r3, #7
 800e00c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e014:	2b00      	cmp	r3, #0
 800e016:	d128      	bne.n	800e06a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	f003 0308 	and.w	r3, r3, #8
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e028:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bf14      	ite	ne
 800e042:	2301      	movne	r3, #1
 800e044:	2300      	moveq	r3, #0
 800e046:	b2db      	uxtb	r3, r3
 800e048:	461a      	mov	r2, r3
 800e04a:	f107 0314 	add.w	r3, r7, #20
 800e04e:	4611      	mov	r1, r2
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fb8d 	bl	800c770 <inc_lock>
 800e056:	4602      	mov	r2, r0
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d102      	bne.n	800e06a <f_open+0x22e>
 800e064:	2302      	movs	r3, #2
 800e066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e06a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f040 8095 	bne.w	800e19e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7ff f9af 	bl	800d3de <ld_clust>
 800e080:	4602      	mov	r2, r0
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e088:	331c      	adds	r3, #28
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fa0a 	bl	800c4a4 <ld_dword>
 800e090:	4602      	mov	r2, r0
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	88da      	ldrh	r2, [r3, #6]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	79fa      	ldrb	r2, [r7, #7]
 800e0ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3330      	adds	r3, #48	; 0x30
 800e0c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe fa74 	bl	800c5ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0d2:	79fb      	ldrb	r3, [r7, #7]
 800e0d4:	f003 0320 	and.w	r3, r3, #32
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d060      	beq.n	800e19e <f_open+0x362>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d05c      	beq.n	800e19e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	68da      	ldr	r2, [r3, #12]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	025b      	lsls	r3, r3, #9
 800e0f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	657b      	str	r3, [r7, #84]	; 0x54
 800e100:	e016      	b.n	800e130 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fd1f 	bl	800cb4a <get_fat>
 800e10c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e10e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e110:	2b01      	cmp	r3, #1
 800e112:	d802      	bhi.n	800e11a <f_open+0x2de>
 800e114:	2302      	movs	r3, #2
 800e116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e11a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e120:	d102      	bne.n	800e128 <f_open+0x2ec>
 800e122:	2301      	movs	r3, #1
 800e124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e12a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	657b      	str	r3, [r7, #84]	; 0x54
 800e130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e134:	2b00      	cmp	r3, #0
 800e136:	d103      	bne.n	800e140 <f_open+0x304>
 800e138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e13a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d8e0      	bhi.n	800e102 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e144:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d127      	bne.n	800e19e <f_open+0x362>
 800e14e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e154:	2b00      	cmp	r3, #0
 800e156:	d022      	beq.n	800e19e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe fcd5 	bl	800cb0c <clust2sect>
 800e162:	6478      	str	r0, [r7, #68]	; 0x44
 800e164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e166:	2b00      	cmp	r3, #0
 800e168:	d103      	bne.n	800e172 <f_open+0x336>
						res = FR_INT_ERR;
 800e16a:	2302      	movs	r3, #2
 800e16c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e170:	e015      	b.n	800e19e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e174:	0a5a      	lsrs	r2, r3, #9
 800e176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e178:	441a      	add	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	7858      	ldrb	r0, [r3, #1]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6a1a      	ldr	r2, [r3, #32]
 800e18c:	2301      	movs	r3, #1
 800e18e:	f7fe f913 	bl	800c3b8 <disk_read>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <f_open+0x362>
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e19e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <f_open+0x370>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3760      	adds	r7, #96	; 0x60
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08c      	sub	sp, #48	; 0x30
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f107 0210 	add.w	r2, r7, #16
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fdb3 	bl	800dd44 <validate>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d107      	bne.n	800e1fc <f_write+0x44>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	7d5b      	ldrb	r3, [r3, #21]
 800e1f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e1f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <f_write+0x4a>
 800e1fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e200:	e14b      	b.n	800e49a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	7d1b      	ldrb	r3, [r3, #20]
 800e206:	f003 0302 	and.w	r3, r3, #2
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <f_write+0x5a>
 800e20e:	2307      	movs	r3, #7
 800e210:	e143      	b.n	800e49a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	699a      	ldr	r2, [r3, #24]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	441a      	add	r2, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	429a      	cmp	r2, r3
 800e220:	f080 812d 	bcs.w	800e47e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	43db      	mvns	r3, r3
 800e22a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e22c:	e127      	b.n	800e47e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e236:	2b00      	cmp	r3, #0
 800e238:	f040 80e3 	bne.w	800e402 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	0a5b      	lsrs	r3, r3, #9
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	8952      	ldrh	r2, [r2, #10]
 800e246:	3a01      	subs	r2, #1
 800e248:	4013      	ands	r3, r2
 800e24a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d143      	bne.n	800e2da <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10c      	bne.n	800e274 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	d11a      	bne.n	800e29c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2100      	movs	r1, #0
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fe64 	bl	800cf38 <create_chain>
 800e270:	62b8      	str	r0, [r7, #40]	; 0x28
 800e272:	e013      	b.n	800e29c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d007      	beq.n	800e28c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	4619      	mov	r1, r3
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f7fe fef0 	bl	800d068 <clmt_clust>
 800e288:	62b8      	str	r0, [r7, #40]	; 0x28
 800e28a:	e007      	b.n	800e29c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	69db      	ldr	r3, [r3, #28]
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7fe fe4f 	bl	800cf38 <create_chain>
 800e29a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f000 80f2 	beq.w	800e488 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d104      	bne.n	800e2b4 <f_write+0xfc>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	755a      	strb	r2, [r3, #21]
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	e0f2      	b.n	800e49a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ba:	d104      	bne.n	800e2c6 <f_write+0x10e>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	755a      	strb	r2, [r3, #21]
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e0e9      	b.n	800e49a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <f_write+0x122>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	7d1b      	ldrb	r3, [r3, #20]
 800e2de:	b25b      	sxtb	r3, r3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	da18      	bge.n	800e316 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	7858      	ldrb	r0, [r3, #1]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6a1a      	ldr	r2, [r3, #32]
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f7fe f880 	bl	800c3f8 <disk_write>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d004      	beq.n	800e308 <f_write+0x150>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2201      	movs	r2, #1
 800e302:	755a      	strb	r2, [r3, #21]
 800e304:	2301      	movs	r3, #1
 800e306:	e0c8      	b.n	800e49a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e310:	b2da      	uxtb	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	69db      	ldr	r3, [r3, #28]
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fe fbf4 	bl	800cb0c <clust2sect>
 800e324:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <f_write+0x17e>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2202      	movs	r2, #2
 800e330:	755a      	strb	r2, [r3, #21]
 800e332:	2302      	movs	r3, #2
 800e334:	e0b1      	b.n	800e49a <f_write+0x2e2>
			sect += csect;
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	4413      	add	r3, r2
 800e33c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	0a5b      	lsrs	r3, r3, #9
 800e342:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d03c      	beq.n	800e3c4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e34a:	69ba      	ldr	r2, [r7, #24]
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	4413      	add	r3, r2
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	8952      	ldrh	r2, [r2, #10]
 800e354:	4293      	cmp	r3, r2
 800e356:	d905      	bls.n	800e364 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	895b      	ldrh	r3, [r3, #10]
 800e35c:	461a      	mov	r2, r3
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	7858      	ldrb	r0, [r3, #1]
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	69f9      	ldr	r1, [r7, #28]
 800e36e:	f7fe f843 	bl	800c3f8 <disk_write>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d004      	beq.n	800e382 <f_write+0x1ca>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	755a      	strb	r2, [r3, #21]
 800e37e:	2301      	movs	r3, #1
 800e380:	e08b      	b.n	800e49a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6a1a      	ldr	r2, [r3, #32]
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	6a3a      	ldr	r2, [r7, #32]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d915      	bls.n	800e3bc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6a1a      	ldr	r2, [r3, #32]
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	025b      	lsls	r3, r3, #9
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f7fe f8e5 	bl	800c578 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7d1b      	ldrb	r3, [r3, #20]
 800e3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e3bc:	6a3b      	ldr	r3, [r7, #32]
 800e3be:	025b      	lsls	r3, r3, #9
 800e3c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e3c2:	e03f      	b.n	800e444 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d016      	beq.n	800e3fc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	699a      	ldr	r2, [r3, #24]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d210      	bcs.n	800e3fc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	7858      	ldrb	r0, [r3, #1]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	f7fd ffe6 	bl	800c3b8 <disk_read>
 800e3ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d004      	beq.n	800e3fc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	755a      	strb	r2, [r3, #21]
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e04e      	b.n	800e49a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	697a      	ldr	r2, [r7, #20]
 800e400:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e40a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e40e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	429a      	cmp	r2, r3
 800e416:	d901      	bls.n	800e41c <f_write+0x264>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e42a:	4413      	add	r3, r2
 800e42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e42e:	69f9      	ldr	r1, [r7, #28]
 800e430:	4618      	mov	r0, r3
 800e432:	f7fe f8a1 	bl	800c578 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	7d1b      	ldrb	r3, [r3, #20]
 800e43a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e43e:	b2da      	uxtb	r2, r3
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e444:	69fa      	ldr	r2, [r7, #28]
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	4413      	add	r3, r2
 800e44a:	61fb      	str	r3, [r7, #28]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	699a      	ldr	r2, [r3, #24]
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	441a      	add	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	619a      	str	r2, [r3, #24]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68da      	ldr	r2, [r3, #12]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	429a      	cmp	r2, r3
 800e462:	bf38      	it	cc
 800e464:	461a      	movcc	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	60da      	str	r2, [r3, #12]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	441a      	add	r2, r3
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f47f aed4 	bne.w	800e22e <f_write+0x76>
 800e486:	e000      	b.n	800e48a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e488:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	7d1b      	ldrb	r3, [r3, #20]
 800e48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e492:	b2da      	uxtb	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3730      	adds	r7, #48	; 0x30
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b086      	sub	sp, #24
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f107 0208 	add.w	r2, r7, #8
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fc46 	bl	800dd44 <validate>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e4bc:	7dfb      	ldrb	r3, [r7, #23]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d168      	bne.n	800e594 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7d1b      	ldrb	r3, [r3, #20]
 800e4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d062      	beq.n	800e594 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7d1b      	ldrb	r3, [r3, #20]
 800e4d2:	b25b      	sxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	da15      	bge.n	800e504 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	7858      	ldrb	r0, [r3, #1]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a1a      	ldr	r2, [r3, #32]
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f7fd ff86 	bl	800c3f8 <disk_write>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <f_sync+0x54>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e04f      	b.n	800e596 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e504:	f7fa fd6a 	bl	8008fdc <get_fattime>
 800e508:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7fe fa5e 	bl	800c9d4 <move_window>
 800e518:	4603      	mov	r3, r0
 800e51a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d138      	bne.n	800e594 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e526:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	330b      	adds	r3, #11
 800e52c:	781a      	ldrb	r2, [r3, #0]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	330b      	adds	r3, #11
 800e532:	f042 0220 	orr.w	r2, r2, #32
 800e536:	b2d2      	uxtb	r2, r2
 800e538:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6818      	ldr	r0, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	461a      	mov	r2, r3
 800e544:	68f9      	ldr	r1, [r7, #12]
 800e546:	f7fe ff69 	bl	800d41c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f103 021c 	add.w	r2, r3, #28
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	f7fd ffe2 	bl	800c520 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3316      	adds	r3, #22
 800e560:	6939      	ldr	r1, [r7, #16]
 800e562:	4618      	mov	r0, r3
 800e564:	f7fd ffdc 	bl	800c520 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3312      	adds	r3, #18
 800e56c:	2100      	movs	r1, #0
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fd ffbb 	bl	800c4ea <st_word>
					fs->wflag = 1;
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2201      	movs	r2, #1
 800e578:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fa57 	bl	800ca30 <sync_fs>
 800e582:	4603      	mov	r3, r0
 800e584:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7d1b      	ldrb	r3, [r3, #20]
 800e58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e594:	7dfb      	ldrb	r3, [r7, #23]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff ff7b 	bl	800e4a2 <f_sync>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d118      	bne.n	800e5e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f107 0208 	add.w	r2, r7, #8
 800e5bc:	4611      	mov	r1, r2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7ff fbc0 	bl	800dd44 <validate>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e5c8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10c      	bne.n	800e5e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe f95a 	bl	800c88c <dec_lock>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b090      	sub	sp, #64	; 0x40
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f107 0208 	add.w	r2, r7, #8
 800e602:	4611      	mov	r1, r2
 800e604:	4618      	mov	r0, r3
 800e606:	f7ff fb9d 	bl	800dd44 <validate>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e610:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e614:	2b00      	cmp	r3, #0
 800e616:	d103      	bne.n	800e620 <f_lseek+0x2e>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	7d5b      	ldrb	r3, [r3, #21]
 800e61c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e620:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <f_lseek+0x3c>
 800e628:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e62c:	e1e6      	b.n	800e9fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 80d1 	beq.w	800e7da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63e:	d15a      	bne.n	800e6f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e644:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	1d1a      	adds	r2, r3, #4
 800e64a:	627a      	str	r2, [r7, #36]	; 0x24
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	2302      	movs	r3, #2
 800e652:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d03a      	beq.n	800e6d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	2300      	movs	r3, #0
 800e666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	3302      	adds	r3, #2
 800e66c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	3301      	adds	r3, #1
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fe fa64 	bl	800cb4a <get_fat>
 800e682:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	2b01      	cmp	r3, #1
 800e688:	d804      	bhi.n	800e694 <f_lseek+0xa2>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2202      	movs	r2, #2
 800e68e:	755a      	strb	r2, [r3, #21]
 800e690:	2302      	movs	r3, #2
 800e692:	e1b3      	b.n	800e9fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69a:	d104      	bne.n	800e6a6 <f_lseek+0xb4>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	755a      	strb	r2, [r3, #21]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e1aa      	b.n	800e9fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d0de      	beq.n	800e66e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d809      	bhi.n	800e6cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	1d1a      	adds	r2, r3, #4
 800e6bc:	627a      	str	r2, [r7, #36]	; 0x24
 800e6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	1d1a      	adds	r2, r3, #4
 800e6c6:	627a      	str	r2, [r7, #36]	; 0x24
 800e6c8:	693a      	ldr	r2, [r7, #16]
 800e6ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d3c4      	bcc.n	800e660 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d803      	bhi.n	800e6ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	e184      	b.n	800e9f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e6ee:	2311      	movs	r3, #17
 800e6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e6f4:	e180      	b.n	800e9f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d902      	bls.n	800e706 <f_lseek+0x114>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	683a      	ldr	r2, [r7, #0]
 800e70a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8172 	beq.w	800e9f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	3b01      	subs	r3, #1
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7fe fca4 	bl	800d068 <clmt_clust>
 800e720:	4602      	mov	r2, r0
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	4619      	mov	r1, r3
 800e72e:	4610      	mov	r0, r2
 800e730:	f7fe f9ec 	bl	800cb0c <clust2sect>
 800e734:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d104      	bne.n	800e746 <f_lseek+0x154>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2202      	movs	r2, #2
 800e740:	755a      	strb	r2, [r3, #21]
 800e742:	2302      	movs	r3, #2
 800e744:	e15a      	b.n	800e9fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	3b01      	subs	r3, #1
 800e74a:	0a5b      	lsrs	r3, r3, #9
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	8952      	ldrh	r2, [r2, #10]
 800e750:	3a01      	subs	r2, #1
 800e752:	4013      	ands	r3, r2
 800e754:	69ba      	ldr	r2, [r7, #24]
 800e756:	4413      	add	r3, r2
 800e758:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	699b      	ldr	r3, [r3, #24]
 800e75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e762:	2b00      	cmp	r3, #0
 800e764:	f000 8148 	beq.w	800e9f8 <f_lseek+0x406>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	429a      	cmp	r2, r3
 800e770:	f000 8142 	beq.w	800e9f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	7d1b      	ldrb	r3, [r3, #20]
 800e778:	b25b      	sxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	da18      	bge.n	800e7b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	7858      	ldrb	r0, [r3, #1]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a1a      	ldr	r2, [r3, #32]
 800e78c:	2301      	movs	r3, #1
 800e78e:	f7fd fe33 	bl	800c3f8 <disk_write>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <f_lseek+0x1b0>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	755a      	strb	r2, [r3, #21]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e12c      	b.n	800e9fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7d1b      	ldrb	r3, [r3, #20]
 800e7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	7858      	ldrb	r0, [r3, #1]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	69ba      	ldr	r2, [r7, #24]
 800e7be:	f7fd fdfb 	bl	800c3b8 <disk_read>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <f_lseek+0x1e0>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	755a      	strb	r2, [r3, #21]
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e114      	b.n	800e9fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	69ba      	ldr	r2, [r7, #24]
 800e7d6:	621a      	str	r2, [r3, #32]
 800e7d8:	e10e      	b.n	800e9f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d908      	bls.n	800e7f6 <f_lseek+0x204>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7d1b      	ldrb	r3, [r3, #20]
 800e7e8:	f003 0302 	and.w	r3, r3, #2
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e804:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f000 80a7 	beq.w	800e95c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	895b      	ldrh	r3, [r3, #10]
 800e812:	025b      	lsls	r3, r3, #9
 800e814:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d01b      	beq.n	800e854 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	1e5a      	subs	r2, r3, #1
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	fbb2 f2f3 	udiv	r2, r2, r3
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	1e59      	subs	r1, r3, #1
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e830:	429a      	cmp	r2, r3
 800e832:	d30f      	bcc.n	800e854 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	425b      	negs	r3, r3
 800e83c:	401a      	ands	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	69db      	ldr	r3, [r3, #28]
 800e850:	63bb      	str	r3, [r7, #56]	; 0x38
 800e852:	e022      	b.n	800e89a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d119      	bne.n	800e894 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2100      	movs	r1, #0
 800e864:	4618      	mov	r0, r3
 800e866:	f7fe fb67 	bl	800cf38 <create_chain>
 800e86a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d104      	bne.n	800e87c <f_lseek+0x28a>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2202      	movs	r2, #2
 800e876:	755a      	strb	r2, [r3, #21]
 800e878:	2302      	movs	r3, #2
 800e87a:	e0bf      	b.n	800e9fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e882:	d104      	bne.n	800e88e <f_lseek+0x29c>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	755a      	strb	r2, [r3, #21]
 800e88a:	2301      	movs	r3, #1
 800e88c:	e0b6      	b.n	800e9fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e892:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e898:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d05d      	beq.n	800e95c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e8a0:	e03a      	b.n	800e918 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	603b      	str	r3, [r7, #0]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	699a      	ldr	r2, [r3, #24]
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	441a      	add	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ba:	f003 0302 	and.w	r3, r3, #2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00b      	beq.n	800e8da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fb36 	bl	800cf38 <create_chain>
 800e8cc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d108      	bne.n	800e8e6 <f_lseek+0x2f4>
							ofs = 0; break;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	603b      	str	r3, [r7, #0]
 800e8d8:	e022      	b.n	800e920 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fe f933 	bl	800cb4a <get_fat>
 800e8e4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ec:	d104      	bne.n	800e8f8 <f_lseek+0x306>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	755a      	strb	r2, [r3, #21]
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e081      	b.n	800e9fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d904      	bls.n	800e908 <f_lseek+0x316>
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e904:	429a      	cmp	r2, r3
 800e906:	d304      	bcc.n	800e912 <f_lseek+0x320>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	755a      	strb	r2, [r3, #21]
 800e90e:	2302      	movs	r3, #2
 800e910:	e074      	b.n	800e9fc <f_lseek+0x40a>
					fp->clust = clst;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e916:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d8c0      	bhi.n	800e8a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	699a      	ldr	r2, [r3, #24]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	441a      	add	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e932:	2b00      	cmp	r3, #0
 800e934:	d012      	beq.n	800e95c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe f8e6 	bl	800cb0c <clust2sect>
 800e940:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e944:	2b00      	cmp	r3, #0
 800e946:	d104      	bne.n	800e952 <f_lseek+0x360>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2202      	movs	r2, #2
 800e94c:	755a      	strb	r2, [r3, #21]
 800e94e:	2302      	movs	r3, #2
 800e950:	e054      	b.n	800e9fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	0a5b      	lsrs	r3, r3, #9
 800e956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e958:	4413      	add	r3, r2
 800e95a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	699a      	ldr	r2, [r3, #24]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	429a      	cmp	r2, r3
 800e966:	d90a      	bls.n	800e97e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	699a      	ldr	r2, [r3, #24]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7d1b      	ldrb	r3, [r3, #20]
 800e974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e986:	2b00      	cmp	r3, #0
 800e988:	d036      	beq.n	800e9f8 <f_lseek+0x406>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e990:	429a      	cmp	r2, r3
 800e992:	d031      	beq.n	800e9f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da18      	bge.n	800e9d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	7858      	ldrb	r0, [r3, #1]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a1a      	ldr	r2, [r3, #32]
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	f7fd fd23 	bl	800c3f8 <disk_write>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <f_lseek+0x3d0>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	755a      	strb	r2, [r3, #21]
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e01c      	b.n	800e9fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	7d1b      	ldrb	r3, [r3, #20]
 800e9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	7858      	ldrb	r0, [r3, #1]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9da:	2301      	movs	r3, #1
 800e9dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9de:	f7fd fceb 	bl	800c3b8 <disk_read>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d004      	beq.n	800e9f2 <f_lseek+0x400>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	755a      	strb	r2, [r3, #21]
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e004      	b.n	800e9fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e9f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3740      	adds	r7, #64	; 0x40
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b087      	sub	sp, #28
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea12:	2301      	movs	r3, #1
 800ea14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea1a:	4b1f      	ldr	r3, [pc, #124]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea1c:	7a5b      	ldrb	r3, [r3, #9]
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d131      	bne.n	800ea88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea24:	4b1c      	ldr	r3, [pc, #112]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea26:	7a5b      	ldrb	r3, [r3, #9]
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	4b1a      	ldr	r3, [pc, #104]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea2e:	2100      	movs	r1, #0
 800ea30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea32:	4b19      	ldr	r3, [pc, #100]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea34:	7a5b      	ldrb	r3, [r3, #9]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	4a17      	ldr	r2, [pc, #92]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea42:	4b15      	ldr	r3, [pc, #84]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea44:	7a5b      	ldrb	r3, [r3, #9]
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea4c:	4413      	add	r3, r2
 800ea4e:	79fa      	ldrb	r2, [r7, #7]
 800ea50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea52:	4b11      	ldr	r3, [pc, #68]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea54:	7a5b      	ldrb	r3, [r3, #9]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	1c5a      	adds	r2, r3, #1
 800ea5a:	b2d1      	uxtb	r1, r2
 800ea5c:	4a0e      	ldr	r2, [pc, #56]	; (800ea98 <FATFS_LinkDriverEx+0x94>)
 800ea5e:	7251      	strb	r1, [r2, #9]
 800ea60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea62:	7dbb      	ldrb	r3, [r7, #22]
 800ea64:	3330      	adds	r3, #48	; 0x30
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	223a      	movs	r2, #58	; 0x3a
 800ea72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	3302      	adds	r3, #2
 800ea78:	222f      	movs	r2, #47	; 0x2f
 800ea7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	3303      	adds	r3, #3
 800ea80:	2200      	movs	r2, #0
 800ea82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	371c      	adds	r7, #28
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	200054bc 	.word	0x200054bc

0800ea9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ffaa 	bl	800ea04 <FATFS_LinkDriverEx>
 800eab0:	4603      	mov	r3, r0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eac0:	2201      	movs	r2, #1
 800eac2:	490e      	ldr	r1, [pc, #56]	; (800eafc <MX_USB_HOST_Init+0x40>)
 800eac4:	480e      	ldr	r0, [pc, #56]	; (800eb00 <MX_USB_HOST_Init+0x44>)
 800eac6:	f7fb ff45 	bl	800a954 <USBH_Init>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ead0:	f7f2 fe90 	bl	80017f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ead4:	490b      	ldr	r1, [pc, #44]	; (800eb04 <MX_USB_HOST_Init+0x48>)
 800ead6:	480a      	ldr	r0, [pc, #40]	; (800eb00 <MX_USB_HOST_Init+0x44>)
 800ead8:	f7fb ffe8 	bl	800aaac <USBH_RegisterClass>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eae2:	f7f2 fe87 	bl	80017f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eae6:	4806      	ldr	r0, [pc, #24]	; (800eb00 <MX_USB_HOST_Init+0x44>)
 800eae8:	f7fc f86c 	bl	800abc4 <USBH_Start>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eaf2:	f7f2 fe7f 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eaf6:	bf00      	nop
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	0800eb1d 	.word	0x0800eb1d
 800eb00:	200054c8 	.word	0x200054c8
 800eb04:	20000028 	.word	0x20000028

0800eb08 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eb0c:	4802      	ldr	r0, [pc, #8]	; (800eb18 <MX_USB_HOST_Process+0x10>)
 800eb0e:	f7fc f869 	bl	800abe4 <USBH_Process>
}
 800eb12:	bf00      	nop
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	200054c8 	.word	0x200054c8

0800eb1c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	2b04      	cmp	r3, #4
 800eb2e:	d819      	bhi.n	800eb64 <USBH_UserProcess+0x48>
 800eb30:	a201      	add	r2, pc, #4	; (adr r2, 800eb38 <USBH_UserProcess+0x1c>)
 800eb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb36:	bf00      	nop
 800eb38:	0800eb65 	.word	0x0800eb65
 800eb3c:	0800eb55 	.word	0x0800eb55
 800eb40:	0800eb65 	.word	0x0800eb65
 800eb44:	0800eb5d 	.word	0x0800eb5d
 800eb48:	0800eb4d 	.word	0x0800eb4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eb4c:	4b09      	ldr	r3, [pc, #36]	; (800eb74 <USBH_UserProcess+0x58>)
 800eb4e:	2203      	movs	r2, #3
 800eb50:	701a      	strb	r2, [r3, #0]
  break;
 800eb52:	e008      	b.n	800eb66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eb54:	4b07      	ldr	r3, [pc, #28]	; (800eb74 <USBH_UserProcess+0x58>)
 800eb56:	2202      	movs	r2, #2
 800eb58:	701a      	strb	r2, [r3, #0]
  break;
 800eb5a:	e004      	b.n	800eb66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eb5c:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <USBH_UserProcess+0x58>)
 800eb5e:	2201      	movs	r2, #1
 800eb60:	701a      	strb	r2, [r3, #0]
  break;
 800eb62:	e000      	b.n	800eb66 <USBH_UserProcess+0x4a>

  default:
  break;
 800eb64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	200057a0 	.word	0x200057a0

0800eb78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b0ac      	sub	sp, #176	; 0xb0
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800eb84:	2200      	movs	r2, #0
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	605a      	str	r2, [r3, #4]
 800eb8a:	609a      	str	r2, [r3, #8]
 800eb8c:	60da      	str	r2, [r3, #12]
 800eb8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800eb90:	f107 0314 	add.w	r3, r7, #20
 800eb94:	2288      	movs	r2, #136	; 0x88
 800eb96:	2100      	movs	r1, #0
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f004 fa53 	bl	8013044 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eba6:	d173      	bne.n	800ec90 <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800eba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ebac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800ebae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ebb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800ebbe:	2318      	movs	r3, #24
 800ebc0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ebc2:	2307      	movs	r3, #7
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ebca:	2302      	movs	r3, #2
 800ebcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ebce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ebd2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ebd4:	f107 0314 	add.w	r3, r7, #20
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7f8 f873 	bl	8006cc4 <HAL_RCCEx_PeriphCLKConfig>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800ebe4:	f7f2 fe06 	bl	80017f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ebea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebec:	4a2a      	ldr	r2, [pc, #168]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ebee:	f043 0301 	orr.w	r3, r3, #1
 800ebf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ebf4:	4b28      	ldr	r3, [pc, #160]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ebf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	613b      	str	r3, [r7, #16]
 800ebfe:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec08:	2302      	movs	r3, #2
 800ec0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec14:	2303      	movs	r3, #3
 800ec16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec1a:	230a      	movs	r3, #10
 800ec1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ec24:	4619      	mov	r1, r3
 800ec26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ec2a:	f7f4 fb3f 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec2e:	4b1a      	ldr	r3, [pc, #104]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec32:	4a19      	ldr	r2, [pc, #100]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ec38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ec3a:	4b17      	ldr	r3, [pc, #92]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ec46:	4b14      	ldr	r3, [pc, #80]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d114      	bne.n	800ec7c <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ec52:	4b11      	ldr	r3, [pc, #68]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec56:	4a10      	ldr	r2, [pc, #64]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec5c:	6593      	str	r3, [r2, #88]	; 0x58
 800ec5e:	4b0e      	ldr	r3, [pc, #56]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec66:	60bb      	str	r3, [r7, #8]
 800ec68:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800ec6a:	f7f7 f9d3 	bl	8006014 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec6e:	4b0a      	ldr	r3, [pc, #40]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec72:	4a09      	ldr	r2, [pc, #36]	; (800ec98 <HAL_HCD_MspInit+0x120>)
 800ec74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec78:	6593      	str	r3, [r2, #88]	; 0x58
 800ec7a:	e001      	b.n	800ec80 <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ec7c:	f7f7 f9ca 	bl	8006014 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec80:	2200      	movs	r2, #0
 800ec82:	2100      	movs	r1, #0
 800ec84:	2043      	movs	r0, #67	; 0x43
 800ec86:	f7f4 f9e8 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec8a:	2043      	movs	r0, #67	; 0x43
 800ec8c:	f7f4 fa01 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ec90:	bf00      	nop
 800ec92:	37b0      	adds	r7, #176	; 0xb0
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	40021000 	.word	0x40021000

0800ec9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fc fb79 	bl	800b3a2 <USBH_LL_IncTimer>
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fc fbb1 	bl	800b42e <USBH_LL_Connect>
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fc fbba 	bl	800b45c <USBH_LL_Disconnect>
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fc fb6b 	bl	800b3f6 <USBH_LL_PortEnabled>
}
 800ed20:	bf00      	nop
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fc fb6b 	bl	800b412 <USBH_LL_PortDisabled>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d12a      	bne.n	800edac <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ed56:	4a18      	ldr	r2, [pc, #96]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	4a15      	ldr	r2, [pc, #84]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed62:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed66:	4b14      	ldr	r3, [pc, #80]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ed6e:	4b12      	ldr	r3, [pc, #72]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed70:	2208      	movs	r2, #8
 800ed72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ed74:	4b10      	ldr	r3, [pc, #64]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed7a:	4b0f      	ldr	r3, [pc, #60]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ed80:	4b0d      	ldr	r3, [pc, #52]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed82:	2202      	movs	r2, #2
 800ed84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ed8c:	480a      	ldr	r0, [pc, #40]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed8e:	f7f4 fd75 	bl	800387c <HAL_HCD_Init>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ed98:	f7f2 fd2c 	bl	80017f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ed9c:	4806      	ldr	r0, [pc, #24]	; (800edb8 <USBH_LL_Init+0x74>)
 800ed9e:	f7f5 f98a 	bl	80040b6 <HAL_HCD_GetCurrentFrame>
 800eda2:	4603      	mov	r3, r0
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fc faec 	bl	800b384 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	200057a4 	.word	0x200057a4

0800edbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7f5 f8f7 	bl	8003fc6 <HAL_HCD_Start>
 800edd8:	4603      	mov	r3, r0
 800edda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eddc:	7bfb      	ldrb	r3, [r7, #15]
 800edde:	4618      	mov	r0, r3
 800ede0:	f000 f992 	bl	800f108 <USBH_Get_USB_Status>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f5 f8ff 	bl	800400c <HAL_HCD_Stop>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 f977 	bl	800f108 <USBH_Get_USB_Status>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ee30:	2301      	movs	r3, #1
 800ee32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7f5 f949 	bl	80040d2 <HAL_HCD_GetCurrentSpeed>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d00c      	beq.n	800ee60 <USBH_LL_GetSpeed+0x38>
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d80d      	bhi.n	800ee66 <USBH_LL_GetSpeed+0x3e>
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <USBH_LL_GetSpeed+0x2c>
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d003      	beq.n	800ee5a <USBH_LL_GetSpeed+0x32>
 800ee52:	e008      	b.n	800ee66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73fb      	strb	r3, [r7, #15]
    break;
 800ee58:	e008      	b.n	800ee6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee5e:	e005      	b.n	800ee6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ee60:	2302      	movs	r3, #2
 800ee62:	73fb      	strb	r3, [r7, #15]
    break;
 800ee64:	e002      	b.n	800ee6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ee66:	2301      	movs	r3, #1
 800ee68:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6a:	bf00      	nop
  }
  return  speed;
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f5 f8da 	bl	8004046 <HAL_HCD_ResetPort>
 800ee92:	4603      	mov	r3, r0
 800ee94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 f935 	bl	800f108 <USBH_Get_USB_Status>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800eebe:	78fa      	ldrb	r2, [r7, #3]
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f5 f8e2 	bl	800408c <HAL_HCD_HC_GetXferCount>
 800eec8:	4603      	mov	r3, r0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eed2:	b590      	push	{r4, r7, lr}
 800eed4:	b089      	sub	sp, #36	; 0x24
 800eed6:	af04      	add	r7, sp, #16
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	4608      	mov	r0, r1
 800eedc:	4611      	mov	r1, r2
 800eede:	461a      	mov	r2, r3
 800eee0:	4603      	mov	r3, r0
 800eee2:	70fb      	strb	r3, [r7, #3]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70bb      	strb	r3, [r7, #2]
 800eee8:	4613      	mov	r3, r2
 800eeea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 800eefa:	787c      	ldrb	r4, [r7, #1]
 800eefc:	78ba      	ldrb	r2, [r7, #2]
 800eefe:	78f9      	ldrb	r1, [r7, #3]
 800ef00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef02:	9302      	str	r3, [sp, #8]
 800ef04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef08:	9301      	str	r3, [sp, #4]
 800ef0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	4623      	mov	r3, r4
 800ef12:	f7f4 fd15 	bl	8003940 <HAL_HCD_HC_Init>
 800ef16:	4603      	mov	r3, r0
 800ef18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 f8f3 	bl	800f108 <USBH_Get_USB_Status>
 800ef22:	4603      	mov	r3, r0
 800ef24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd90      	pop	{r4, r7, pc}

0800ef30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ef4a:	78fa      	ldrb	r2, [r7, #3]
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f4 fd98 	bl	8003a84 <HAL_HCD_HC_Halt>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f000 f8d4 	bl	800f108 <USBH_Get_USB_Status>
 800ef60:	4603      	mov	r3, r0
 800ef62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef6e:	b590      	push	{r4, r7, lr}
 800ef70:	b089      	sub	sp, #36	; 0x24
 800ef72:	af04      	add	r7, sp, #16
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	4608      	mov	r0, r1
 800ef78:	4611      	mov	r1, r2
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	70fb      	strb	r3, [r7, #3]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70bb      	strb	r3, [r7, #2]
 800ef84:	4613      	mov	r3, r2
 800ef86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 800ef96:	787c      	ldrb	r4, [r7, #1]
 800ef98:	78ba      	ldrb	r2, [r7, #2]
 800ef9a:	78f9      	ldrb	r1, [r7, #3]
 800ef9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efa0:	9303      	str	r3, [sp, #12]
 800efa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efa4:	9302      	str	r3, [sp, #8]
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	4623      	mov	r3, r4
 800efb2:	f7f4 fd8b 	bl	8003acc <HAL_HCD_HC_SubmitRequest>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 f8a3 	bl	800f108 <USBH_Get_USB_Status>
 800efc2:	4603      	mov	r3, r0
 800efc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd90      	pop	{r4, r7, pc}

0800efd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	460b      	mov	r3, r1
 800efda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800efe2:	78fa      	ldrb	r2, [r7, #3]
 800efe4:	4611      	mov	r1, r2
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f5 f83b 	bl	8004062 <HAL_HCD_HC_GetURBState>
 800efec:	4603      	mov	r3, r0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	460b      	mov	r3, r1
 800f000:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d103      	bne.n	800f014 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f00c:	78fb      	ldrb	r3, [r7, #3]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f8a6 	bl	800f160 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f014:	20c8      	movs	r0, #200	; 0xc8
 800f016:	f7f3 ff01 	bl	8002e1c <HAL_Delay>
  return USBH_OK;
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f024:	b480      	push	{r7}
 800f026:	b085      	sub	sp, #20
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	460b      	mov	r3, r1
 800f02e:	70fb      	strb	r3, [r7, #3]
 800f030:	4613      	mov	r3, r2
 800f032:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800f03a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f03c:	78fa      	ldrb	r2, [r7, #3]
 800f03e:	68f9      	ldr	r1, [r7, #12]
 800f040:	4613      	mov	r3, r2
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	4413      	add	r3, r2
 800f046:	011b      	lsls	r3, r3, #4
 800f048:	440b      	add	r3, r1
 800f04a:	333b      	adds	r3, #59	; 0x3b
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00a      	beq.n	800f068 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f052:	78fa      	ldrb	r2, [r7, #3]
 800f054:	68f9      	ldr	r1, [r7, #12]
 800f056:	4613      	mov	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	4413      	add	r3, r2
 800f05c:	011b      	lsls	r3, r3, #4
 800f05e:	440b      	add	r3, r1
 800f060:	3358      	adds	r3, #88	; 0x58
 800f062:	78ba      	ldrb	r2, [r7, #2]
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	e009      	b.n	800f07c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f068:	78fa      	ldrb	r2, [r7, #3]
 800f06a:	68f9      	ldr	r1, [r7, #12]
 800f06c:	4613      	mov	r3, r2
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	4413      	add	r3, r2
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	440b      	add	r3, r1
 800f076:	3359      	adds	r3, #89	; 0x59
 800f078:	78ba      	ldrb	r2, [r7, #2]
 800f07a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f08a:	b480      	push	{r7}
 800f08c:	b085      	sub	sp, #20
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	460b      	mov	r3, r1
 800f094:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800f0a0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f0a2:	78fa      	ldrb	r2, [r7, #3]
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	4413      	add	r3, r2
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	440b      	add	r3, r1
 800f0b0:	333b      	adds	r3, #59	; 0x3b
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00a      	beq.n	800f0ce <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f0b8:	78fa      	ldrb	r2, [r7, #3]
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	4413      	add	r3, r2
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	440b      	add	r3, r1
 800f0c6:	3358      	adds	r3, #88	; 0x58
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	73fb      	strb	r3, [r7, #15]
 800f0cc:	e009      	b.n	800f0e2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	4413      	add	r3, r2
 800f0d8:	011b      	lsls	r3, r3, #4
 800f0da:	440b      	add	r3, r1
 800f0dc:	3359      	adds	r3, #89	; 0x59
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7f3 fe8f 	bl	8002e1c <HAL_Delay>
}
 800f0fe:	bf00      	nop
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	4603      	mov	r3, r0
 800f110:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f116:	79fb      	ldrb	r3, [r7, #7]
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d817      	bhi.n	800f14c <USBH_Get_USB_Status+0x44>
 800f11c:	a201      	add	r2, pc, #4	; (adr r2, 800f124 <USBH_Get_USB_Status+0x1c>)
 800f11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f122:	bf00      	nop
 800f124:	0800f135 	.word	0x0800f135
 800f128:	0800f13b 	.word	0x0800f13b
 800f12c:	0800f141 	.word	0x0800f141
 800f130:	0800f147 	.word	0x0800f147
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	73fb      	strb	r3, [r7, #15]
    break;
 800f138:	e00b      	b.n	800f152 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f13a:	2302      	movs	r3, #2
 800f13c:	73fb      	strb	r3, [r7, #15]
    break;
 800f13e:	e008      	b.n	800f152 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f140:	2301      	movs	r3, #1
 800f142:	73fb      	strb	r3, [r7, #15]
    break;
 800f144:	e005      	b.n	800f152 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f146:	2302      	movs	r3, #2
 800f148:	73fb      	strb	r3, [r7, #15]
    break;
 800f14a:	e002      	b.n	800f152 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f14c:	2302      	movs	r3, #2
 800f14e:	73fb      	strb	r3, [r7, #15]
    break;
 800f150:	bf00      	nop
  }
  return usb_status;
 800f152:	7bfb      	ldrb	r3, [r7, #15]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f16a:	79fb      	ldrb	r3, [r7, #7]
 800f16c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
 800f178:	e001      	b.n	800f17e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f17a:	2301      	movs	r3, #1
 800f17c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	461a      	mov	r2, r3
 800f182:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f18a:	f7f4 fb2d 	bl	80037e8 <HAL_GPIO_WritePin>
}
 800f18e:	bf00      	nop
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
	...

0800f198 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800f1a2:	683a      	ldr	r2, [r7, #0]
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	4837      	ldr	r0, [pc, #220]	; (800f284 <network_configure_activations+0xec>)
 800f1a8:	f000 fb26 	bl	800f7f8 <ai_platform_get_activations_map>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d05d      	beq.n	800f26e <network_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f1b2:	4b34      	ldr	r3, [pc, #208]	; (800f284 <network_configure_activations+0xec>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a34      	ldr	r2, [pc, #208]	; (800f288 <network_configure_activations+0xf0>)
 800f1b8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f1ba:	4b32      	ldr	r3, [pc, #200]	; (800f284 <network_configure_activations+0xec>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a32      	ldr	r2, [pc, #200]	; (800f288 <network_configure_activations+0xf0>)
 800f1c0:	60d3      	str	r3, [r2, #12]
    
    conv1d_2_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 312);
 800f1c2:	4b30      	ldr	r3, [pc, #192]	; (800f284 <network_configure_activations+0xec>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f1ca:	4a30      	ldr	r2, [pc, #192]	; (800f28c <network_configure_activations+0xf4>)
 800f1cc:	6093      	str	r3, [r2, #8]
    conv1d_2_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 312);
 800f1ce:	4b2d      	ldr	r3, [pc, #180]	; (800f284 <network_configure_activations+0xec>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f1d6:	4a2d      	ldr	r2, [pc, #180]	; (800f28c <network_configure_activations+0xf4>)
 800f1d8:	60d3      	str	r3, [r2, #12]
    
    activation_3_output_array.data = AI_PTR(g_network_activations_map[0] + 312);
 800f1da:	4b2a      	ldr	r3, [pc, #168]	; (800f284 <network_configure_activations+0xec>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f1e2:	4a2b      	ldr	r2, [pc, #172]	; (800f290 <network_configure_activations+0xf8>)
 800f1e4:	6093      	str	r3, [r2, #8]
    activation_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 312);
 800f1e6:	4b27      	ldr	r3, [pc, #156]	; (800f284 <network_configure_activations+0xec>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f1ee:	4a28      	ldr	r2, [pc, #160]	; (800f290 <network_configure_activations+0xf8>)
 800f1f0:	60d3      	str	r3, [r2, #12]
    
    conv1d_3_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 184);
 800f1f2:	4b24      	ldr	r3, [pc, #144]	; (800f284 <network_configure_activations+0xec>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	33b8      	adds	r3, #184	; 0xb8
 800f1f8:	4a26      	ldr	r2, [pc, #152]	; (800f294 <network_configure_activations+0xfc>)
 800f1fa:	6093      	str	r3, [r2, #8]
    conv1d_3_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 184);
 800f1fc:	4b21      	ldr	r3, [pc, #132]	; (800f284 <network_configure_activations+0xec>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	33b8      	adds	r3, #184	; 0xb8
 800f202:	4a24      	ldr	r2, [pc, #144]	; (800f294 <network_configure_activations+0xfc>)
 800f204:	60d3      	str	r3, [r2, #12]
    
    activation_4_output_array.data = AI_PTR(g_network_activations_map[0] + 2488);
 800f206:	4b1f      	ldr	r3, [pc, #124]	; (800f284 <network_configure_activations+0xec>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800f20e:	4a22      	ldr	r2, [pc, #136]	; (800f298 <network_configure_activations+0x100>)
 800f210:	6093      	str	r3, [r2, #8]
    activation_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2488);
 800f212:	4b1c      	ldr	r3, [pc, #112]	; (800f284 <network_configure_activations+0xec>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800f21a:	4a1f      	ldr	r2, [pc, #124]	; (800f298 <network_configure_activations+0x100>)
 800f21c:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f21e:	4b19      	ldr	r3, [pc, #100]	; (800f284 <network_configure_activations+0xec>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a1e      	ldr	r2, [pc, #120]	; (800f29c <network_configure_activations+0x104>)
 800f224:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f226:	4b17      	ldr	r3, [pc, #92]	; (800f284 <network_configure_activations+0xec>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a1c      	ldr	r2, [pc, #112]	; (800f29c <network_configure_activations+0x104>)
 800f22c:	60d3      	str	r3, [r2, #12]
    
    activation_5_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800f22e:	4b15      	ldr	r3, [pc, #84]	; (800f284 <network_configure_activations+0xec>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f236:	4a1a      	ldr	r2, [pc, #104]	; (800f2a0 <network_configure_activations+0x108>)
 800f238:	6093      	str	r3, [r2, #8]
    activation_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800f23a:	4b12      	ldr	r3, [pc, #72]	; (800f284 <network_configure_activations+0xec>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f242:	4a17      	ldr	r2, [pc, #92]	; (800f2a0 <network_configure_activations+0x108>)
 800f244:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f246:	4b0f      	ldr	r3, [pc, #60]	; (800f284 <network_configure_activations+0xec>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a16      	ldr	r2, [pc, #88]	; (800f2a4 <network_configure_activations+0x10c>)
 800f24c:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f24e:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <network_configure_activations+0xec>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a14      	ldr	r2, [pc, #80]	; (800f2a4 <network_configure_activations+0x10c>)
 800f254:	60d3      	str	r3, [r2, #12]
    
    dense_3_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 800f256:	4b0b      	ldr	r3, [pc, #44]	; (800f284 <network_configure_activations+0xec>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3318      	adds	r3, #24
 800f25c:	4a12      	ldr	r2, [pc, #72]	; (800f2a8 <network_configure_activations+0x110>)
 800f25e:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 800f260:	4b08      	ldr	r3, [pc, #32]	; (800f284 <network_configure_activations+0xec>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3318      	adds	r3, #24
 800f266:	4a10      	ldr	r2, [pc, #64]	; (800f2a8 <network_configure_activations+0x110>)
 800f268:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f26a:	2301      	movs	r3, #1
 800f26c:	e005      	b.n	800f27a <network_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f26e:	2213      	movs	r2, #19
 800f270:	2130      	movs	r1, #48	; 0x30
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fba4 	bl	800f9c0 <ai_platform_network_set_error>
  return false;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20005ae8 	.word	0x20005ae8
 800f288:	200000d8 	.word	0x200000d8
 800f28c:	200000f8 	.word	0x200000f8
 800f290:	20000108 	.word	0x20000108
 800f294:	20000118 	.word	0x20000118
 800f298:	20000138 	.word	0x20000138
 800f29c:	20000148 	.word	0x20000148
 800f2a0:	20000048 	.word	0x20000048
 800f2a4:	20000068 	.word	0x20000068
 800f2a8:	20000078 	.word	0x20000078

0800f2ac <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	4854      	ldr	r0, [pc, #336]	; (800f40c <network_configure_weights+0x160>)
 800f2bc:	f000 fa48 	bl	800f750 <ai_platform_get_weights_map>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 8098 	beq.w	800f3f8 <network_configure_weights+0x14c>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f2c8:	4b51      	ldr	r3, [pc, #324]	; (800f410 <network_configure_weights+0x164>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2d0:	4a4f      	ldr	r2, [pc, #316]	; (800f410 <network_configure_weights+0x164>)
 800f2d2:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800f2d4:	4b4d      	ldr	r3, [pc, #308]	; (800f40c <network_configure_weights+0x160>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a4d      	ldr	r2, [pc, #308]	; (800f410 <network_configure_weights+0x164>)
 800f2da:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800f2dc:	4b4b      	ldr	r3, [pc, #300]	; (800f40c <network_configure_weights+0x160>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a4b      	ldr	r2, [pc, #300]	; (800f410 <network_configure_weights+0x164>)
 800f2e2:	60d3      	str	r3, [r2, #12]
    
    conv1d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f2e4:	4b4b      	ldr	r3, [pc, #300]	; (800f414 <network_configure_weights+0x168>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2ec:	4a49      	ldr	r2, [pc, #292]	; (800f414 <network_configure_weights+0x168>)
 800f2ee:	6013      	str	r3, [r2, #0]
    conv1d_2_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 1536);
 800f2f0:	4b46      	ldr	r3, [pc, #280]	; (800f40c <network_configure_weights+0x160>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800f2f8:	4a46      	ldr	r2, [pc, #280]	; (800f414 <network_configure_weights+0x168>)
 800f2fa:	6093      	str	r3, [r2, #8]
    conv1d_2_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1536);
 800f2fc:	4b43      	ldr	r3, [pc, #268]	; (800f40c <network_configure_weights+0x160>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800f304:	4a43      	ldr	r2, [pc, #268]	; (800f414 <network_configure_weights+0x168>)
 800f306:	60d3      	str	r3, [r2, #12]
    
    conv1d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f308:	4b43      	ldr	r3, [pc, #268]	; (800f418 <network_configure_weights+0x16c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f310:	4a41      	ldr	r2, [pc, #260]	; (800f418 <network_configure_weights+0x16c>)
 800f312:	6013      	str	r3, [r2, #0]
    conv1d_2_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 5376);
 800f314:	4b3d      	ldr	r3, [pc, #244]	; (800f40c <network_configure_weights+0x160>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800f31c:	4a3e      	ldr	r2, [pc, #248]	; (800f418 <network_configure_weights+0x16c>)
 800f31e:	6093      	str	r3, [r2, #8]
    conv1d_2_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5376);
 800f320:	4b3a      	ldr	r3, [pc, #232]	; (800f40c <network_configure_weights+0x160>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 800f328:	4a3b      	ldr	r2, [pc, #236]	; (800f418 <network_configure_weights+0x16c>)
 800f32a:	60d3      	str	r3, [r2, #12]
    
    conv1d_3_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f32c:	4b3b      	ldr	r3, [pc, #236]	; (800f41c <network_configure_weights+0x170>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f334:	4a39      	ldr	r2, [pc, #228]	; (800f41c <network_configure_weights+0x170>)
 800f336:	6013      	str	r3, [r2, #0]
    conv1d_3_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 5632);
 800f338:	4b34      	ldr	r3, [pc, #208]	; (800f40c <network_configure_weights+0x160>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800f340:	4a36      	ldr	r2, [pc, #216]	; (800f41c <network_configure_weights+0x170>)
 800f342:	6093      	str	r3, [r2, #8]
    conv1d_3_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5632);
 800f344:	4b31      	ldr	r3, [pc, #196]	; (800f40c <network_configure_weights+0x160>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 800f34c:	4a33      	ldr	r2, [pc, #204]	; (800f41c <network_configure_weights+0x170>)
 800f34e:	60d3      	str	r3, [r2, #12]
    
    conv1d_3_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f350:	4b33      	ldr	r3, [pc, #204]	; (800f420 <network_configure_weights+0x174>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f358:	4a31      	ldr	r2, [pc, #196]	; (800f420 <network_configure_weights+0x174>)
 800f35a:	6013      	str	r3, [r2, #0]
    conv1d_3_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 46592);
 800f35c:	4b2b      	ldr	r3, [pc, #172]	; (800f40c <network_configure_weights+0x160>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800f364:	4a2e      	ldr	r2, [pc, #184]	; (800f420 <network_configure_weights+0x174>)
 800f366:	6093      	str	r3, [r2, #8]
    conv1d_3_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 46592);
 800f368:	4b28      	ldr	r3, [pc, #160]	; (800f40c <network_configure_weights+0x160>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800f370:	4a2b      	ldr	r2, [pc, #172]	; (800f420 <network_configure_weights+0x174>)
 800f372:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f374:	4b2b      	ldr	r3, [pc, #172]	; (800f424 <network_configure_weights+0x178>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f37c:	4a29      	ldr	r2, [pc, #164]	; (800f424 <network_configure_weights+0x178>)
 800f37e:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 46720);
 800f380:	4b22      	ldr	r3, [pc, #136]	; (800f40c <network_configure_weights+0x160>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800f388:	3380      	adds	r3, #128	; 0x80
 800f38a:	4a26      	ldr	r2, [pc, #152]	; (800f424 <network_configure_weights+0x178>)
 800f38c:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 46720);
 800f38e:	4b1f      	ldr	r3, [pc, #124]	; (800f40c <network_configure_weights+0x160>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f503 4336 	add.w	r3, r3, #46592	; 0xb600
 800f396:	3380      	adds	r3, #128	; 0x80
 800f398:	4a22      	ldr	r2, [pc, #136]	; (800f424 <network_configure_weights+0x178>)
 800f39a:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f39c:	4b22      	ldr	r3, [pc, #136]	; (800f428 <network_configure_weights+0x17c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3a4:	4a20      	ldr	r2, [pc, #128]	; (800f428 <network_configure_weights+0x17c>)
 800f3a6:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 194176);
 800f3a8:	4b18      	ldr	r3, [pc, #96]	; (800f40c <network_configure_weights+0x160>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 800f3b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f3b4:	4a1c      	ldr	r2, [pc, #112]	; (800f428 <network_configure_weights+0x17c>)
 800f3b6:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 194176);
 800f3b8:	4b14      	ldr	r3, [pc, #80]	; (800f40c <network_configure_weights+0x160>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 800f3c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f3c4:	4a18      	ldr	r2, [pc, #96]	; (800f428 <network_configure_weights+0x17c>)
 800f3c6:	60d3      	str	r3, [r2, #12]
    
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f3c8:	4b18      	ldr	r3, [pc, #96]	; (800f42c <network_configure_weights+0x180>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3d0:	4a16      	ldr	r2, [pc, #88]	; (800f42c <network_configure_weights+0x180>)
 800f3d2:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 194432);
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	; (800f40c <network_configure_weights+0x160>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 800f3dc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800f3e0:	4a12      	ldr	r2, [pc, #72]	; (800f42c <network_configure_weights+0x180>)
 800f3e2:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 194432);
 800f3e4:	4b09      	ldr	r3, [pc, #36]	; (800f40c <network_configure_weights+0x160>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 800f3ec:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800f3f0:	4a0e      	ldr	r2, [pc, #56]	; (800f42c <network_configure_weights+0x180>)
 800f3f2:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e005      	b.n	800f404 <network_configure_weights+0x158>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f3f8:	2212      	movs	r2, #18
 800f3fa:	2130      	movs	r1, #48	; 0x30
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fadf 	bl	800f9c0 <ai_platform_network_set_error>
  return false;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	20005aec 	.word	0x20005aec
 800f410:	20000058 	.word	0x20000058
 800f414:	20000088 	.word	0x20000088
 800f418:	20000098 	.word	0x20000098
 800f41c:	200000a8 	.word	0x200000a8
 800f420:	200000b8 	.word	0x200000b8
 800f424:	200000c8 	.word	0x200000c8
 800f428:	200000e8 	.word	0x200000e8
 800f42c:	20000128 	.word	0x20000128

0800f430 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fa53 	bl	800f8e4 <ai_platform_network_get_error>
 800f43e:	4603      	mov	r3, r0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af02      	add	r7, sp, #8
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f452:	2300      	movs	r3, #0
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	2305      	movs	r3, #5
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	2301      	movs	r3, #1
 800f45c:	4a04      	ldr	r2, [pc, #16]	; (800f470 <ai_network_create+0x28>)
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fc59 	bl	800fd18 <ai_platform_network_create>
 800f466:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	20000948 	.word	0x20000948

0800f474 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b096      	sub	sp, #88	; 0x58
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800f480:	2100      	movs	r1, #0
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff ffe0 	bl	800f448 <ai_network_create>
 800f488:	4603      	mov	r3, r0
 800f48a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800f48c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f490:	2b00      	cmp	r3, #0
 800f492:	d001      	beq.n	800f498 <ai_network_create_and_init+0x24>
        return err;
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	e05d      	b.n	800f554 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800f498:	f107 0314 	add.w	r3, r7, #20
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 f8dd 	bl	800f65c <ai_network_data_params_get>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	f083 0301 	eor.w	r3, r3, #1
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d008      	beq.n	800f4c0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff ffbc 	bl	800f430 <ai_network_get_error>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800f4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4be:	e049      	b.n	800f554 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d016      	beq.n	800f4f4 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	657b      	str	r3, [r7, #84]	; 0x54
 800f4ca:	e00e      	b.n	800f4ea <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f4cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	f107 0314 	add.w	r3, r7, #20
 800f4dc:	330c      	adds	r3, #12
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 f922 	bl	800f728 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	657b      	str	r3, [r7, #84]	; 0x54
 800f4ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	dbeb      	blt.n	800f4cc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d016      	beq.n	800f528 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	653b      	str	r3, [r7, #80]	; 0x50
 800f4fe:	e00e      	b.n	800f51e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f500:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	4413      	add	r3, r2
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	f107 0314 	add.w	r3, r7, #20
 800f510:	3304      	adds	r3, #4
 800f512:	4618      	mov	r0, r3
 800f514:	f000 f908 	bl	800f728 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f51a:	3301      	adds	r3, #1
 800f51c:	653b      	str	r3, [r7, #80]	; 0x50
 800f51e:	8b7b      	ldrh	r3, [r7, #26]
 800f520:	461a      	mov	r2, r3
 800f522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f524:	4293      	cmp	r3, r2
 800f526:	dbeb      	blt.n	800f500 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f107 0214 	add.w	r2, r7, #20
 800f530:	4611      	mov	r1, r2
 800f532:	4618      	mov	r0, r3
 800f534:	f000 f846 	bl	800f5c4 <ai_network_init>
 800f538:	4603      	mov	r3, r0
 800f53a:	f083 0301 	eor.w	r3, r3, #1
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff ff71 	bl	800f430 <ai_network_get_error>
 800f54e:	4603      	mov	r3, r0
 800f550:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800f552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f554:	4618      	mov	r0, r3
 800f556:	3758      	adds	r7, #88	; 0x58
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d104      	bne.n	800f576 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f56c:	4b06      	ldr	r3, [pc, #24]	; (800f588 <ai_network_inputs_get+0x2c>)
 800f56e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a06      	ldr	r2, [pc, #24]	; (800f58c <ai_network_inputs_get+0x30>)
 800f574:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fa27 	bl	800f9cc <ai_platform_inputs_get>
 800f57e:	4603      	mov	r3, r0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	20000948 	.word	0x20000948
 800f58c:	a1c00100 	.word	0xa1c00100

0800f590 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d104      	bne.n	800f5aa <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f5a0:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <ai_network_outputs_get+0x2c>)
 800f5a2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a06      	ldr	r2, [pc, #24]	; (800f5c0 <ai_network_outputs_get+0x30>)
 800f5a8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fae3 	bl	800fb78 <ai_platform_outputs_get>
 800f5b2:	4603      	mov	r3, r0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	20000948 	.word	0x20000948
 800f5c0:	a1c00100 	.word	0xa1c00100

0800f5c4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fc77 	bl	800fec4 <ai_platform_network_init>
 800f5d6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <ai_network_init+0x1e>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e028      	b.n	800f634 <ai_network_init+0x70>

  ai_bool ok = true;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f7ff fe5f 	bl	800f2ac <network_configure_weights>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	7afb      	ldrb	r3, [r7, #11]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	bf14      	ite	ne
 800f5fa:	2301      	movne	r3, #1
 800f5fc:	2300      	moveq	r3, #0
 800f5fe:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f7ff fdc8 	bl	800f198 <network_configure_activations>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	7afb      	ldrb	r3, [r7, #11]
 800f60e:	4013      	ands	r3, r2
 800f610:	2b00      	cmp	r3, #0
 800f612:	bf14      	ite	ne
 800f614:	2301      	movne	r3, #1
 800f616:	2300      	moveq	r3, #0
 800f618:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fd40 	bl	80100a0 <ai_platform_network_post_init>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
 800f624:	7afb      	ldrb	r3, [r7, #11]
 800f626:	4013      	ands	r3, r2
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bf14      	ite	ne
 800f62c:	2301      	movne	r3, #1
 800f62e:	2300      	moveq	r3, #0
 800f630:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f632:	7afb      	ldrb	r3, [r7, #11]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	68b9      	ldr	r1, [r7, #8]
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 fdaf 	bl	80101b0 <ai_platform_network_process>
 800f652:	4603      	mov	r3, r0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <ai_network_data_params_get+0x12>
 800f66a:	2300      	movs	r3, #0
 800f66c:	e016      	b.n	800f69c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f66e:	4a0d      	ldr	r2, [pc, #52]	; (800f6a4 <ai_network_data_params_get+0x48>)
 800f670:	f107 0310 	add.w	r3, r7, #16
 800f674:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f678:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f67c:	4a0a      	ldr	r2, [pc, #40]	; (800f6a8 <ai_network_data_params_get+0x4c>)
 800f67e:	f107 0308 	add.w	r3, r7, #8
 800f682:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f686:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f68a:	f107 0210 	add.w	r2, r7, #16
 800f68e:	f107 0308 	add.w	r3, r7, #8
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f903 	bl	800f8a0 <ai_platform_bind_network_params>
 800f69a:	4603      	mov	r3, r0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	08016a50 	.word	0x08016a50
 800f6a8:	08016a58 	.word	0x08016a58

0800f6ac <ai_buffer_get_size>:
 800f6ac:	b378      	cbz	r0, 800f70e <ai_buffer_get_size+0x62>
 800f6ae:	b410      	push	{r4}
 800f6b0:	6803      	ldr	r3, [r0, #0]
 800f6b2:	4a17      	ldr	r2, [pc, #92]	; (800f710 <ai_buffer_get_size+0x64>)
 800f6b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800f6b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d01e      	beq.n	800f6fe <ai_buffer_get_size+0x52>
 800f6c0:	6984      	ldr	r4, [r0, #24]
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	7d03      	ldrb	r3, [r0, #20]
 800f6c6:	6941      	ldr	r1, [r0, #20]
 800f6c8:	f1a3 0301 	sub.w	r3, r3, #1
 800f6cc:	fab3 f383 	clz	r3, r3
 800f6d0:	095b      	lsrs	r3, r3, #5
 800f6d2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f6d6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f6da:	da0b      	bge.n	800f6f4 <ai_buffer_get_size+0x48>
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d102      	bne.n	800f6e6 <ai_buffer_get_size+0x3a>
 800f6e0:	2802      	cmp	r0, #2
 800f6e2:	d007      	beq.n	800f6f4 <ai_buffer_get_size+0x48>
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	4298      	cmp	r0, r3
 800f6ee:	fb01 f202 	mul.w	r2, r1, r2
 800f6f2:	d1f3      	bne.n	800f6dc <ai_buffer_get_size+0x30>
 800f6f4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	2900      	cmp	r1, #0
 800f700:	d0de      	beq.n	800f6c0 <ai_buffer_get_size+0x14>
 800f702:	6984      	ldr	r4, [r0, #24]
 800f704:	6863      	ldr	r3, [r4, #4]
 800f706:	331f      	adds	r3, #31
 800f708:	f023 021f 	bic.w	r2, r3, #31
 800f70c:	e7da      	b.n	800f6c4 <ai_buffer_get_size+0x18>
 800f70e:	4770      	bx	lr
 800f710:	000400c0 	.word	0x000400c0

0800f714 <ai_buffer_array_sane>:
 800f714:	b138      	cbz	r0, 800f726 <ai_buffer_array_sane+0x12>
 800f716:	6843      	ldr	r3, [r0, #4]
 800f718:	b123      	cbz	r3, 800f724 <ai_buffer_array_sane+0x10>
 800f71a:	8840      	ldrh	r0, [r0, #2]
 800f71c:	3800      	subs	r0, #0
 800f71e:	bf18      	it	ne
 800f720:	2001      	movne	r0, #1
 800f722:	4770      	bx	lr
 800f724:	4618      	mov	r0, r3
 800f726:	4770      	bx	lr

0800f728 <ai_buffer_array_item_set_address>:
 800f728:	b150      	cbz	r0, 800f740 <ai_buffer_array_item_set_address+0x18>
 800f72a:	6843      	ldr	r3, [r0, #4]
 800f72c:	b14b      	cbz	r3, 800f742 <ai_buffer_array_item_set_address+0x1a>
 800f72e:	8840      	ldrh	r0, [r0, #2]
 800f730:	b900      	cbnz	r0, 800f734 <ai_buffer_array_item_set_address+0xc>
 800f732:	4770      	bx	lr
 800f734:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f738:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f73c:	2001      	movs	r0, #1
 800f73e:	604a      	str	r2, [r1, #4]
 800f740:	4770      	bx	lr
 800f742:	4618      	mov	r0, r3
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop

0800f748 <_ai_platform_acquire_crc>:
 800f748:	2001      	movs	r0, #1
 800f74a:	4770      	bx	lr

0800f74c <_ai_platform_release_crc>:
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop

0800f750 <ai_platform_get_weights_map>:
 800f750:	2a00      	cmp	r2, #0
 800f752:	d037      	beq.n	800f7c4 <ai_platform_get_weights_map+0x74>
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	4604      	mov	r4, r0
 800f758:	b1a0      	cbz	r0, 800f784 <ai_platform_get_weights_map+0x34>
 800f75a:	460f      	mov	r7, r1
 800f75c:	b191      	cbz	r1, 800f784 <ai_platform_get_weights_map+0x34>
 800f75e:	4b25      	ldr	r3, [pc, #148]	; (800f7f4 <ai_platform_get_weights_map+0xa4>)
 800f760:	6810      	ldr	r0, [r2, #0]
 800f762:	4298      	cmp	r0, r3
 800f764:	4615      	mov	r5, r2
 800f766:	d00f      	beq.n	800f788 <ai_platform_get_weights_map+0x38>
 800f768:	6855      	ldr	r5, [r2, #4]
 800f76a:	b15d      	cbz	r5, 800f784 <ai_platform_get_weights_map+0x34>
 800f76c:	682e      	ldr	r6, [r5, #0]
 800f76e:	429e      	cmp	r6, r3
 800f770:	d02a      	beq.n	800f7c8 <ai_platform_get_weights_map+0x78>
 800f772:	f1a1 0001 	sub.w	r0, r1, #1
 800f776:	6025      	str	r5, [r4, #0]
 800f778:	fab0 f080 	clz	r0, r0
 800f77c:	0940      	lsrs	r0, r0, #5
 800f77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f780:	42a7      	cmp	r7, r4
 800f782:	d034      	beq.n	800f7ee <ai_platform_get_weights_map+0x9e>
 800f784:	2000      	movs	r0, #0
 800f786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f788:	1d10      	adds	r0, r2, #4
 800f78a:	f7ff ffc3 	bl	800f714 <ai_buffer_array_sane>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d0f8      	beq.n	800f784 <ai_platform_get_weights_map+0x34>
 800f792:	88eb      	ldrh	r3, [r5, #6]
 800f794:	429f      	cmp	r7, r3
 800f796:	d1f5      	bne.n	800f784 <ai_platform_get_weights_map+0x34>
 800f798:	f04f 0e00 	mov.w	lr, #0
 800f79c:	1f23      	subs	r3, r4, #4
 800f79e:	4670      	mov	r0, lr
 800f7a0:	68aa      	ldr	r2, [r5, #8]
 800f7a2:	eb02 0c0e 	add.w	ip, r2, lr
 800f7a6:	f10e 0e1c 	add.w	lr, lr, #28
 800f7aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f7ae:	b124      	cbz	r4, 800f7ba <ai_platform_get_weights_map+0x6a>
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	4287      	cmp	r7, r0
 800f7b4:	f843 4f04 	str.w	r4, [r3, #4]!
 800f7b8:	d1f2      	bne.n	800f7a0 <ai_platform_get_weights_map+0x50>
 800f7ba:	1a38      	subs	r0, r7, r0
 800f7bc:	fab0 f080 	clz	r0, r0
 800f7c0:	0940      	lsrs	r0, r0, #5
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	4770      	bx	lr
 800f7c8:	1f23      	subs	r3, r4, #4
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	2400      	movs	r4, #0
 800f7ce:	e000      	b.n	800f7d2 <ai_platform_get_weights_map+0x82>
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800f7d6:	42b2      	cmp	r2, r6
 800f7d8:	d0d2      	beq.n	800f780 <ai_platform_get_weights_map+0x30>
 800f7da:	f843 2f04 	str.w	r2, [r3, #4]!
 800f7de:	1c62      	adds	r2, r4, #1
 800f7e0:	4297      	cmp	r7, r2
 800f7e2:	d1f5      	bne.n	800f7d0 <ai_platform_get_weights_map+0x80>
 800f7e4:	3402      	adds	r4, #2
 800f7e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800f7ea:	42b3      	cmp	r3, r6
 800f7ec:	d1ca      	bne.n	800f784 <ai_platform_get_weights_map+0x34>
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	a1facade 	.word	0xa1facade

0800f7f8 <ai_platform_get_activations_map>:
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	d038      	beq.n	800f86e <ai_platform_get_activations_map+0x76>
 800f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fe:	4604      	mov	r4, r0
 800f800:	b1a0      	cbz	r0, 800f82c <ai_platform_get_activations_map+0x34>
 800f802:	460f      	mov	r7, r1
 800f804:	b191      	cbz	r1, 800f82c <ai_platform_get_activations_map+0x34>
 800f806:	4b25      	ldr	r3, [pc, #148]	; (800f89c <ai_platform_get_activations_map+0xa4>)
 800f808:	6810      	ldr	r0, [r2, #0]
 800f80a:	4298      	cmp	r0, r3
 800f80c:	4615      	mov	r5, r2
 800f80e:	d00f      	beq.n	800f830 <ai_platform_get_activations_map+0x38>
 800f810:	6a15      	ldr	r5, [r2, #32]
 800f812:	b15d      	cbz	r5, 800f82c <ai_platform_get_activations_map+0x34>
 800f814:	682e      	ldr	r6, [r5, #0]
 800f816:	429e      	cmp	r6, r3
 800f818:	d02b      	beq.n	800f872 <ai_platform_get_activations_map+0x7a>
 800f81a:	f1a1 0001 	sub.w	r0, r1, #1
 800f81e:	6025      	str	r5, [r4, #0]
 800f820:	fab0 f080 	clz	r0, r0
 800f824:	0940      	lsrs	r0, r0, #5
 800f826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f828:	42a7      	cmp	r7, r4
 800f82a:	d035      	beq.n	800f898 <ai_platform_get_activations_map+0xa0>
 800f82c:	2000      	movs	r0, #0
 800f82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f830:	f102 000c 	add.w	r0, r2, #12
 800f834:	f7ff ff6e 	bl	800f714 <ai_buffer_array_sane>
 800f838:	2800      	cmp	r0, #0
 800f83a:	d0f7      	beq.n	800f82c <ai_platform_get_activations_map+0x34>
 800f83c:	89eb      	ldrh	r3, [r5, #14]
 800f83e:	429f      	cmp	r7, r3
 800f840:	d1f4      	bne.n	800f82c <ai_platform_get_activations_map+0x34>
 800f842:	f04f 0e00 	mov.w	lr, #0
 800f846:	1f23      	subs	r3, r4, #4
 800f848:	4670      	mov	r0, lr
 800f84a:	692a      	ldr	r2, [r5, #16]
 800f84c:	eb02 0c0e 	add.w	ip, r2, lr
 800f850:	f10e 0e1c 	add.w	lr, lr, #28
 800f854:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f858:	b124      	cbz	r4, 800f864 <ai_platform_get_activations_map+0x6c>
 800f85a:	3001      	adds	r0, #1
 800f85c:	4287      	cmp	r7, r0
 800f85e:	f843 4f04 	str.w	r4, [r3, #4]!
 800f862:	d1f2      	bne.n	800f84a <ai_platform_get_activations_map+0x52>
 800f864:	1a38      	subs	r0, r7, r0
 800f866:	fab0 f080 	clz	r0, r0
 800f86a:	0940      	lsrs	r0, r0, #5
 800f86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86e:	2000      	movs	r0, #0
 800f870:	4770      	bx	lr
 800f872:	1f23      	subs	r3, r4, #4
 800f874:	4628      	mov	r0, r5
 800f876:	2400      	movs	r4, #0
 800f878:	e000      	b.n	800f87c <ai_platform_get_activations_map+0x84>
 800f87a:	4614      	mov	r4, r2
 800f87c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800f880:	42b2      	cmp	r2, r6
 800f882:	d0d1      	beq.n	800f828 <ai_platform_get_activations_map+0x30>
 800f884:	f843 2f04 	str.w	r2, [r3, #4]!
 800f888:	1c62      	adds	r2, r4, #1
 800f88a:	4297      	cmp	r7, r2
 800f88c:	d1f5      	bne.n	800f87a <ai_platform_get_activations_map+0x82>
 800f88e:	3402      	adds	r4, #2
 800f890:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800f894:	42b3      	cmp	r3, r6
 800f896:	d1c9      	bne.n	800f82c <ai_platform_get_activations_map+0x34>
 800f898:	2001      	movs	r0, #1
 800f89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f89c:	a1facade 	.word	0xa1facade

0800f8a0 <ai_platform_bind_network_params>:
 800f8a0:	b1a0      	cbz	r0, 800f8cc <ai_platform_bind_network_params+0x2c>
 800f8a2:	b1b1      	cbz	r1, 800f8d2 <ai_platform_bind_network_params+0x32>
 800f8a4:	b1c2      	cbz	r2, 800f8d8 <ai_platform_bind_network_params+0x38>
 800f8a6:	b410      	push	{r4}
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4c0d      	ldr	r4, [pc, #52]	; (800f8e0 <ai_platform_bind_network_params+0x40>)
 800f8ac:	f843 4b04 	str.w	r4, [r3], #4
 800f8b0:	f100 0c0c 	add.w	ip, r0, #12
 800f8b4:	c903      	ldmia	r1, {r0, r1}
 800f8b6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8be:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8ca:	4770      	bx	lr
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	4770      	bx	lr
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	4770      	bx	lr
 800f8d8:	4613      	mov	r3, r2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	a1facade 	.word	0xa1facade

0800f8e4 <ai_platform_network_get_error>:
 800f8e4:	b510      	push	{r4, lr}
 800f8e6:	b1f0      	cbz	r0, 800f926 <ai_platform_network_get_error+0x42>
 800f8e8:	4b2f      	ldr	r3, [pc, #188]	; (800f9a8 <ai_platform_network_get_error+0xc4>)
 800f8ea:	6802      	ldr	r2, [r0, #0]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	d119      	bne.n	800f926 <ai_platform_network_get_error+0x42>
 800f8f2:	f7ff ff29 	bl	800f748 <_ai_platform_acquire_crc>
 800f8f6:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <ai_platform_network_get_error+0xc8>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f902:	d03c      	beq.n	800f97e <ai_platform_network_get_error+0x9a>
 800f904:	4a2a      	ldr	r2, [pc, #168]	; (800f9b0 <ai_platform_network_get_error+0xcc>)
 800f906:	2301      	movs	r3, #1
 800f908:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f90c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1fb      	bne.n	800f90c <ai_platform_network_get_error+0x28>
 800f914:	4b27      	ldr	r3, [pc, #156]	; (800f9b4 <ai_platform_network_get_error+0xd0>)
 800f916:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f91a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f91e:	4b26      	ldr	r3, [pc, #152]	; (800f9b8 <ai_platform_network_get_error+0xd4>)
 800f920:	429a      	cmp	r2, r3
 800f922:	d038      	beq.n	800f996 <ai_platform_network_get_error+0xb2>
 800f924:	e7fe      	b.n	800f924 <ai_platform_network_get_error+0x40>
 800f926:	f7ff ff0f 	bl	800f748 <_ai_platform_acquire_crc>
 800f92a:	4b20      	ldr	r3, [pc, #128]	; (800f9ac <ai_platform_network_get_error+0xc8>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f936:	d010      	beq.n	800f95a <ai_platform_network_get_error+0x76>
 800f938:	4a1d      	ldr	r2, [pc, #116]	; (800f9b0 <ai_platform_network_get_error+0xcc>)
 800f93a:	2301      	movs	r3, #1
 800f93c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f940:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1fb      	bne.n	800f940 <ai_platform_network_get_error+0x5c>
 800f948:	4b1a      	ldr	r3, [pc, #104]	; (800f9b4 <ai_platform_network_get_error+0xd0>)
 800f94a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f94e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f952:	4b19      	ldr	r3, [pc, #100]	; (800f9b8 <ai_platform_network_get_error+0xd4>)
 800f954:	429a      	cmp	r2, r3
 800f956:	d00d      	beq.n	800f974 <ai_platform_network_get_error+0x90>
 800f958:	e7fe      	b.n	800f958 <ai_platform_network_get_error+0x74>
 800f95a:	4a18      	ldr	r2, [pc, #96]	; (800f9bc <ai_platform_network_get_error+0xd8>)
 800f95c:	2301      	movs	r3, #1
 800f95e:	6093      	str	r3, [r2, #8]
 800f960:	6893      	ldr	r3, [r2, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1fc      	bne.n	800f960 <ai_platform_network_get_error+0x7c>
 800f966:	4b13      	ldr	r3, [pc, #76]	; (800f9b4 <ai_platform_network_get_error+0xd0>)
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	6812      	ldr	r2, [r2, #0]
 800f96c:	4b12      	ldr	r3, [pc, #72]	; (800f9b8 <ai_platform_network_get_error+0xd4>)
 800f96e:	429a      	cmp	r2, r3
 800f970:	d000      	beq.n	800f974 <ai_platform_network_get_error+0x90>
 800f972:	e7fe      	b.n	800f972 <ai_platform_network_get_error+0x8e>
 800f974:	f7ff feea 	bl	800f74c <_ai_platform_release_crc>
 800f978:	f241 0010 	movw	r0, #4112	; 0x1010
 800f97c:	bd10      	pop	{r4, pc}
 800f97e:	4a0f      	ldr	r2, [pc, #60]	; (800f9bc <ai_platform_network_get_error+0xd8>)
 800f980:	2301      	movs	r3, #1
 800f982:	6093      	str	r3, [r2, #8]
 800f984:	6893      	ldr	r3, [r2, #8]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1fc      	bne.n	800f984 <ai_platform_network_get_error+0xa0>
 800f98a:	4b0a      	ldr	r3, [pc, #40]	; (800f9b4 <ai_platform_network_get_error+0xd0>)
 800f98c:	6013      	str	r3, [r2, #0]
 800f98e:	6812      	ldr	r2, [r2, #0]
 800f990:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <ai_platform_network_get_error+0xd4>)
 800f992:	429a      	cmp	r2, r3
 800f994:	d107      	bne.n	800f9a6 <ai_platform_network_get_error+0xc2>
 800f996:	f7ff fed9 	bl	800f74c <_ai_platform_release_crc>
 800f99a:	f104 0010 	add.w	r0, r4, #16
 800f99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a2:	f000 be8b 	b.w	80106bc <core_get_error>
 800f9a6:	e7fe      	b.n	800f9a6 <ai_platform_network_get_error+0xc2>
 800f9a8:	a1c00100 	.word	0xa1c00100
 800f9ac:	e0042000 	.word	0xe0042000
 800f9b0:	58024000 	.word	0x58024000
 800f9b4:	f407a5c2 	.word	0xf407a5c2
 800f9b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f9bc:	40023000 	.word	0x40023000

0800f9c0 <ai_platform_network_set_error>:
 800f9c0:	b110      	cbz	r0, 800f9c8 <ai_platform_network_set_error+0x8>
 800f9c2:	3010      	adds	r0, #16
 800f9c4:	f000 be80 	b.w	80106c8 <core_set_error>
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop

0800f9cc <ai_platform_inputs_get>:
 800f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d0:	b085      	sub	sp, #20
 800f9d2:	9102      	str	r1, [sp, #8]
 800f9d4:	b1f0      	cbz	r0, 800fa14 <ai_platform_inputs_get+0x48>
 800f9d6:	4b62      	ldr	r3, [pc, #392]	; (800fb60 <ai_platform_inputs_get+0x194>)
 800f9d8:	6802      	ldr	r2, [r0, #0]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	4607      	mov	r7, r0
 800f9de:	d119      	bne.n	800fa14 <ai_platform_inputs_get+0x48>
 800f9e0:	f7ff feb2 	bl	800f748 <_ai_platform_acquire_crc>
 800f9e4:	4b5f      	ldr	r3, [pc, #380]	; (800fb64 <ai_platform_inputs_get+0x198>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9f0:	d03d      	beq.n	800fa6e <ai_platform_inputs_get+0xa2>
 800f9f2:	4a5d      	ldr	r2, [pc, #372]	; (800fb68 <ai_platform_inputs_get+0x19c>)
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f9fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1fb      	bne.n	800f9fa <ai_platform_inputs_get+0x2e>
 800fa02:	4b5a      	ldr	r3, [pc, #360]	; (800fb6c <ai_platform_inputs_get+0x1a0>)
 800fa04:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fa08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fa0c:	4b58      	ldr	r3, [pc, #352]	; (800fb70 <ai_platform_inputs_get+0x1a4>)
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d039      	beq.n	800fa86 <ai_platform_inputs_get+0xba>
 800fa12:	e7fe      	b.n	800fa12 <ai_platform_inputs_get+0x46>
 800fa14:	f7ff fe98 	bl	800f748 <_ai_platform_acquire_crc>
 800fa18:	4b52      	ldr	r3, [pc, #328]	; (800fb64 <ai_platform_inputs_get+0x198>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa24:	d010      	beq.n	800fa48 <ai_platform_inputs_get+0x7c>
 800fa26:	4a50      	ldr	r2, [pc, #320]	; (800fb68 <ai_platform_inputs_get+0x19c>)
 800fa28:	2301      	movs	r3, #1
 800fa2a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fa2e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1fb      	bne.n	800fa2e <ai_platform_inputs_get+0x62>
 800fa36:	4b4d      	ldr	r3, [pc, #308]	; (800fb6c <ai_platform_inputs_get+0x1a0>)
 800fa38:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fa3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fa40:	4b4b      	ldr	r3, [pc, #300]	; (800fb70 <ai_platform_inputs_get+0x1a4>)
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d00d      	beq.n	800fa62 <ai_platform_inputs_get+0x96>
 800fa46:	e7fe      	b.n	800fa46 <ai_platform_inputs_get+0x7a>
 800fa48:	4a4a      	ldr	r2, [pc, #296]	; (800fb74 <ai_platform_inputs_get+0x1a8>)
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	6093      	str	r3, [r2, #8]
 800fa4e:	6893      	ldr	r3, [r2, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1fc      	bne.n	800fa4e <ai_platform_inputs_get+0x82>
 800fa54:	4b45      	ldr	r3, [pc, #276]	; (800fb6c <ai_platform_inputs_get+0x1a0>)
 800fa56:	6013      	str	r3, [r2, #0]
 800fa58:	6812      	ldr	r2, [r2, #0]
 800fa5a:	4b45      	ldr	r3, [pc, #276]	; (800fb70 <ai_platform_inputs_get+0x1a4>)
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d000      	beq.n	800fa62 <ai_platform_inputs_get+0x96>
 800fa60:	e7fe      	b.n	800fa60 <ai_platform_inputs_get+0x94>
 800fa62:	f7ff fe73 	bl	800f74c <_ai_platform_release_crc>
 800fa66:	2000      	movs	r0, #0
 800fa68:	b005      	add	sp, #20
 800fa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6e:	4a41      	ldr	r2, [pc, #260]	; (800fb74 <ai_platform_inputs_get+0x1a8>)
 800fa70:	2301      	movs	r3, #1
 800fa72:	6093      	str	r3, [r2, #8]
 800fa74:	6893      	ldr	r3, [r2, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1fc      	bne.n	800fa74 <ai_platform_inputs_get+0xa8>
 800fa7a:	4b3c      	ldr	r3, [pc, #240]	; (800fb6c <ai_platform_inputs_get+0x1a0>)
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	6812      	ldr	r2, [r2, #0]
 800fa80:	4b3b      	ldr	r3, [pc, #236]	; (800fb70 <ai_platform_inputs_get+0x1a4>)
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d155      	bne.n	800fb32 <ai_platform_inputs_get+0x166>
 800fa86:	f7ff fe61 	bl	800f74c <_ai_platform_release_crc>
 800fa8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d051      	beq.n	800fb34 <ai_platform_inputs_get+0x168>
 800fa90:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800fa94:	f1ba 0f00 	cmp.w	sl, #0
 800fa98:	d04c      	beq.n	800fb34 <ai_platform_inputs_get+0x168>
 800fa9a:	f04f 0b00 	mov.w	fp, #0
 800fa9e:	465d      	mov	r5, fp
 800faa0:	9703      	str	r7, [sp, #12]
 800faa2:	e016      	b.n	800fad2 <ai_platform_inputs_get+0x106>
 800faa4:	9901      	ldr	r1, [sp, #4]
 800faa6:	2301      	movs	r3, #1
 800faa8:	507b      	str	r3, [r7, r1]
 800faaa:	69b1      	ldr	r1, [r6, #24]
 800faac:	6849      	ldr	r1, [r1, #4]
 800faae:	6121      	str	r1, [r4, #16]
 800fab0:	f04f 0301 	mov.w	r3, #1
 800fab4:	7523      	strb	r3, [r4, #20]
 800fab6:	e9c4 c200 	strd	ip, r2, [r4]
 800faba:	6962      	ldr	r2, [r4, #20]
 800fabc:	60a0      	str	r0, [r4, #8]
 800fabe:	2300      	movs	r3, #0
 800fac0:	f369 221f 	bfi	r2, r9, #8, #24
 800fac4:	f8c4 8018 	str.w	r8, [r4, #24]
 800fac8:	60e3      	str	r3, [r4, #12]
 800faca:	3501      	adds	r5, #1
 800facc:	f10b 0b1c 	add.w	fp, fp, #28
 800fad0:	6162      	str	r2, [r4, #20]
 800fad2:	f8ba 3000 	ldrh.w	r3, [sl]
 800fad6:	42ab      	cmp	r3, r5
 800fad8:	b2aa      	uxth	r2, r5
 800fada:	d93a      	bls.n	800fb52 <ai_platform_inputs_get+0x186>
 800fadc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fae0:	00e9      	lsls	r1, r5, #3
 800fae2:	9101      	str	r1, [sp, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d034      	beq.n	800fb52 <ai_platform_inputs_get+0x186>
 800fae8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800faec:	2e00      	cmp	r6, #0
 800faee:	d030      	beq.n	800fb52 <ai_platform_inputs_get+0x186>
 800faf0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800faf4:	69b2      	ldr	r2, [r6, #24]
 800faf6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800fafa:	6810      	ldr	r0, [r2, #0]
 800fafc:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800fb00:	68b3      	ldr	r3, [r6, #8]
 800fb02:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800fb06:	f002 f81b 	bl	8011b40 <ai_array_to_buffer_fmt>
 800fb0a:	69b1      	ldr	r1, [r6, #24]
 800fb0c:	4684      	mov	ip, r0
 800fb0e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800fb12:	688a      	ldr	r2, [r1, #8]
 800fb14:	445c      	add	r4, fp
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d0c8      	beq.n	800faac <ai_platform_inputs_get+0xe0>
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800fb20:	6831      	ldr	r1, [r6, #0]
 800fb22:	6041      	str	r1, [r0, #4]
 800fb24:	b111      	cbz	r1, 800fb2c <ai_platform_inputs_get+0x160>
 800fb26:	8849      	ldrh	r1, [r1, #2]
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	d1bb      	bne.n	800faa4 <ai_platform_inputs_get+0xd8>
 800fb2c:	69b1      	ldr	r1, [r6, #24]
 800fb2e:	2000      	movs	r0, #0
 800fb30:	e7bc      	b.n	800faac <ai_platform_inputs_get+0xe0>
 800fb32:	e7fe      	b.n	800fb32 <ai_platform_inputs_get+0x166>
 800fb34:	2218      	movs	r2, #24
 800fb36:	2111      	movs	r1, #17
 800fb38:	f107 0010 	add.w	r0, r7, #16
 800fb3c:	f000 fdc4 	bl	80106c8 <core_set_error>
 800fb40:	2200      	movs	r2, #0
 800fb42:	4610      	mov	r0, r2
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d08e      	beq.n	800fa68 <ai_platform_inputs_get+0x9c>
 800fb4a:	801a      	strh	r2, [r3, #0]
 800fb4c:	b005      	add	sp, #20
 800fb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb52:	9f03      	ldr	r7, [sp, #12]
 800fb54:	2a00      	cmp	r2, #0
 800fb56:	d0ed      	beq.n	800fb34 <ai_platform_inputs_get+0x168>
 800fb58:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fb5c:	6858      	ldr	r0, [r3, #4]
 800fb5e:	e7f1      	b.n	800fb44 <ai_platform_inputs_get+0x178>
 800fb60:	a1c00100 	.word	0xa1c00100
 800fb64:	e0042000 	.word	0xe0042000
 800fb68:	58024000 	.word	0x58024000
 800fb6c:	f407a5c2 	.word	0xf407a5c2
 800fb70:	b5e8b5cd 	.word	0xb5e8b5cd
 800fb74:	40023000 	.word	0x40023000

0800fb78 <ai_platform_outputs_get>:
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	b085      	sub	sp, #20
 800fb7e:	9102      	str	r1, [sp, #8]
 800fb80:	b1f0      	cbz	r0, 800fbc0 <ai_platform_outputs_get+0x48>
 800fb82:	4b5f      	ldr	r3, [pc, #380]	; (800fd00 <ai_platform_outputs_get+0x188>)
 800fb84:	6802      	ldr	r2, [r0, #0]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	4607      	mov	r7, r0
 800fb8a:	d119      	bne.n	800fbc0 <ai_platform_outputs_get+0x48>
 800fb8c:	f7ff fddc 	bl	800f748 <_ai_platform_acquire_crc>
 800fb90:	4b5c      	ldr	r3, [pc, #368]	; (800fd04 <ai_platform_outputs_get+0x18c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb9c:	d03d      	beq.n	800fc1a <ai_platform_outputs_get+0xa2>
 800fb9e:	4a5a      	ldr	r2, [pc, #360]	; (800fd08 <ai_platform_outputs_get+0x190>)
 800fba0:	2301      	movs	r3, #1
 800fba2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fba6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1fb      	bne.n	800fba6 <ai_platform_outputs_get+0x2e>
 800fbae:	4b57      	ldr	r3, [pc, #348]	; (800fd0c <ai_platform_outputs_get+0x194>)
 800fbb0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fbb4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fbb8:	4b55      	ldr	r3, [pc, #340]	; (800fd10 <ai_platform_outputs_get+0x198>)
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d039      	beq.n	800fc32 <ai_platform_outputs_get+0xba>
 800fbbe:	e7fe      	b.n	800fbbe <ai_platform_outputs_get+0x46>
 800fbc0:	f7ff fdc2 	bl	800f748 <_ai_platform_acquire_crc>
 800fbc4:	4b4f      	ldr	r3, [pc, #316]	; (800fd04 <ai_platform_outputs_get+0x18c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbd0:	d010      	beq.n	800fbf4 <ai_platform_outputs_get+0x7c>
 800fbd2:	4a4d      	ldr	r2, [pc, #308]	; (800fd08 <ai_platform_outputs_get+0x190>)
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fbda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1fb      	bne.n	800fbda <ai_platform_outputs_get+0x62>
 800fbe2:	4b4a      	ldr	r3, [pc, #296]	; (800fd0c <ai_platform_outputs_get+0x194>)
 800fbe4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fbe8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fbec:	4b48      	ldr	r3, [pc, #288]	; (800fd10 <ai_platform_outputs_get+0x198>)
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d00d      	beq.n	800fc0e <ai_platform_outputs_get+0x96>
 800fbf2:	e7fe      	b.n	800fbf2 <ai_platform_outputs_get+0x7a>
 800fbf4:	4a47      	ldr	r2, [pc, #284]	; (800fd14 <ai_platform_outputs_get+0x19c>)
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	6093      	str	r3, [r2, #8]
 800fbfa:	6893      	ldr	r3, [r2, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1fc      	bne.n	800fbfa <ai_platform_outputs_get+0x82>
 800fc00:	4b42      	ldr	r3, [pc, #264]	; (800fd0c <ai_platform_outputs_get+0x194>)
 800fc02:	6013      	str	r3, [r2, #0]
 800fc04:	6812      	ldr	r2, [r2, #0]
 800fc06:	4b42      	ldr	r3, [pc, #264]	; (800fd10 <ai_platform_outputs_get+0x198>)
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d000      	beq.n	800fc0e <ai_platform_outputs_get+0x96>
 800fc0c:	e7fe      	b.n	800fc0c <ai_platform_outputs_get+0x94>
 800fc0e:	f7ff fd9d 	bl	800f74c <_ai_platform_release_crc>
 800fc12:	2000      	movs	r0, #0
 800fc14:	b005      	add	sp, #20
 800fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1a:	4a3e      	ldr	r2, [pc, #248]	; (800fd14 <ai_platform_outputs_get+0x19c>)
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	6093      	str	r3, [r2, #8]
 800fc20:	6893      	ldr	r3, [r2, #8]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1fc      	bne.n	800fc20 <ai_platform_outputs_get+0xa8>
 800fc26:	4b39      	ldr	r3, [pc, #228]	; (800fd0c <ai_platform_outputs_get+0x194>)
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	6812      	ldr	r2, [r2, #0]
 800fc2c:	4b38      	ldr	r3, [pc, #224]	; (800fd10 <ai_platform_outputs_get+0x198>)
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d150      	bne.n	800fcd4 <ai_platform_outputs_get+0x15c>
 800fc32:	f7ff fd8b 	bl	800f74c <_ai_platform_release_crc>
 800fc36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d958      	bls.n	800fcee <ai_platform_outputs_get+0x176>
 800fc3c:	f04f 0b00 	mov.w	fp, #0
 800fc40:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800fc44:	9703      	str	r7, [sp, #12]
 800fc46:	465d      	mov	r5, fp
 800fc48:	e016      	b.n	800fc78 <ai_platform_outputs_get+0x100>
 800fc4a:	9901      	ldr	r1, [sp, #4]
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	507b      	str	r3, [r7, r1]
 800fc50:	69b1      	ldr	r1, [r6, #24]
 800fc52:	6849      	ldr	r1, [r1, #4]
 800fc54:	6121      	str	r1, [r4, #16]
 800fc56:	f04f 0301 	mov.w	r3, #1
 800fc5a:	7523      	strb	r3, [r4, #20]
 800fc5c:	e9c4 c200 	strd	ip, r2, [r4]
 800fc60:	6962      	ldr	r2, [r4, #20]
 800fc62:	60a0      	str	r0, [r4, #8]
 800fc64:	2300      	movs	r3, #0
 800fc66:	f369 221f 	bfi	r2, r9, #8, #24
 800fc6a:	f8c4 8018 	str.w	r8, [r4, #24]
 800fc6e:	60e3      	str	r3, [r4, #12]
 800fc70:	3501      	adds	r5, #1
 800fc72:	f10b 0b1c 	add.w	fp, fp, #28
 800fc76:	6162      	str	r2, [r4, #20]
 800fc78:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fc7c:	42ab      	cmp	r3, r5
 800fc7e:	b2aa      	uxth	r2, r5
 800fc80:	d929      	bls.n	800fcd6 <ai_platform_outputs_get+0x15e>
 800fc82:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fc86:	00e9      	lsls	r1, r5, #3
 800fc88:	9101      	str	r1, [sp, #4]
 800fc8a:	b323      	cbz	r3, 800fcd6 <ai_platform_outputs_get+0x15e>
 800fc8c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fc90:	b30e      	cbz	r6, 800fcd6 <ai_platform_outputs_get+0x15e>
 800fc92:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fc96:	69b2      	ldr	r2, [r6, #24]
 800fc98:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800fc9c:	6810      	ldr	r0, [r2, #0]
 800fc9e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800fca2:	68b3      	ldr	r3, [r6, #8]
 800fca4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800fca8:	f001 ff4a 	bl	8011b40 <ai_array_to_buffer_fmt>
 800fcac:	69b1      	ldr	r1, [r6, #24]
 800fcae:	4684      	mov	ip, r0
 800fcb0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800fcb4:	688a      	ldr	r2, [r1, #8]
 800fcb6:	445c      	add	r4, fp
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d0ca      	beq.n	800fc52 <ai_platform_outputs_get+0xda>
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800fcc2:	6831      	ldr	r1, [r6, #0]
 800fcc4:	6041      	str	r1, [r0, #4]
 800fcc6:	b111      	cbz	r1, 800fcce <ai_platform_outputs_get+0x156>
 800fcc8:	8849      	ldrh	r1, [r1, #2]
 800fcca:	2900      	cmp	r1, #0
 800fccc:	d1bd      	bne.n	800fc4a <ai_platform_outputs_get+0xd2>
 800fcce:	69b1      	ldr	r1, [r6, #24]
 800fcd0:	2000      	movs	r0, #0
 800fcd2:	e7be      	b.n	800fc52 <ai_platform_outputs_get+0xda>
 800fcd4:	e7fe      	b.n	800fcd4 <ai_platform_outputs_get+0x15c>
 800fcd6:	9f03      	ldr	r7, [sp, #12]
 800fcd8:	b14a      	cbz	r2, 800fcee <ai_platform_outputs_get+0x176>
 800fcda:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fcde:	6858      	ldr	r0, [r3, #4]
 800fce0:	9b02      	ldr	r3, [sp, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d096      	beq.n	800fc14 <ai_platform_outputs_get+0x9c>
 800fce6:	801a      	strh	r2, [r3, #0]
 800fce8:	b005      	add	sp, #20
 800fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcee:	2218      	movs	r2, #24
 800fcf0:	2111      	movs	r1, #17
 800fcf2:	f107 0010 	add.w	r0, r7, #16
 800fcf6:	f000 fce7 	bl	80106c8 <core_set_error>
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	e7ef      	b.n	800fce0 <ai_platform_outputs_get+0x168>
 800fd00:	a1c00100 	.word	0xa1c00100
 800fd04:	e0042000 	.word	0xe0042000
 800fd08:	58024000 	.word	0x58024000
 800fd0c:	f407a5c2 	.word	0xf407a5c2
 800fd10:	b5e8b5cd 	.word	0xb5e8b5cd
 800fd14:	40023000 	.word	0x40023000

0800fd18 <ai_platform_network_create>:
 800fd18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd1c:	b083      	sub	sp, #12
 800fd1e:	4606      	mov	r6, r0
 800fd20:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800fd24:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800fd28:	4615      	mov	r5, r2
 800fd2a:	461f      	mov	r7, r3
 800fd2c:	f7ff fd0c 	bl	800f748 <_ai_platform_acquire_crc>
 800fd30:	b188      	cbz	r0, 800fd56 <ai_platform_network_create+0x3e>
 800fd32:	4a5d      	ldr	r2, [pc, #372]	; (800fea8 <ai_platform_network_create+0x190>)
 800fd34:	6812      	ldr	r2, [r2, #0]
 800fd36:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800fd3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fd3e:	4603      	mov	r3, r0
 800fd40:	d00e      	beq.n	800fd60 <ai_platform_network_create+0x48>
 800fd42:	4a5a      	ldr	r2, [pc, #360]	; (800feac <ai_platform_network_create+0x194>)
 800fd44:	2118      	movs	r1, #24
 800fd46:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800fd4a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800fd4e:	2918      	cmp	r1, #24
 800fd50:	d018      	beq.n	800fd84 <ai_platform_network_create+0x6c>
 800fd52:	f7ff fcfb 	bl	800f74c <_ai_platform_release_crc>
 800fd56:	f244 1033 	movw	r0, #16691	; 0x4133
 800fd5a:	b003      	add	sp, #12
 800fd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd60:	4a53      	ldr	r2, [pc, #332]	; (800feb0 <ai_platform_network_create+0x198>)
 800fd62:	2101      	movs	r1, #1
 800fd64:	6091      	str	r1, [r2, #8]
 800fd66:	2114      	movs	r1, #20
 800fd68:	e001      	b.n	800fd6e <ai_platform_network_create+0x56>
 800fd6a:	3901      	subs	r1, #1
 800fd6c:	d002      	beq.n	800fd74 <ai_platform_network_create+0x5c>
 800fd6e:	6894      	ldr	r4, [r2, #8]
 800fd70:	2c00      	cmp	r4, #0
 800fd72:	d1fa      	bne.n	800fd6a <ai_platform_network_create+0x52>
 800fd74:	4a4e      	ldr	r2, [pc, #312]	; (800feb0 <ai_platform_network_create+0x198>)
 800fd76:	6891      	ldr	r1, [r2, #8]
 800fd78:	b911      	cbnz	r1, 800fd80 <ai_platform_network_create+0x68>
 800fd7a:	6812      	ldr	r2, [r2, #0]
 800fd7c:	3201      	adds	r2, #1
 800fd7e:	d008      	beq.n	800fd92 <ai_platform_network_create+0x7a>
 800fd80:	4618      	mov	r0, r3
 800fd82:	e7e6      	b.n	800fd52 <ai_platform_network_create+0x3a>
 800fd84:	2101      	movs	r1, #1
 800fd86:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800fd8a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800fd8e:	2900      	cmp	r1, #0
 800fd90:	d1fb      	bne.n	800fd8a <ai_platform_network_create+0x72>
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff fcda 	bl	800f74c <_ai_platform_release_crc>
 800fd98:	f7ff fcd6 	bl	800f748 <_ai_platform_acquire_crc>
 800fd9c:	4b42      	ldr	r3, [pc, #264]	; (800fea8 <ai_platform_network_create+0x190>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fda4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fda8:	d010      	beq.n	800fdcc <ai_platform_network_create+0xb4>
 800fdaa:	4b40      	ldr	r3, [pc, #256]	; (800feac <ai_platform_network_create+0x194>)
 800fdac:	2201      	movs	r2, #1
 800fdae:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800fdb2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800fdb6:	2900      	cmp	r1, #0
 800fdb8:	d1fb      	bne.n	800fdb2 <ai_platform_network_create+0x9a>
 800fdba:	4a3e      	ldr	r2, [pc, #248]	; (800feb4 <ai_platform_network_create+0x19c>)
 800fdbc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800fdc0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800fdc4:	4b3c      	ldr	r3, [pc, #240]	; (800feb8 <ai_platform_network_create+0x1a0>)
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d00c      	beq.n	800fde4 <ai_platform_network_create+0xcc>
 800fdca:	e7fe      	b.n	800fdca <ai_platform_network_create+0xb2>
 800fdcc:	4a38      	ldr	r2, [pc, #224]	; (800feb0 <ai_platform_network_create+0x198>)
 800fdce:	2301      	movs	r3, #1
 800fdd0:	6093      	str	r3, [r2, #8]
 800fdd2:	6893      	ldr	r3, [r2, #8]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1fc      	bne.n	800fdd2 <ai_platform_network_create+0xba>
 800fdd8:	4b36      	ldr	r3, [pc, #216]	; (800feb4 <ai_platform_network_create+0x19c>)
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	6812      	ldr	r2, [r2, #0]
 800fdde:	4b36      	ldr	r3, [pc, #216]	; (800feb8 <ai_platform_network_create+0x1a0>)
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d122      	bne.n	800fe2a <ai_platform_network_create+0x112>
 800fde4:	f7ff fcb2 	bl	800f74c <_ai_platform_release_crc>
 800fde8:	b38e      	cbz	r6, 800fe4e <ai_platform_network_create+0x136>
 800fdea:	4b34      	ldr	r3, [pc, #208]	; (800febc <ai_platform_network_create+0x1a4>)
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	6035      	str	r5, [r6, #0]
 800fdf0:	f000 fc62 	bl	80106b8 <core_init>
 800fdf4:	b1d0      	cbz	r0, 800fe2c <ai_platform_network_create+0x114>
 800fdf6:	f7ff fca7 	bl	800f748 <_ai_platform_acquire_crc>
 800fdfa:	4b2b      	ldr	r3, [pc, #172]	; (800fea8 <ai_platform_network_create+0x190>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe06:	d025      	beq.n	800fe54 <ai_platform_network_create+0x13c>
 800fe08:	4a28      	ldr	r2, [pc, #160]	; (800feac <ai_platform_network_create+0x194>)
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fe10:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1fb      	bne.n	800fe10 <ai_platform_network_create+0xf8>
 800fe18:	4b26      	ldr	r3, [pc, #152]	; (800feb4 <ai_platform_network_create+0x19c>)
 800fe1a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fe1e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fe22:	4b25      	ldr	r3, [pc, #148]	; (800feb8 <ai_platform_network_create+0x1a0>)
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d022      	beq.n	800fe6e <ai_platform_network_create+0x156>
 800fe28:	e7fe      	b.n	800fe28 <ai_platform_network_create+0x110>
 800fe2a:	e7fe      	b.n	800fe2a <ai_platform_network_create+0x112>
 800fe2c:	2430      	movs	r4, #48	; 0x30
 800fe2e:	2300      	movs	r3, #0
 800fe30:	6033      	str	r3, [r6, #0]
 800fe32:	2610      	movs	r6, #16
 800fe34:	464a      	mov	r2, r9
 800fe36:	4641      	mov	r1, r8
 800fe38:	4638      	mov	r0, r7
 800fe3a:	f001 ff27 	bl	8011c8c <ai_version_get>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2000      	movs	r0, #0
 800fe42:	f364 0007 	bfi	r0, r4, #0, #8
 800fe46:	64ab      	str	r3, [r5, #72]	; 0x48
 800fe48:	f366 201f 	bfi	r0, r6, #8, #24
 800fe4c:	e785      	b.n	800fd5a <ai_platform_network_create+0x42>
 800fe4e:	f241 0010 	movw	r0, #4112	; 0x1010
 800fe52:	e782      	b.n	800fd5a <ai_platform_network_create+0x42>
 800fe54:	4a16      	ldr	r2, [pc, #88]	; (800feb0 <ai_platform_network_create+0x198>)
 800fe56:	2301      	movs	r3, #1
 800fe58:	6093      	str	r3, [r2, #8]
 800fe5a:	6893      	ldr	r3, [r2, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1fc      	bne.n	800fe5a <ai_platform_network_create+0x142>
 800fe60:	4b14      	ldr	r3, [pc, #80]	; (800feb4 <ai_platform_network_create+0x19c>)
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	6812      	ldr	r2, [r2, #0]
 800fe66:	4b14      	ldr	r3, [pc, #80]	; (800feb8 <ai_platform_network_create+0x1a0>)
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d000      	beq.n	800fe6e <ai_platform_network_create+0x156>
 800fe6c:	e7fe      	b.n	800fe6c <ai_platform_network_create+0x154>
 800fe6e:	f7ff fc6d 	bl	800f74c <_ai_platform_release_crc>
 800fe72:	2200      	movs	r2, #0
 800fe74:	4641      	mov	r1, r8
 800fe76:	4638      	mov	r0, r7
 800fe78:	f001 ff08 	bl	8011c8c <ai_version_get>
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	4604      	mov	r4, r0
 800fe80:	2105      	movs	r1, #5
 800fe82:	2001      	movs	r0, #1
 800fe84:	f001 ff02 	bl	8011c8c <ai_version_get>
 800fe88:	4284      	cmp	r4, r0
 800fe8a:	d001      	beq.n	800fe90 <ai_platform_network_create+0x178>
 800fe8c:	2401      	movs	r4, #1
 800fe8e:	e7ce      	b.n	800fe2e <ai_platform_network_create+0x116>
 800fe90:	4b0b      	ldr	r3, [pc, #44]	; (800fec0 <ai_platform_network_create+0x1a8>)
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	a801      	add	r0, sp, #4
 800fe96:	f000 fc23 	bl	80106e0 <ai_check_custom_types>
 800fe9a:	b110      	cbz	r0, 800fea2 <ai_platform_network_create+0x18a>
 800fe9c:	2600      	movs	r6, #0
 800fe9e:	4634      	mov	r4, r6
 800fea0:	e7c8      	b.n	800fe34 <ai_platform_network_create+0x11c>
 800fea2:	2402      	movs	r4, #2
 800fea4:	e7c3      	b.n	800fe2e <ai_platform_network_create+0x116>
 800fea6:	bf00      	nop
 800fea8:	e0042000 	.word	0xe0042000
 800feac:	58024000 	.word	0x58024000
 800feb0:	40023000 	.word	0x40023000
 800feb4:	f407a5c2 	.word	0xf407a5c2
 800feb8:	b5e8b5cd 	.word	0xb5e8b5cd
 800febc:	a1c00100 	.word	0xa1c00100
 800fec0:	84048403 	.word	0x84048403

0800fec4 <ai_platform_network_init>:
 800fec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec8:	b1f8      	cbz	r0, 800ff0a <ai_platform_network_init+0x46>
 800feca:	4b6e      	ldr	r3, [pc, #440]	; (8010084 <ai_platform_network_init+0x1c0>)
 800fecc:	6802      	ldr	r2, [r0, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	4604      	mov	r4, r0
 800fed2:	d11a      	bne.n	800ff0a <ai_platform_network_init+0x46>
 800fed4:	460e      	mov	r6, r1
 800fed6:	f7ff fc37 	bl	800f748 <_ai_platform_acquire_crc>
 800feda:	4b6b      	ldr	r3, [pc, #428]	; (8010088 <ai_platform_network_init+0x1c4>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fee6:	d03d      	beq.n	800ff64 <ai_platform_network_init+0xa0>
 800fee8:	4a68      	ldr	r2, [pc, #416]	; (801008c <ai_platform_network_init+0x1c8>)
 800feea:	2301      	movs	r3, #1
 800feec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fef0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1fb      	bne.n	800fef0 <ai_platform_network_init+0x2c>
 800fef8:	4b65      	ldr	r3, [pc, #404]	; (8010090 <ai_platform_network_init+0x1cc>)
 800fefa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fefe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ff02:	4b64      	ldr	r3, [pc, #400]	; (8010094 <ai_platform_network_init+0x1d0>)
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d039      	beq.n	800ff7c <ai_platform_network_init+0xb8>
 800ff08:	e7fe      	b.n	800ff08 <ai_platform_network_init+0x44>
 800ff0a:	f7ff fc1d 	bl	800f748 <_ai_platform_acquire_crc>
 800ff0e:	4b5e      	ldr	r3, [pc, #376]	; (8010088 <ai_platform_network_init+0x1c4>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff1a:	d010      	beq.n	800ff3e <ai_platform_network_init+0x7a>
 800ff1c:	4a5b      	ldr	r2, [pc, #364]	; (801008c <ai_platform_network_init+0x1c8>)
 800ff1e:	2301      	movs	r3, #1
 800ff20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1fb      	bne.n	800ff24 <ai_platform_network_init+0x60>
 800ff2c:	4b58      	ldr	r3, [pc, #352]	; (8010090 <ai_platform_network_init+0x1cc>)
 800ff2e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ff32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ff36:	4b57      	ldr	r3, [pc, #348]	; (8010094 <ai_platform_network_init+0x1d0>)
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d00d      	beq.n	800ff58 <ai_platform_network_init+0x94>
 800ff3c:	e7fe      	b.n	800ff3c <ai_platform_network_init+0x78>
 800ff3e:	4a56      	ldr	r2, [pc, #344]	; (8010098 <ai_platform_network_init+0x1d4>)
 800ff40:	2301      	movs	r3, #1
 800ff42:	6093      	str	r3, [r2, #8]
 800ff44:	6893      	ldr	r3, [r2, #8]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1fc      	bne.n	800ff44 <ai_platform_network_init+0x80>
 800ff4a:	4b51      	ldr	r3, [pc, #324]	; (8010090 <ai_platform_network_init+0x1cc>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	6812      	ldr	r2, [r2, #0]
 800ff50:	4b50      	ldr	r3, [pc, #320]	; (8010094 <ai_platform_network_init+0x1d0>)
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d000      	beq.n	800ff58 <ai_platform_network_init+0x94>
 800ff56:	e7fe      	b.n	800ff56 <ai_platform_network_init+0x92>
 800ff58:	f7ff fbf8 	bl	800f74c <_ai_platform_release_crc>
 800ff5c:	2600      	movs	r6, #0
 800ff5e:	4630      	mov	r0, r6
 800ff60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff64:	4a4c      	ldr	r2, [pc, #304]	; (8010098 <ai_platform_network_init+0x1d4>)
 800ff66:	2301      	movs	r3, #1
 800ff68:	6093      	str	r3, [r2, #8]
 800ff6a:	6893      	ldr	r3, [r2, #8]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1fc      	bne.n	800ff6a <ai_platform_network_init+0xa6>
 800ff70:	4b47      	ldr	r3, [pc, #284]	; (8010090 <ai_platform_network_init+0x1cc>)
 800ff72:	6013      	str	r3, [r2, #0]
 800ff74:	6812      	ldr	r2, [r2, #0]
 800ff76:	4b47      	ldr	r3, [pc, #284]	; (8010094 <ai_platform_network_init+0x1d0>)
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d11c      	bne.n	800ffb6 <ai_platform_network_init+0xf2>
 800ff7c:	f7ff fbe6 	bl	800f74c <_ai_platform_release_crc>
 800ff80:	2e00      	cmp	r6, #0
 800ff82:	d06f      	beq.n	8010064 <ai_platform_network_init+0x1a0>
 800ff84:	4b45      	ldr	r3, [pc, #276]	; (801009c <ai_platform_network_init+0x1d8>)
 800ff86:	6832      	ldr	r2, [r6, #0]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d115      	bne.n	800ffb8 <ai_platform_network_init+0xf4>
 800ff8c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ff90:	6933      	ldr	r3, [r6, #16]
 800ff92:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800ff96:	89f7      	ldrh	r7, [r6, #14]
 800ff98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff9a:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800ff9e:	2303      	movs	r3, #3
 800ffa0:	84e7      	strh	r7, [r4, #38]	; 0x26
 800ffa2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800ffa6:	60e3      	str	r3, [r4, #12]
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	4626      	mov	r6, r4
 800ffac:	f000 fbc2 	bl	8010734 <ai_layers_init_all>
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	e7fe      	b.n	800ffb6 <ai_platform_network_init+0xf2>
 800ffb8:	2101      	movs	r1, #1
 800ffba:	4630      	mov	r0, r6
 800ffbc:	4635      	mov	r5, r6
 800ffbe:	6876      	ldr	r6, [r6, #4]
 800ffc0:	f7ff fb74 	bl	800f6ac <ai_buffer_get_size>
 800ffc4:	f105 081c 	add.w	r8, r5, #28
 800ffc8:	4681      	mov	r9, r0
 800ffca:	2101      	movs	r1, #1
 800ffcc:	4640      	mov	r0, r8
 800ffce:	6a2f      	ldr	r7, [r5, #32]
 800ffd0:	f7ff fb6c 	bl	800f6ac <ai_buffer_get_size>
 800ffd4:	f1b9 0f00 	cmp.w	r9, #0
 800ffd8:	d025      	beq.n	8010026 <ai_platform_network_init+0x162>
 800ffda:	2201      	movs	r2, #1
 800ffdc:	4696      	mov	lr, r2
 800ffde:	bb30      	cbnz	r0, 801002e <ai_platform_network_init+0x16a>
 800ffe0:	4680      	mov	r8, r0
 800ffe2:	4607      	mov	r7, r0
 800ffe4:	b376      	cbz	r6, 8010044 <ai_platform_network_init+0x180>
 800ffe6:	8be3      	ldrh	r3, [r4, #30]
 800ffe8:	4573      	cmp	r3, lr
 800ffea:	d323      	bcc.n	8010034 <ai_platform_network_init+0x170>
 800ffec:	b142      	cbz	r2, 8010000 <ai_platform_network_init+0x13c>
 800ffee:	46ac      	mov	ip, r5
 800fff0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fff4:	6a25      	ldr	r5, [r4, #32]
 800fff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fff8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800fffc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010000:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010002:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8010006:	2600      	movs	r6, #0
 8010008:	42bb      	cmp	r3, r7
 801000a:	83a6      	strh	r6, [r4, #28]
 801000c:	d323      	bcc.n	8010056 <ai_platform_network_init+0x192>
 801000e:	b37f      	cbz	r7, 8010070 <ai_platform_network_init+0x1ac>
 8010010:	46c4      	mov	ip, r8
 8010012:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010016:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801001a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801001e:	46b6      	mov	lr, r6
 8010020:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010024:	e7bb      	b.n	800ff9e <ai_platform_network_init+0xda>
 8010026:	464a      	mov	r2, r9
 8010028:	46ce      	mov	lr, r9
 801002a:	464d      	mov	r5, r9
 801002c:	e7d7      	b.n	800ffde <ai_platform_network_init+0x11a>
 801002e:	b30f      	cbz	r7, 8010074 <ai_platform_network_init+0x1b0>
 8010030:	2701      	movs	r7, #1
 8010032:	e7d7      	b.n	800ffe4 <ai_platform_network_init+0x120>
 8010034:	2212      	movs	r2, #18
 8010036:	2116      	movs	r1, #22
 8010038:	f104 0010 	add.w	r0, r4, #16
 801003c:	f000 fb44 	bl	80106c8 <core_set_error>
 8010040:	2600      	movs	r6, #0
 8010042:	e78c      	b.n	800ff5e <ai_platform_network_init+0x9a>
 8010044:	f1b9 0f00 	cmp.w	r9, #0
 8010048:	d0cd      	beq.n	800ffe6 <ai_platform_network_init+0x122>
 801004a:	2110      	movs	r1, #16
 801004c:	2212      	movs	r2, #18
 801004e:	1860      	adds	r0, r4, r1
 8010050:	f000 fb3a 	bl	80106c8 <core_set_error>
 8010054:	e783      	b.n	800ff5e <ai_platform_network_init+0x9a>
 8010056:	2213      	movs	r2, #19
 8010058:	2116      	movs	r1, #22
 801005a:	f104 0010 	add.w	r0, r4, #16
 801005e:	f000 fb33 	bl	80106c8 <core_set_error>
 8010062:	e77c      	b.n	800ff5e <ai_platform_network_init+0x9a>
 8010064:	2110      	movs	r1, #16
 8010066:	2211      	movs	r2, #17
 8010068:	1860      	adds	r0, r4, r1
 801006a:	f000 fb2d 	bl	80106c8 <core_set_error>
 801006e:	e776      	b.n	800ff5e <ai_platform_network_init+0x9a>
 8010070:	46be      	mov	lr, r7
 8010072:	e794      	b.n	800ff9e <ai_platform_network_init+0xda>
 8010074:	2110      	movs	r1, #16
 8010076:	2213      	movs	r2, #19
 8010078:	1860      	adds	r0, r4, r1
 801007a:	f000 fb25 	bl	80106c8 <core_set_error>
 801007e:	463e      	mov	r6, r7
 8010080:	e76d      	b.n	800ff5e <ai_platform_network_init+0x9a>
 8010082:	bf00      	nop
 8010084:	a1c00100 	.word	0xa1c00100
 8010088:	e0042000 	.word	0xe0042000
 801008c:	58024000 	.word	0x58024000
 8010090:	f407a5c2 	.word	0xf407a5c2
 8010094:	b5e8b5cd 	.word	0xb5e8b5cd
 8010098:	40023000 	.word	0x40023000
 801009c:	a1facade 	.word	0xa1facade

080100a0 <ai_platform_network_post_init>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	b1f0      	cbz	r0, 80100e2 <ai_platform_network_post_init+0x42>
 80100a4:	4b3c      	ldr	r3, [pc, #240]	; (8010198 <ai_platform_network_post_init+0xf8>)
 80100a6:	6802      	ldr	r2, [r0, #0]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	4604      	mov	r4, r0
 80100ac:	d119      	bne.n	80100e2 <ai_platform_network_post_init+0x42>
 80100ae:	f7ff fb4b 	bl	800f748 <_ai_platform_acquire_crc>
 80100b2:	4b3a      	ldr	r3, [pc, #232]	; (801019c <ai_platform_network_post_init+0xfc>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100be:	d03b      	beq.n	8010138 <ai_platform_network_post_init+0x98>
 80100c0:	4a37      	ldr	r2, [pc, #220]	; (80101a0 <ai_platform_network_post_init+0x100>)
 80100c2:	2301      	movs	r3, #1
 80100c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80100c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1fb      	bne.n	80100c8 <ai_platform_network_post_init+0x28>
 80100d0:	4b34      	ldr	r3, [pc, #208]	; (80101a4 <ai_platform_network_post_init+0x104>)
 80100d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80100d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80100da:	4b33      	ldr	r3, [pc, #204]	; (80101a8 <ai_platform_network_post_init+0x108>)
 80100dc:	429a      	cmp	r2, r3
 80100de:	d037      	beq.n	8010150 <ai_platform_network_post_init+0xb0>
 80100e0:	e7fe      	b.n	80100e0 <ai_platform_network_post_init+0x40>
 80100e2:	f7ff fb31 	bl	800f748 <_ai_platform_acquire_crc>
 80100e6:	4b2d      	ldr	r3, [pc, #180]	; (801019c <ai_platform_network_post_init+0xfc>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100f2:	d010      	beq.n	8010116 <ai_platform_network_post_init+0x76>
 80100f4:	4a2a      	ldr	r2, [pc, #168]	; (80101a0 <ai_platform_network_post_init+0x100>)
 80100f6:	2301      	movs	r3, #1
 80100f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80100fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010100:	2b00      	cmp	r3, #0
 8010102:	d1fb      	bne.n	80100fc <ai_platform_network_post_init+0x5c>
 8010104:	4b27      	ldr	r3, [pc, #156]	; (80101a4 <ai_platform_network_post_init+0x104>)
 8010106:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801010a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801010e:	4b26      	ldr	r3, [pc, #152]	; (80101a8 <ai_platform_network_post_init+0x108>)
 8010110:	429a      	cmp	r2, r3
 8010112:	d00d      	beq.n	8010130 <ai_platform_network_post_init+0x90>
 8010114:	e7fe      	b.n	8010114 <ai_platform_network_post_init+0x74>
 8010116:	4a25      	ldr	r2, [pc, #148]	; (80101ac <ai_platform_network_post_init+0x10c>)
 8010118:	2301      	movs	r3, #1
 801011a:	6093      	str	r3, [r2, #8]
 801011c:	6893      	ldr	r3, [r2, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d1fc      	bne.n	801011c <ai_platform_network_post_init+0x7c>
 8010122:	4b20      	ldr	r3, [pc, #128]	; (80101a4 <ai_platform_network_post_init+0x104>)
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	6812      	ldr	r2, [r2, #0]
 8010128:	4b1f      	ldr	r3, [pc, #124]	; (80101a8 <ai_platform_network_post_init+0x108>)
 801012a:	429a      	cmp	r2, r3
 801012c:	d000      	beq.n	8010130 <ai_platform_network_post_init+0x90>
 801012e:	e7fe      	b.n	801012e <ai_platform_network_post_init+0x8e>
 8010130:	f7ff fb0c 	bl	800f74c <_ai_platform_release_crc>
 8010134:	2000      	movs	r0, #0
 8010136:	bd38      	pop	{r3, r4, r5, pc}
 8010138:	4a1c      	ldr	r2, [pc, #112]	; (80101ac <ai_platform_network_post_init+0x10c>)
 801013a:	2301      	movs	r3, #1
 801013c:	6093      	str	r3, [r2, #8]
 801013e:	6893      	ldr	r3, [r2, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1fc      	bne.n	801013e <ai_platform_network_post_init+0x9e>
 8010144:	4b17      	ldr	r3, [pc, #92]	; (80101a4 <ai_platform_network_post_init+0x104>)
 8010146:	6013      	str	r3, [r2, #0]
 8010148:	6812      	ldr	r2, [r2, #0]
 801014a:	4b17      	ldr	r3, [pc, #92]	; (80101a8 <ai_platform_network_post_init+0x108>)
 801014c:	429a      	cmp	r2, r3
 801014e:	d11a      	bne.n	8010186 <ai_platform_network_post_init+0xe6>
 8010150:	f7ff fafc 	bl	800f74c <_ai_platform_release_crc>
 8010154:	68e3      	ldr	r3, [r4, #12]
 8010156:	f013 0502 	ands.w	r5, r3, #2
 801015a:	d015      	beq.n	8010188 <ai_platform_network_post_init+0xe8>
 801015c:	4620      	mov	r0, r4
 801015e:	f000 faf7 	bl	8010750 <ai_layers_post_init_all>
 8010162:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010164:	b16b      	cbz	r3, 8010182 <ai_platform_network_post_init+0xe2>
 8010166:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010168:	e007      	b.n	801017a <ai_platform_network_post_init+0xda>
 801016a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 801016e:	4798      	blx	r3
 8010170:	692b      	ldr	r3, [r5, #16]
 8010172:	42ab      	cmp	r3, r5
 8010174:	d005      	beq.n	8010182 <ai_platform_network_post_init+0xe2>
 8010176:	b123      	cbz	r3, 8010182 <ai_platform_network_post_init+0xe2>
 8010178:	461d      	mov	r5, r3
 801017a:	4629      	mov	r1, r5
 801017c:	2000      	movs	r0, #0
 801017e:	2d00      	cmp	r5, #0
 8010180:	d1f3      	bne.n	801016a <ai_platform_network_post_init+0xca>
 8010182:	2001      	movs	r0, #1
 8010184:	bd38      	pop	{r3, r4, r5, pc}
 8010186:	e7fe      	b.n	8010186 <ai_platform_network_post_init+0xe6>
 8010188:	2210      	movs	r2, #16
 801018a:	2111      	movs	r1, #17
 801018c:	18a0      	adds	r0, r4, r2
 801018e:	f000 fa9b 	bl	80106c8 <core_set_error>
 8010192:	4628      	mov	r0, r5
 8010194:	bd38      	pop	{r3, r4, r5, pc}
 8010196:	bf00      	nop
 8010198:	a1c00100 	.word	0xa1c00100
 801019c:	e0042000 	.word	0xe0042000
 80101a0:	58024000 	.word	0x58024000
 80101a4:	f407a5c2 	.word	0xf407a5c2
 80101a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80101ac:	40023000 	.word	0x40023000

080101b0 <ai_platform_network_process>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	460e      	mov	r6, r1
 80101b6:	b085      	sub	sp, #20
 80101b8:	4693      	mov	fp, r2
 80101ba:	4605      	mov	r5, r0
 80101bc:	b120      	cbz	r0, 80101c8 <ai_platform_network_process+0x18>
 80101be:	4bb8      	ldr	r3, [pc, #736]	; (80104a0 <ai_platform_network_process+0x2f0>)
 80101c0:	6802      	ldr	r2, [r0, #0]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	bf18      	it	ne
 80101c6:	2500      	movne	r5, #0
 80101c8:	f7ff fabe 	bl	800f748 <_ai_platform_acquire_crc>
 80101cc:	4bb5      	ldr	r3, [pc, #724]	; (80104a4 <ai_platform_network_process+0x2f4>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101d8:	d010      	beq.n	80101fc <ai_platform_network_process+0x4c>
 80101da:	4ab3      	ldr	r2, [pc, #716]	; (80104a8 <ai_platform_network_process+0x2f8>)
 80101dc:	2301      	movs	r3, #1
 80101de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80101e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1fb      	bne.n	80101e2 <ai_platform_network_process+0x32>
 80101ea:	4bb0      	ldr	r3, [pc, #704]	; (80104ac <ai_platform_network_process+0x2fc>)
 80101ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80101f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80101f4:	4bae      	ldr	r3, [pc, #696]	; (80104b0 <ai_platform_network_process+0x300>)
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d00d      	beq.n	8010216 <ai_platform_network_process+0x66>
 80101fa:	e7fe      	b.n	80101fa <ai_platform_network_process+0x4a>
 80101fc:	4aad      	ldr	r2, [pc, #692]	; (80104b4 <ai_platform_network_process+0x304>)
 80101fe:	2301      	movs	r3, #1
 8010200:	6093      	str	r3, [r2, #8]
 8010202:	6893      	ldr	r3, [r2, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1fc      	bne.n	8010202 <ai_platform_network_process+0x52>
 8010208:	4ba8      	ldr	r3, [pc, #672]	; (80104ac <ai_platform_network_process+0x2fc>)
 801020a:	6013      	str	r3, [r2, #0]
 801020c:	6812      	ldr	r2, [r2, #0]
 801020e:	4ba8      	ldr	r3, [pc, #672]	; (80104b0 <ai_platform_network_process+0x300>)
 8010210:	429a      	cmp	r2, r3
 8010212:	f040 812c 	bne.w	801046e <ai_platform_network_process+0x2be>
 8010216:	f7ff fa99 	bl	800f74c <_ai_platform_release_crc>
 801021a:	2d00      	cmp	r5, #0
 801021c:	f000 8154 	beq.w	80104c8 <ai_platform_network_process+0x318>
 8010220:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 8124 	beq.w	8010470 <ai_platform_network_process+0x2c0>
 8010228:	68eb      	ldr	r3, [r5, #12]
 801022a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801022e:	f003 0303 	and.w	r3, r3, #3
 8010232:	2700      	movs	r7, #0
 8010234:	2b03      	cmp	r3, #3
 8010236:	616f      	str	r7, [r5, #20]
 8010238:	f040 813e 	bne.w	80104b8 <ai_platform_network_process+0x308>
 801023c:	2e00      	cmp	r6, #0
 801023e:	f000 811d 	beq.w	801047c <ai_platform_network_process+0x2cc>
 8010242:	f1ba 0f00 	cmp.w	sl, #0
 8010246:	f000 8119 	beq.w	801047c <ai_platform_network_process+0x2cc>
 801024a:	f8ba 3000 	ldrh.w	r3, [sl]
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 8114 	beq.w	801047c <ai_platform_network_process+0x2cc>
 8010254:	69b3      	ldr	r3, [r6, #24]
 8010256:	f8cd b00c 	str.w	fp, [sp, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8010260:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d072      	beq.n	801034e <ai_platform_network_process+0x19e>
 8010268:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801026c:	2c00      	cmp	r4, #0
 801026e:	d06e      	beq.n	801034e <ai_platform_network_process+0x19e>
 8010270:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010274:	f8d3 9000 	ldr.w	r9, [r3]
 8010278:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 801027c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010280:	f000 81de 	beq.w	8010640 <ai_platform_network_process+0x490>
 8010284:	69a3      	ldr	r3, [r4, #24]
 8010286:	2101      	movs	r1, #1
 8010288:	4630      	mov	r0, r6
 801028a:	685d      	ldr	r5, [r3, #4]
 801028c:	f7ff fa0e 	bl	800f6ac <ai_buffer_get_size>
 8010290:	4285      	cmp	r5, r0
 8010292:	f0c0 811b 	bcc.w	80104cc <ai_platform_network_process+0x31c>
 8010296:	68e0      	ldr	r0, [r4, #12]
 8010298:	69b1      	ldr	r1, [r6, #24]
 801029a:	68c2      	ldr	r2, [r0, #12]
 801029c:	68cb      	ldr	r3, [r1, #12]
 801029e:	429a      	cmp	r2, r3
 80102a0:	f040 8114 	bne.w	80104cc <ai_platform_network_process+0x31c>
 80102a4:	6882      	ldr	r2, [r0, #8]
 80102a6:	688b      	ldr	r3, [r1, #8]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	f040 810f 	bne.w	80104cc <ai_platform_network_process+0x31c>
 80102ae:	6842      	ldr	r2, [r0, #4]
 80102b0:	684b      	ldr	r3, [r1, #4]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	f040 810a 	bne.w	80104cc <ai_platform_network_process+0x31c>
 80102b8:	69a3      	ldr	r3, [r4, #24]
 80102ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102be:	f001 fcd3 	bl	8011c68 <ai_array_get_data_byte_size>
 80102c2:	4605      	mov	r5, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	f001 fce7 	bl	8011c98 <get_tensor_byte_size>
 80102ca:	4285      	cmp	r5, r0
 80102cc:	f0c0 80fe 	bcc.w	80104cc <ai_platform_network_process+0x31c>
 80102d0:	69a3      	ldr	r3, [r4, #24]
 80102d2:	6818      	ldr	r0, [r3, #0]
 80102d4:	f001 fc34 	bl	8011b40 <ai_array_to_buffer_fmt>
 80102d8:	6833      	ldr	r3, [r6, #0]
 80102da:	4058      	eors	r0, r3
 80102dc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80102e0:	f040 81b9 	bne.w	8010656 <ai_platform_network_process+0x4a6>
 80102e4:	6873      	ldr	r3, [r6, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 81ac 	beq.w	8010644 <ai_platform_network_process+0x494>
 80102ec:	69b3      	ldr	r3, [r6, #24]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f000 819c 	beq.w	801062e <ai_platform_network_process+0x47e>
 80102f6:	9a01      	ldr	r2, [sp, #4]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	bf38      	it	cc
 80102fc:	461a      	movcc	r2, r3
 80102fe:	4620      	mov	r0, r4
 8010300:	9201      	str	r2, [sp, #4]
 8010302:	f001 fcc9 	bl	8011c98 <get_tensor_byte_size>
 8010306:	f8c8 0008 	str.w	r0, [r8, #8]
 801030a:	69b3      	ldr	r3, [r6, #24]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	fb00 f303 	mul.w	r3, r0, r3
 8010312:	f8c8 300c 	str.w	r3, [r8, #12]
 8010316:	6871      	ldr	r1, [r6, #4]
 8010318:	f8c8 1004 	str.w	r1, [r8, #4]
 801031c:	440b      	add	r3, r1
 801031e:	f849 300b 	str.w	r3, [r9, fp]
 8010322:	69a0      	ldr	r0, [r4, #24]
 8010324:	6803      	ldr	r3, [r0, #0]
 8010326:	009a      	lsls	r2, r3, #2
 8010328:	f107 0701 	add.w	r7, r7, #1
 801032c:	f106 061c 	add.w	r6, r6, #28
 8010330:	f100 80af 	bmi.w	8010492 <ai_platform_network_process+0x2e2>
 8010334:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010338:	1a9b      	subs	r3, r3, r2
 801033a:	4419      	add	r1, r3
 801033c:	6081      	str	r1, [r0, #8]
 801033e:	69a3      	ldr	r3, [r4, #24]
 8010340:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010344:	60da      	str	r2, [r3, #12]
 8010346:	f8ba 3000 	ldrh.w	r3, [sl]
 801034a:	42bb      	cmp	r3, r7
 801034c:	d888      	bhi.n	8010260 <ai_platform_network_process+0xb0>
 801034e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8010352:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8010354:	f1bb 0f00 	cmp.w	fp, #0
 8010358:	f000 8186 	beq.w	8010668 <ai_platform_network_process+0x4b8>
 801035c:	2a01      	cmp	r2, #1
 801035e:	f240 815e 	bls.w	801061e <ai_platform_network_process+0x46e>
 8010362:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8010366:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f000 8157 	beq.w	801061e <ai_platform_network_process+0x46e>
 8010370:	465e      	mov	r6, fp
 8010372:	2700      	movs	r7, #0
 8010374:	462c      	mov	r4, r5
 8010376:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 80b4 	beq.w	80104e8 <ai_platform_network_process+0x338>
 8010380:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8010384:	2d00      	cmp	r5, #0
 8010386:	f000 80af 	beq.w	80104e8 <ai_platform_network_process+0x338>
 801038a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801038e:	f8d3 8000 	ldr.w	r8, [r3]
 8010392:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010396:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801039a:	f000 8171 	beq.w	8010680 <ai_platform_network_process+0x4d0>
 801039e:	69ab      	ldr	r3, [r5, #24]
 80103a0:	2101      	movs	r1, #1
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	9302      	str	r3, [sp, #8]
 80103a6:	4630      	mov	r0, r6
 80103a8:	f7ff f980 	bl	800f6ac <ai_buffer_get_size>
 80103ac:	9b02      	ldr	r3, [sp, #8]
 80103ae:	4283      	cmp	r3, r0
 80103b0:	f0c0 8134 	bcc.w	801061c <ai_platform_network_process+0x46c>
 80103b4:	68e8      	ldr	r0, [r5, #12]
 80103b6:	69b1      	ldr	r1, [r6, #24]
 80103b8:	68c2      	ldr	r2, [r0, #12]
 80103ba:	68cb      	ldr	r3, [r1, #12]
 80103bc:	429a      	cmp	r2, r3
 80103be:	f040 812d 	bne.w	801061c <ai_platform_network_process+0x46c>
 80103c2:	6882      	ldr	r2, [r0, #8]
 80103c4:	688b      	ldr	r3, [r1, #8]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	f040 8128 	bne.w	801061c <ai_platform_network_process+0x46c>
 80103cc:	6842      	ldr	r2, [r0, #4]
 80103ce:	684b      	ldr	r3, [r1, #4]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	f040 8123 	bne.w	801061c <ai_platform_network_process+0x46c>
 80103d6:	69ab      	ldr	r3, [r5, #24]
 80103d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103dc:	f001 fc44 	bl	8011c68 <ai_array_get_data_byte_size>
 80103e0:	9002      	str	r0, [sp, #8]
 80103e2:	4628      	mov	r0, r5
 80103e4:	f001 fc58 	bl	8011c98 <get_tensor_byte_size>
 80103e8:	9b02      	ldr	r3, [sp, #8]
 80103ea:	4283      	cmp	r3, r0
 80103ec:	f0c0 8116 	bcc.w	801061c <ai_platform_network_process+0x46c>
 80103f0:	69ab      	ldr	r3, [r5, #24]
 80103f2:	6818      	ldr	r0, [r3, #0]
 80103f4:	f001 fba4 	bl	8011b40 <ai_array_to_buffer_fmt>
 80103f8:	6833      	ldr	r3, [r6, #0]
 80103fa:	4058      	eors	r0, r3
 80103fc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8010400:	f040 8136 	bne.w	8010670 <ai_platform_network_process+0x4c0>
 8010404:	6873      	ldr	r3, [r6, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 814d 	beq.w	80106a6 <ai_platform_network_process+0x4f6>
 801040c:	69b3      	ldr	r3, [r6, #24]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 813f 	beq.w	8010694 <ai_platform_network_process+0x4e4>
 8010416:	9a01      	ldr	r2, [sp, #4]
 8010418:	429a      	cmp	r2, r3
 801041a:	bf38      	it	cc
 801041c:	461a      	movcc	r2, r3
 801041e:	4628      	mov	r0, r5
 8010420:	9201      	str	r2, [sp, #4]
 8010422:	f001 fc39 	bl	8011c98 <get_tensor_byte_size>
 8010426:	f8ca 0008 	str.w	r0, [sl, #8]
 801042a:	69b3      	ldr	r3, [r6, #24]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	fb00 f303 	mul.w	r3, r0, r3
 8010432:	f8ca 300c 	str.w	r3, [sl, #12]
 8010436:	6871      	ldr	r1, [r6, #4]
 8010438:	f8ca 1004 	str.w	r1, [sl, #4]
 801043c:	440b      	add	r3, r1
 801043e:	f848 300b 	str.w	r3, [r8, fp]
 8010442:	69a8      	ldr	r0, [r5, #24]
 8010444:	6803      	ldr	r3, [r0, #0]
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	f107 0701 	add.w	r7, r7, #1
 801044c:	f106 061c 	add.w	r6, r6, #28
 8010450:	d445      	bmi.n	80104de <ai_platform_network_process+0x32e>
 8010452:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010456:	1a9b      	subs	r3, r3, r2
 8010458:	4419      	add	r1, r3
 801045a:	6081      	str	r1, [r0, #8]
 801045c:	69ab      	ldr	r3, [r5, #24]
 801045e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010462:	60da      	str	r2, [r3, #12]
 8010464:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010468:	429f      	cmp	r7, r3
 801046a:	d384      	bcc.n	8010376 <ai_platform_network_process+0x1c6>
 801046c:	e03c      	b.n	80104e8 <ai_platform_network_process+0x338>
 801046e:	e7fe      	b.n	801046e <ai_platform_network_process+0x2be>
 8010470:	68ea      	ldr	r2, [r5, #12]
 8010472:	616b      	str	r3, [r5, #20]
 8010474:	f002 0203 	and.w	r2, r2, #3
 8010478:	2a03      	cmp	r2, #3
 801047a:	d11d      	bne.n	80104b8 <ai_platform_network_process+0x308>
 801047c:	2217      	movs	r2, #23
 801047e:	2112      	movs	r1, #18
 8010480:	f105 0010 	add.w	r0, r5, #16
 8010484:	f000 f920 	bl	80106c8 <core_set_error>
 8010488:	2400      	movs	r4, #0
 801048a:	4620      	mov	r0, r4
 801048c:	b005      	add	sp, #20
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	f8ba 3000 	ldrh.w	r3, [sl]
 8010496:	429f      	cmp	r7, r3
 8010498:	f4ff aee2 	bcc.w	8010260 <ai_platform_network_process+0xb0>
 801049c:	e757      	b.n	801034e <ai_platform_network_process+0x19e>
 801049e:	bf00      	nop
 80104a0:	a1c00100 	.word	0xa1c00100
 80104a4:	e0042000 	.word	0xe0042000
 80104a8:	58024000 	.word	0x58024000
 80104ac:	f407a5c2 	.word	0xf407a5c2
 80104b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80104b4:	40023000 	.word	0x40023000
 80104b8:	2230      	movs	r2, #48	; 0x30
 80104ba:	2111      	movs	r1, #17
 80104bc:	f105 0010 	add.w	r0, r5, #16
 80104c0:	f000 f902 	bl	80106c8 <core_set_error>
 80104c4:	2400      	movs	r4, #0
 80104c6:	e7e0      	b.n	801048a <ai_platform_network_process+0x2da>
 80104c8:	462c      	mov	r4, r5
 80104ca:	e7de      	b.n	801048a <ai_platform_network_process+0x2da>
 80104cc:	9d02      	ldr	r5, [sp, #8]
 80104ce:	2218      	movs	r2, #24
 80104d0:	2112      	movs	r1, #18
 80104d2:	f105 0010 	add.w	r0, r5, #16
 80104d6:	f000 f8f7 	bl	80106c8 <core_set_error>
 80104da:	2400      	movs	r4, #0
 80104dc:	e7d5      	b.n	801048a <ai_platform_network_process+0x2da>
 80104de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80104e2:	429f      	cmp	r7, r3
 80104e4:	f4ff af47 	bcc.w	8010376 <ai_platform_network_process+0x1c6>
 80104e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80104ec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80104ee:	82a3      	strh	r3, [r4, #20]
 80104f0:	4625      	mov	r5, r4
 80104f2:	2a00      	cmp	r2, #0
 80104f4:	f040 808c 	bne.w	8010610 <ai_platform_network_process+0x460>
 80104f8:	4616      	mov	r6, r2
 80104fa:	4617      	mov	r7, r2
 80104fc:	8aec      	ldrh	r4, [r5, #22]
 80104fe:	429c      	cmp	r4, r3
 8010500:	bf38      	it	cc
 8010502:	46ab      	movcc	fp, r5
 8010504:	d2c1      	bcs.n	801048a <ai_platform_network_process+0x2da>
 8010506:	2e00      	cmp	r6, #0
 8010508:	d030      	beq.n	801056c <ai_platform_network_process+0x3bc>
 801050a:	f04f 0800 	mov.w	r8, #0
 801050e:	e014      	b.n	801053a <ai_platform_network_process+0x38a>
 8010510:	6882      	ldr	r2, [r0, #8]
 8010512:	68c5      	ldr	r5, [r0, #12]
 8010514:	6863      	ldr	r3, [r4, #4]
 8010516:	1b52      	subs	r2, r2, r5
 8010518:	4413      	add	r3, r2
 801051a:	6083      	str	r3, [r0, #8]
 801051c:	698b      	ldr	r3, [r1, #24]
 801051e:	6862      	ldr	r2, [r4, #4]
 8010520:	60da      	str	r2, [r3, #12]
 8010522:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010526:	f859 200a 	ldr.w	r2, [r9, sl]
 801052a:	440b      	add	r3, r1
 801052c:	4293      	cmp	r3, r2
 801052e:	bf24      	itt	cs
 8010530:	68e3      	ldrcs	r3, [r4, #12]
 8010532:	1ad3      	subcs	r3, r2, r3
 8010534:	6063      	str	r3, [r4, #4]
 8010536:	f108 0801 	add.w	r8, r8, #1
 801053a:	8833      	ldrh	r3, [r6, #0]
 801053c:	4543      	cmp	r3, r8
 801053e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010542:	d913      	bls.n	801056c <ai_platform_network_process+0x3bc>
 8010544:	6873      	ldr	r3, [r6, #4]
 8010546:	b18b      	cbz	r3, 801056c <ai_platform_network_process+0x3bc>
 8010548:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801054c:	b171      	cbz	r1, 801056c <ai_platform_network_process+0x3bc>
 801054e:	6988      	ldr	r0, [r1, #24]
 8010550:	68b2      	ldr	r2, [r6, #8]
 8010552:	6803      	ldr	r3, [r0, #0]
 8010554:	f8d2 9000 	ldr.w	r9, [r2]
 8010558:	009d      	lsls	r5, r3, #2
 801055a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801055e:	d5d7      	bpl.n	8010510 <ai_platform_network_process+0x360>
 8010560:	6881      	ldr	r1, [r0, #8]
 8010562:	68a2      	ldr	r2, [r4, #8]
 8010564:	6860      	ldr	r0, [r4, #4]
 8010566:	f001 fa65 	bl	8011a34 <st_int8_copy>
 801056a:	e7da      	b.n	8010522 <ai_platform_network_process+0x372>
 801056c:	4658      	mov	r0, fp
 801056e:	f000 f903 	bl	8010778 <ai_layers_forward_all>
 8010572:	2f00      	cmp	r7, #0
 8010574:	d03d      	beq.n	80105f2 <ai_platform_network_process+0x442>
 8010576:	2400      	movs	r4, #0
 8010578:	e016      	b.n	80105a8 <ai_platform_network_process+0x3f8>
 801057a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801057e:	f859 100a 	ldr.w	r1, [r9, sl]
 8010582:	4413      	add	r3, r2
 8010584:	428b      	cmp	r3, r1
 8010586:	bf24      	itt	cs
 8010588:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801058c:	1acb      	subcs	r3, r1, r3
 801058e:	f8c8 3004 	str.w	r3, [r8, #4]
 8010592:	6981      	ldr	r1, [r0, #24]
 8010594:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010598:	1b52      	subs	r2, r2, r5
 801059a:	4413      	add	r3, r2
 801059c:	608b      	str	r3, [r1, #8]
 801059e:	6983      	ldr	r3, [r0, #24]
 80105a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80105a4:	60da      	str	r2, [r3, #12]
 80105a6:	3401      	adds	r4, #1
 80105a8:	883b      	ldrh	r3, [r7, #0]
 80105aa:	42a3      	cmp	r3, r4
 80105ac:	d921      	bls.n	80105f2 <ai_platform_network_process+0x442>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	b1fb      	cbz	r3, 80105f2 <ai_platform_network_process+0x442>
 80105b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80105b6:	b1e0      	cbz	r0, 80105f2 <ai_platform_network_process+0x442>
 80105b8:	68ba      	ldr	r2, [r7, #8]
 80105ba:	6983      	ldr	r3, [r0, #24]
 80105bc:	f8d2 9000 	ldr.w	r9, [r2]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	0092      	lsls	r2, r2, #2
 80105c4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80105c8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80105cc:	d5d5      	bpl.n	801057a <ai_platform_network_process+0x3ca>
 80105ce:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80105d2:	6898      	ldr	r0, [r3, #8]
 80105d4:	f001 fa2e 	bl	8011a34 <st_int8_copy>
 80105d8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80105dc:	f859 200a 	ldr.w	r2, [r9, sl]
 80105e0:	440b      	add	r3, r1
 80105e2:	4293      	cmp	r3, r2
 80105e4:	bf24      	itt	cs
 80105e6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80105ea:	1ad3      	subcs	r3, r2, r3
 80105ec:	f8c8 3004 	str.w	r3, [r8, #4]
 80105f0:	e7d9      	b.n	80105a6 <ai_platform_network_process+0x3f6>
 80105f2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80105f6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80105fa:	3401      	adds	r4, #1
 80105fc:	b2a4      	uxth	r4, r4
 80105fe:	42a3      	cmp	r3, r4
 8010600:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010604:	f63f af7f 	bhi.w	8010506 <ai_platform_network_process+0x356>
 8010608:	4620      	mov	r0, r4
 801060a:	b005      	add	sp, #20
 801060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010610:	2a01      	cmp	r2, #1
 8010612:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8010614:	d03c      	beq.n	8010690 <ai_platform_network_process+0x4e0>
 8010616:	f106 070c 	add.w	r7, r6, #12
 801061a:	e76f      	b.n	80104fc <ai_platform_network_process+0x34c>
 801061c:	4625      	mov	r5, r4
 801061e:	2218      	movs	r2, #24
 8010620:	2113      	movs	r1, #19
 8010622:	f105 0010 	add.w	r0, r5, #16
 8010626:	f000 f84f 	bl	80106c8 <core_set_error>
 801062a:	2400      	movs	r4, #0
 801062c:	e72d      	b.n	801048a <ai_platform_network_process+0x2da>
 801062e:	9d02      	ldr	r5, [sp, #8]
 8010630:	4604      	mov	r4, r0
 8010632:	2221      	movs	r2, #33	; 0x21
 8010634:	2112      	movs	r1, #18
 8010636:	f105 0010 	add.w	r0, r5, #16
 801063a:	f000 f845 	bl	80106c8 <core_set_error>
 801063e:	e724      	b.n	801048a <ai_platform_network_process+0x2da>
 8010640:	9d02      	ldr	r5, [sp, #8]
 8010642:	e71b      	b.n	801047c <ai_platform_network_process+0x2cc>
 8010644:	9d02      	ldr	r5, [sp, #8]
 8010646:	4604      	mov	r4, r0
 8010648:	2217      	movs	r2, #23
 801064a:	2112      	movs	r1, #18
 801064c:	f105 0010 	add.w	r0, r5, #16
 8010650:	f000 f83a 	bl	80106c8 <core_set_error>
 8010654:	e719      	b.n	801048a <ai_platform_network_process+0x2da>
 8010656:	9d02      	ldr	r5, [sp, #8]
 8010658:	2219      	movs	r2, #25
 801065a:	2112      	movs	r1, #18
 801065c:	f105 0010 	add.w	r0, r5, #16
 8010660:	f000 f832 	bl	80106c8 <core_set_error>
 8010664:	2400      	movs	r4, #0
 8010666:	e710      	b.n	801048a <ai_platform_network_process+0x2da>
 8010668:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801066c:	82ab      	strh	r3, [r5, #20]
 801066e:	e740      	b.n	80104f2 <ai_platform_network_process+0x342>
 8010670:	f104 0010 	add.w	r0, r4, #16
 8010674:	2219      	movs	r2, #25
 8010676:	2113      	movs	r1, #19
 8010678:	f000 f826 	bl	80106c8 <core_set_error>
 801067c:	2400      	movs	r4, #0
 801067e:	e704      	b.n	801048a <ai_platform_network_process+0x2da>
 8010680:	f104 0010 	add.w	r0, r4, #16
 8010684:	2217      	movs	r2, #23
 8010686:	2113      	movs	r1, #19
 8010688:	f000 f81e 	bl	80106c8 <core_set_error>
 801068c:	4654      	mov	r4, sl
 801068e:	e6fc      	b.n	801048a <ai_platform_network_process+0x2da>
 8010690:	2700      	movs	r7, #0
 8010692:	e733      	b.n	80104fc <ai_platform_network_process+0x34c>
 8010694:	4625      	mov	r5, r4
 8010696:	2221      	movs	r2, #33	; 0x21
 8010698:	4604      	mov	r4, r0
 801069a:	2113      	movs	r1, #19
 801069c:	f105 0010 	add.w	r0, r5, #16
 80106a0:	f000 f812 	bl	80106c8 <core_set_error>
 80106a4:	e6f1      	b.n	801048a <ai_platform_network_process+0x2da>
 80106a6:	4625      	mov	r5, r4
 80106a8:	2217      	movs	r2, #23
 80106aa:	4604      	mov	r4, r0
 80106ac:	2113      	movs	r1, #19
 80106ae:	f105 0010 	add.w	r0, r5, #16
 80106b2:	f000 f809 	bl	80106c8 <core_set_error>
 80106b6:	e6e8      	b.n	801048a <ai_platform_network_process+0x2da>

080106b8 <core_init>:
 80106b8:	2001      	movs	r0, #1
 80106ba:	4770      	bx	lr

080106bc <core_get_error>:
 80106bc:	4603      	mov	r3, r0
 80106be:	2200      	movs	r2, #0
 80106c0:	6800      	ldr	r0, [r0, #0]
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop

080106c8 <core_set_error>:
 80106c8:	4603      	mov	r3, r0
 80106ca:	7800      	ldrb	r0, [r0, #0]
 80106cc:	b108      	cbz	r0, 80106d2 <core_set_error+0xa>
 80106ce:	2000      	movs	r0, #0
 80106d0:	4770      	bx	lr
 80106d2:	7019      	strb	r1, [r3, #0]
 80106d4:	6819      	ldr	r1, [r3, #0]
 80106d6:	f362 211f 	bfi	r1, r2, #8, #24
 80106da:	2001      	movs	r0, #1
 80106dc:	6019      	str	r1, [r3, #0]
 80106de:	4770      	bx	lr

080106e0 <ai_check_custom_types>:
 80106e0:	b082      	sub	sp, #8
 80106e2:	4b13      	ldr	r3, [pc, #76]	; (8010730 <ai_check_custom_types+0x50>)
 80106e4:	9301      	str	r3, [sp, #4]
 80106e6:	b118      	cbz	r0, 80106f0 <ai_check_custom_types+0x10>
 80106e8:	7803      	ldrb	r3, [r0, #0]
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d002      	beq.n	80106f4 <ai_check_custom_types+0x14>
 80106ee:	2000      	movs	r0, #0
 80106f0:	b002      	add	sp, #8
 80106f2:	4770      	bx	lr
 80106f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d004      	beq.n	8010706 <ai_check_custom_types+0x26>
 80106fc:	2001      	movs	r0, #1
 80106fe:	f080 0001 	eor.w	r0, r0, #1
 8010702:	b002      	add	sp, #8
 8010704:	4770      	bx	lr
 8010706:	7842      	ldrb	r2, [r0, #1]
 8010708:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801070c:	429a      	cmp	r2, r3
 801070e:	f100 0001 	add.w	r0, r0, #1
 8010712:	d1f3      	bne.n	80106fc <ai_check_custom_types+0x1c>
 8010714:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010718:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801071c:	429a      	cmp	r2, r3
 801071e:	d1ed      	bne.n	80106fc <ai_check_custom_types+0x1c>
 8010720:	7842      	ldrb	r2, [r0, #1]
 8010722:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010726:	429a      	cmp	r2, r3
 8010728:	d1e8      	bne.n	80106fc <ai_check_custom_types+0x1c>
 801072a:	2000      	movs	r0, #0
 801072c:	e7e7      	b.n	80106fe <ai_check_custom_types+0x1e>
 801072e:	bf00      	nop
 8010730:	84048403 	.word	0x84048403

08010734 <ai_layers_init_all>:
 8010734:	4601      	mov	r1, r0
 8010736:	2000      	movs	r0, #0
 8010738:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801073a:	b143      	cbz	r3, 801074e <ai_layers_init_all+0x1a>
 801073c:	691a      	ldr	r2, [r3, #16]
 801073e:	60d9      	str	r1, [r3, #12]
 8010740:	429a      	cmp	r2, r3
 8010742:	f100 0001 	add.w	r0, r0, #1
 8010746:	d002      	beq.n	801074e <ai_layers_init_all+0x1a>
 8010748:	b10a      	cbz	r2, 801074e <ai_layers_init_all+0x1a>
 801074a:	4613      	mov	r3, r2
 801074c:	e7f5      	b.n	801073a <ai_layers_init_all+0x6>
 801074e:	4770      	bx	lr

08010750 <ai_layers_post_init_all>:
 8010750:	b538      	push	{r3, r4, r5, lr}
 8010752:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010754:	2500      	movs	r5, #0
 8010756:	b16c      	cbz	r4, 8010774 <ai_layers_post_init_all+0x24>
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	07db      	lsls	r3, r3, #31
 801075c:	d504      	bpl.n	8010768 <ai_layers_post_init_all+0x18>
 801075e:	6a23      	ldr	r3, [r4, #32]
 8010760:	4620      	mov	r0, r4
 8010762:	b10b      	cbz	r3, 8010768 <ai_layers_post_init_all+0x18>
 8010764:	4798      	blx	r3
 8010766:	3501      	adds	r5, #1
 8010768:	6923      	ldr	r3, [r4, #16]
 801076a:	42a3      	cmp	r3, r4
 801076c:	d002      	beq.n	8010774 <ai_layers_post_init_all+0x24>
 801076e:	b10b      	cbz	r3, 8010774 <ai_layers_post_init_all+0x24>
 8010770:	461c      	mov	r4, r3
 8010772:	e7f0      	b.n	8010756 <ai_layers_post_init_all+0x6>
 8010774:	4628      	mov	r0, r5
 8010776:	bd38      	pop	{r3, r4, r5, pc}

08010778 <ai_layers_forward_all>:
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010780:	4604      	mov	r4, r0
 8010782:	f1b8 0f00 	cmp.w	r8, #0
 8010786:	d02b      	beq.n	80107e0 <ai_layers_forward_all+0x68>
 8010788:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801078a:	6381      	str	r1, [r0, #56]	; 0x38
 801078c:	b321      	cbz	r1, 80107d8 <ai_layers_forward_all+0x60>
 801078e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010790:	2001      	movs	r0, #1
 8010792:	47c0      	blx	r8
 8010794:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010796:	b1fe      	cbz	r6, 80107d8 <ai_layers_forward_all+0x60>
 8010798:	2700      	movs	r7, #0
 801079a:	4631      	mov	r1, r6
 801079c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801079e:	2002      	movs	r0, #2
 80107a0:	47c0      	blx	r8
 80107a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80107a4:	4628      	mov	r0, r5
 80107a6:	696b      	ldr	r3, [r5, #20]
 80107a8:	4798      	blx	r3
 80107aa:	692e      	ldr	r6, [r5, #16]
 80107ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80107ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80107b0:	42b5      	cmp	r5, r6
 80107b2:	f04f 0003 	mov.w	r0, #3
 80107b6:	d007      	beq.n	80107c8 <ai_layers_forward_all+0x50>
 80107b8:	47c0      	blx	r8
 80107ba:	3701      	adds	r7, #1
 80107bc:	63a6      	str	r6, [r4, #56]	; 0x38
 80107be:	2e00      	cmp	r6, #0
 80107c0:	d1eb      	bne.n	801079a <ai_layers_forward_all+0x22>
 80107c2:	4638      	mov	r0, r7
 80107c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c8:	2003      	movs	r0, #3
 80107ca:	47c0      	blx	r8
 80107cc:	2300      	movs	r3, #0
 80107ce:	3701      	adds	r7, #1
 80107d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80107d2:	4638      	mov	r0, r7
 80107d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d8:	2700      	movs	r7, #0
 80107da:	4638      	mov	r0, r7
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80107e2:	6385      	str	r5, [r0, #56]	; 0x38
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	d0f7      	beq.n	80107d8 <ai_layers_forward_all+0x60>
 80107e8:	4647      	mov	r7, r8
 80107ea:	696b      	ldr	r3, [r5, #20]
 80107ec:	4628      	mov	r0, r5
 80107ee:	4798      	blx	r3
 80107f0:	462b      	mov	r3, r5
 80107f2:	692d      	ldr	r5, [r5, #16]
 80107f4:	429d      	cmp	r5, r3
 80107f6:	d004      	beq.n	8010802 <ai_layers_forward_all+0x8a>
 80107f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80107fa:	3701      	adds	r7, #1
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d1f4      	bne.n	80107ea <ai_layers_forward_all+0x72>
 8010800:	e7df      	b.n	80107c2 <ai_layers_forward_all+0x4a>
 8010802:	2300      	movs	r3, #0
 8010804:	63a3      	str	r3, [r4, #56]	; 0x38
 8010806:	3701      	adds	r7, #1
 8010808:	e7db      	b.n	80107c2 <ai_layers_forward_all+0x4a>
 801080a:	bf00      	nop

0801080c <ai_dict_decompress_f32>:
 801080c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010810:	9d08      	ldr	r5, [sp, #32]
 8010812:	2b04      	cmp	r3, #4
 8010814:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010818:	d00e      	beq.n	8010838 <ai_dict_decompress_f32+0x2c>
 801081a:	2b08      	cmp	r3, #8
 801081c:	d10a      	bne.n	8010834 <ai_dict_decompress_f32+0x28>
 801081e:	42a8      	cmp	r0, r5
 8010820:	d208      	bcs.n	8010834 <ai_dict_decompress_f32+0x28>
 8010822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f840 3b04 	str.w	r3, [r0], #4
 8010830:	4285      	cmp	r5, r0
 8010832:	d8f6      	bhi.n	8010822 <ai_dict_decompress_f32+0x16>
 8010834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010838:	9b07      	ldr	r3, [sp, #28]
 801083a:	085e      	lsrs	r6, r3, #1
 801083c:	f003 0701 	and.w	r7, r3, #1
 8010840:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8010844:	f106 38ff 	add.w	r8, r6, #4294967295
 8010848:	42a8      	cmp	r0, r5
 801084a:	d2f3      	bcs.n	8010834 <ai_dict_decompress_f32+0x28>
 801084c:	b33e      	cbz	r6, 801089e <ai_dict_decompress_f32+0x92>
 801084e:	f100 0e08 	add.w	lr, r0, #8
 8010852:	f101 3cff 	add.w	ip, r1, #4294967295
 8010856:	eb01 0408 	add.w	r4, r1, r8
 801085a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801085e:	091b      	lsrs	r3, r3, #4
 8010860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010864:	f10e 0e08 	add.w	lr, lr, #8
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f84e 3c10 	str.w	r3, [lr, #-16]
 801086e:	f89c 3000 	ldrb.w	r3, [ip]
 8010872:	f003 030f 	and.w	r3, r3, #15
 8010876:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801087a:	4564      	cmp	r4, ip
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8010882:	d1ea      	bne.n	801085a <ai_dict_decompress_f32+0x4e>
 8010884:	4431      	add	r1, r6
 8010886:	4448      	add	r0, r9
 8010888:	2f00      	cmp	r7, #0
 801088a:	d0dd      	beq.n	8010848 <ai_dict_decompress_f32+0x3c>
 801088c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010890:	091b      	lsrs	r3, r3, #4
 8010892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f840 3b04 	str.w	r3, [r0], #4
 801089c:	e7d4      	b.n	8010848 <ai_dict_decompress_f32+0x3c>
 801089e:	2f00      	cmp	r7, #0
 80108a0:	d1f4      	bne.n	801088c <ai_dict_decompress_f32+0x80>
 80108a2:	42a8      	cmp	r0, r5
 80108a4:	d3fd      	bcc.n	80108a2 <ai_dict_decompress_f32+0x96>
 80108a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108aa:	bf00      	nop

080108ac <forward_conv2d_if32of32wf32>:
 80108ac:	6982      	ldr	r2, [r0, #24]
 80108ae:	8813      	ldrh	r3, [r2, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 8092 	beq.w	80109da <forward_conv2d_if32of32wf32+0x12e>
 80108b6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80108ba:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80108be:	b102      	cbz	r2, 80108c2 <forward_conv2d_if32of32wf32+0x16>
 80108c0:	6812      	ldr	r2, [r2, #0]
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	f000 80b2 	beq.w	8010a2c <forward_conv2d_if32of32wf32+0x180>
 80108c8:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80108cc:	b101      	cbz	r1, 80108d0 <forward_conv2d_if32of32wf32+0x24>
 80108ce:	6809      	ldr	r1, [r1, #0]
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	f000 8084 	beq.w	80109de <forward_conv2d_if32of32wf32+0x132>
 80108d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108da:	f8dc 601c 	ldr.w	r6, [ip, #28]
 80108de:	b0a1      	sub	sp, #132	; 0x84
 80108e0:	2e00      	cmp	r6, #0
 80108e2:	f000 809c 	beq.w	8010a1e <forward_conv2d_if32of32wf32+0x172>
 80108e6:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80108ea:	6834      	ldr	r4, [r6, #0]
 80108ec:	2d01      	cmp	r5, #1
 80108ee:	f240 8098 	bls.w	8010a22 <forward_conv2d_if32of32wf32+0x176>
 80108f2:	6876      	ldr	r6, [r6, #4]
 80108f4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80108f8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80108fc:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010900:	9713      	str	r7, [sp, #76]	; 0x4c
 8010902:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8010906:	9714      	str	r7, [sp, #80]	; 0x50
 8010908:	f8d9 700c 	ldr.w	r7, [r9, #12]
 801090c:	9715      	str	r7, [sp, #84]	; 0x54
 801090e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8010912:	9716      	str	r7, [sp, #88]	; 0x58
 8010914:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8010918:	6992      	ldr	r2, [r2, #24]
 801091a:	9717      	str	r7, [sp, #92]	; 0x5c
 801091c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010920:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8010924:	9718      	str	r7, [sp, #96]	; 0x60
 8010926:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8010928:	f8d2 b008 	ldr.w	fp, [r2, #8]
 801092c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8010930:	69a2      	ldr	r2, [r4, #24]
 8010932:	9719      	str	r7, [sp, #100]	; 0x64
 8010934:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8010938:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 801093a:	69c0      	ldr	r0, [r0, #28]
 801093c:	901f      	str	r0, [sp, #124]	; 0x7c
 801093e:	f8be 0000 	ldrh.w	r0, [lr]
 8010942:	901b      	str	r0, [sp, #108]	; 0x6c
 8010944:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8010948:	901c      	str	r0, [sp, #112]	; 0x70
 801094a:	b2a8      	uxth	r0, r5
 801094c:	971a      	str	r7, [sp, #104]	; 0x68
 801094e:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8010952:	901d      	str	r0, [sp, #116]	; 0x74
 8010954:	b2a0      	uxth	r0, r4
 8010956:	f8d2 9008 	ldr.w	r9, [r2, #8]
 801095a:	901e      	str	r0, [sp, #120]	; 0x78
 801095c:	b10e      	cbz	r6, 8010962 <forward_conv2d_if32of32wf32+0xb6>
 801095e:	69b0      	ldr	r0, [r6, #24]
 8010960:	6886      	ldr	r6, [r0, #8]
 8010962:	6989      	ldr	r1, [r1, #24]
 8010964:	b2a4      	uxth	r4, r4
 8010966:	f108 30ff 	add.w	r0, r8, #4294967295
 801096a:	f8d1 a008 	ldr.w	sl, [r1, #8]
 801096e:	6811      	ldr	r1, [r2, #0]
 8010970:	b2ad      	uxth	r5, r5
 8010972:	3c01      	subs	r4, #1
 8010974:	3d01      	subs	r5, #1
 8010976:	fb00 8404 	mla	r4, r0, r4, r8
 801097a:	1e78      	subs	r0, r7, #1
 801097c:	fb00 7505 	mla	r5, r0, r5, r7
 8010980:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8010984:	2804      	cmp	r0, #4
 8010986:	d02d      	beq.n	80109e4 <forward_conv2d_if32of32wf32+0x138>
 8010988:	2808      	cmp	r0, #8
 801098a:	d02b      	beq.n	80109e4 <forward_conv2d_if32of32wf32+0x138>
 801098c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801098e:	940c      	str	r4, [sp, #48]	; 0x30
 8010990:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8010994:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010996:	930b      	str	r3, [sp, #44]	; 0x2c
 8010998:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801099a:	930a      	str	r3, [sp, #40]	; 0x28
 801099c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801099e:	9309      	str	r3, [sp, #36]	; 0x24
 80109a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80109a2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80109a4:	9706      	str	r7, [sp, #24]
 80109a6:	e9cd 8307 	strd	r8, r3, [sp, #28]
 80109aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109ac:	9305      	str	r3, [sp, #20]
 80109ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80109b0:	9304      	str	r3, [sp, #16]
 80109b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109b4:	9303      	str	r3, [sp, #12]
 80109b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80109b8:	9302      	str	r3, [sp, #8]
 80109ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80109c4:	9310      	str	r3, [sp, #64]	; 0x40
 80109c6:	464a      	mov	r2, r9
 80109c8:	4633      	mov	r3, r6
 80109ca:	4651      	mov	r1, sl
 80109cc:	4658      	mov	r0, fp
 80109ce:	940f      	str	r4, [sp, #60]	; 0x3c
 80109d0:	f000 fdaa 	bl	8011528 <forward_lite_conv2d_if32of32wf32>
 80109d4:	b021      	add	sp, #132	; 0x84
 80109d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	deff      	udf	#255	; 0xff
 80109de:	2300      	movs	r3, #0
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	deff      	udf	#255	; 0xff
 80109e4:	68d2      	ldr	r2, [r2, #12]
 80109e6:	2a00      	cmp	r2, #0
 80109e8:	d0d0      	beq.n	801098c <forward_conv2d_if32of32wf32+0xe0>
 80109ea:	2b03      	cmp	r3, #3
 80109ec:	d021      	beq.n	8010a32 <forward_conv2d_if32of32wf32+0x186>
 80109ee:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 80109f2:	b1c3      	cbz	r3, 8010a26 <forward_conv2d_if32of32wf32+0x17a>
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	b1b3      	cbz	r3, 8010a26 <forward_conv2d_if32of32wf32+0x17a>
 80109f8:	699b      	ldr	r3, [r3, #24]
 80109fa:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8010a08:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8010a0c:	410b      	asrs	r3, r1
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4649      	mov	r1, r9
 8010a12:	2800      	cmp	r0, #0
 8010a14:	bf18      	it	ne
 8010a16:	4681      	movne	r9, r0
 8010a18:	f7ff fef8 	bl	801080c <ai_dict_decompress_f32>
 8010a1c:	e7b6      	b.n	801098c <forward_conv2d_if32of32wf32+0xe0>
 8010a1e:	4634      	mov	r4, r6
 8010a20:	e768      	b.n	80108f4 <forward_conv2d_if32of32wf32+0x48>
 8010a22:	2600      	movs	r6, #0
 8010a24:	e766      	b.n	80108f4 <forward_conv2d_if32of32wf32+0x48>
 8010a26:	2300      	movs	r3, #0
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	deff      	udf	#255	; 0xff
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	deff      	udf	#255	; 0xff
 8010a32:	2300      	movs	r3, #0
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	deff      	udf	#255	; 0xff

08010a38 <forward_dense>:
 8010a38:	6983      	ldr	r3, [r0, #24]
 8010a3a:	881a      	ldrh	r2, [r3, #0]
 8010a3c:	2a00      	cmp	r2, #0
 8010a3e:	f000 8181 	beq.w	8010d44 <forward_dense+0x30c>
 8010a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a46:	ed2d 8b02 	vpush	{d8}
 8010a4a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8010a4e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8010a52:	b095      	sub	sp, #84	; 0x54
 8010a54:	b105      	cbz	r5, 8010a58 <forward_dense+0x20>
 8010a56:	682d      	ldr	r5, [r5, #0]
 8010a58:	2a01      	cmp	r2, #1
 8010a5a:	f000 828f 	beq.w	8010f7c <forward_dense+0x544>
 8010a5e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8010a62:	b106      	cbz	r6, 8010a66 <forward_dense+0x2e>
 8010a64:	6836      	ldr	r6, [r6, #0]
 8010a66:	2a02      	cmp	r2, #2
 8010a68:	f000 816e 	beq.w	8010d48 <forward_dense+0x310>
 8010a6c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8010a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	f000 8274 	beq.w	8010f60 <forward_dense+0x528>
 8010a78:	4619      	mov	r1, r3
 8010a7a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8010a7e:	6809      	ldr	r1, [r1, #0]
 8010a80:	910d      	str	r1, [sp, #52]	; 0x34
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	f240 826e 	bls.w	8010f64 <forward_dense+0x52c>
 8010a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a8e:	460b      	mov	r3, r1
 8010a90:	68e8      	ldr	r0, [r5, #12]
 8010a92:	68f7      	ldr	r7, [r6, #12]
 8010a94:	6840      	ldr	r0, [r0, #4]
 8010a96:	6999      	ldr	r1, [r3, #24]
 8010a98:	9013      	str	r0, [sp, #76]	; 0x4c
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	680b      	ldr	r3, [r1, #0]
 8010a9e:	9012      	str	r0, [sp, #72]	; 0x48
 8010aa0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8010aa4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8010aa8:	fb00 f404 	mul.w	r4, r0, r4
 8010aac:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8010ab0:	fa4e f000 	asr.w	r0, lr, r0
 8010ab4:	2a03      	cmp	r2, #3
 8010ab6:	9010      	str	r0, [sp, #64]	; 0x40
 8010ab8:	f000 825d 	beq.w	8010f76 <forward_dense+0x53e>
 8010abc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8010ac0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	f000 8246 	beq.w	8010f56 <forward_dense+0x51e>
 8010aca:	6812      	ldr	r2, [r2, #0]
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	f000 8242 	beq.w	8010f56 <forward_dense+0x51e>
 8010ad2:	2b04      	cmp	r3, #4
 8010ad4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8010ad8:	f000 822c 	beq.w	8010f34 <forward_dense+0x4fc>
 8010adc:	2b08      	cmp	r3, #8
 8010ade:	f000 8229 	beq.w	8010f34 <forward_dense+0x4fc>
 8010ae2:	f04f 0b00 	mov.w	fp, #0
 8010ae6:	69b2      	ldr	r2, [r6, #24]
 8010ae8:	69ab      	ldr	r3, [r5, #24]
 8010aea:	6891      	ldr	r1, [r2, #8]
 8010aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	6952      	ldr	r2, [r2, #20]
 8010af2:	9106      	str	r1, [sp, #24]
 8010af4:	fb07 f404 	mul.w	r4, r7, r4
 8010af8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8010afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010afe:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010b02:	4281      	cmp	r1, r0
 8010b04:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8010b08:	900e      	str	r0, [sp, #56]	; 0x38
 8010b0a:	940c      	str	r4, [sp, #48]	; 0x30
 8010b0c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8010b10:	f080 8113 	bcs.w	8010d3a <forward_dense+0x302>
 8010b14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010b16:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8010d64 <forward_dense+0x32c>
 8010b1a:	f021 0201 	bic.w	r2, r1, #1
 8010b1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010b22:	9204      	str	r2, [sp, #16]
 8010b24:	f001 0201 	and.w	r2, r1, #1
 8010b28:	08c8      	lsrs	r0, r1, #3
 8010b2a:	9208      	str	r2, [sp, #32]
 8010b2c:	008a      	lsls	r2, r1, #2
 8010b2e:	f001 0a07 	and.w	sl, r1, #7
 8010b32:	920f      	str	r2, [sp, #60]	; 0x3c
 8010b34:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8010b38:	3320      	adds	r3, #32
 8010b3a:	465c      	mov	r4, fp
 8010b3c:	9007      	str	r0, [sp, #28]
 8010b3e:	46cb      	mov	fp, r9
 8010b40:	9205      	str	r2, [sp, #20]
 8010b42:	9302      	str	r3, [sp, #8]
 8010b44:	46c1      	mov	r9, r8
 8010b46:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b4c:	699b      	ldr	r3, [r3, #24]
 8010b4e:	689a      	ldr	r2, [r3, #8]
 8010b50:	9b02      	ldr	r3, [sp, #8]
 8010b52:	3b20      	subs	r3, #32
 8010b54:	930a      	str	r3, [sp, #40]	; 0x28
 8010b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b58:	b10b      	cbz	r3, 8010b5e <forward_dense+0x126>
 8010b5a:	699b      	ldr	r3, [r3, #24]
 8010b5c:	689b      	ldr	r3, [r3, #8]
 8010b5e:	2c00      	cmp	r4, #0
 8010b60:	f000 81da 	beq.w	8010f18 <forward_dense+0x4e0>
 8010b64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010b66:	2904      	cmp	r1, #4
 8010b68:	9906      	ldr	r1, [sp, #24]
 8010b6a:	f000 80fd 	beq.w	8010d68 <forward_dense+0x330>
 8010b6e:	4549      	cmp	r1, r9
 8010b70:	f080 80d2 	bcs.w	8010d18 <forward_dense+0x2e0>
 8010b74:	460f      	mov	r7, r1
 8010b76:	9907      	ldr	r1, [sp, #28]
 8010b78:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b7c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8010b80:	1c4e      	adds	r6, r1, #1
 8010b82:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010b86:	4694      	mov	ip, r2
 8010b88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b8a:	468e      	mov	lr, r1
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 80de 	beq.w	8010d4e <forward_dense+0x316>
 8010b92:	ecf3 2a01 	vldmia	r3!, {s5}
 8010b96:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8010d64 <forward_dense+0x32c>
 8010b9a:	f1be 0f00 	cmp.w	lr, #0
 8010b9e:	f000 80de 	beq.w	8010d5e <forward_dense+0x326>
 8010ba2:	f10c 0108 	add.w	r1, ip, #8
 8010ba6:	4640      	mov	r0, r8
 8010ba8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010bac:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8010bb0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8010bb4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8010bb8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8010bbc:	ed10 5a04 	vldr	s10, [r0, #-16]
 8010bc0:	ed50 5a03 	vldr	s11, [r0, #-12]
 8010bc4:	ed10 6a02 	vldr	s12, [r0, #-8]
 8010bc8:	ed50 6a01 	vldr	s13, [r0, #-4]
 8010bcc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010bd0:	edd5 7a00 	vldr	s15, [r5]
 8010bd4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8010bd8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010bdc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010be0:	ed95 3a00 	vldr	s6, [r5]
 8010be4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8010be8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010bec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010bf0:	3108      	adds	r1, #8
 8010bf2:	edd5 3a00 	vldr	s7, [r5]
 8010bf6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8010bfa:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010bfe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c02:	3020      	adds	r0, #32
 8010c04:	ed95 4a00 	vldr	s8, [r5]
 8010c08:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010c0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010c10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c14:	edd5 4a00 	vldr	s9, [r5]
 8010c18:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8010c1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010c20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c24:	ed95 5a00 	vldr	s10, [r5]
 8010c28:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8010c2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010c30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c34:	edd5 5a00 	vldr	s11, [r5]
 8010c38:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8010c3c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010c40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c44:	428e      	cmp	r6, r1
 8010c46:	ed95 6a00 	vldr	s12, [r5]
 8010c4a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c52:	d1a9      	bne.n	8010ba8 <forward_dense+0x170>
 8010c54:	f1a6 0108 	sub.w	r1, r6, #8
 8010c58:	4650      	mov	r0, sl
 8010c5a:	2a00      	cmp	r2, #0
 8010c5c:	d04a      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010c5e:	780d      	ldrb	r5, [r1, #0]
 8010c60:	edd0 6a00 	vldr	s13, [r0]
 8010c64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c68:	edd5 7a00 	vldr	s15, [r5]
 8010c6c:	2a01      	cmp	r2, #1
 8010c6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c72:	d03f      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010c74:	784d      	ldrb	r5, [r1, #1]
 8010c76:	edd0 6a01 	vldr	s13, [r0, #4]
 8010c7a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c7e:	edd5 7a00 	vldr	s15, [r5]
 8010c82:	2a02      	cmp	r2, #2
 8010c84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c88:	d034      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010c8a:	788d      	ldrb	r5, [r1, #2]
 8010c8c:	edd0 6a02 	vldr	s13, [r0, #8]
 8010c90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010c94:	edd5 7a00 	vldr	s15, [r5]
 8010c98:	2a03      	cmp	r2, #3
 8010c9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c9e:	d029      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010ca0:	78cd      	ldrb	r5, [r1, #3]
 8010ca2:	edd0 6a03 	vldr	s13, [r0, #12]
 8010ca6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010caa:	edd5 7a00 	vldr	s15, [r5]
 8010cae:	2a04      	cmp	r2, #4
 8010cb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cb4:	d01e      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010cb6:	790d      	ldrb	r5, [r1, #4]
 8010cb8:	edd0 6a04 	vldr	s13, [r0, #16]
 8010cbc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010cc0:	edd5 7a00 	vldr	s15, [r5]
 8010cc4:	2a05      	cmp	r2, #5
 8010cc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cca:	d013      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010ccc:	794d      	ldrb	r5, [r1, #5]
 8010cce:	edd0 6a05 	vldr	s13, [r0, #20]
 8010cd2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010cd6:	edd5 7a00 	vldr	s15, [r5]
 8010cda:	2a06      	cmp	r2, #6
 8010cdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ce0:	d008      	beq.n	8010cf4 <forward_dense+0x2bc>
 8010ce2:	7989      	ldrb	r1, [r1, #6]
 8010ce4:	edd0 7a06 	vldr	s15, [r0, #24]
 8010ce8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010cec:	edd1 6a00 	vldr	s13, [r1]
 8010cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cf4:	44dc      	add	ip, fp
 8010cf6:	445e      	add	r6, fp
 8010cf8:	ee32 7a87 	vadd.f32	s14, s5, s14
 8010cfc:	eca7 7a01 	vstmia	r7!, {s14}
 8010d00:	454f      	cmp	r7, r9
 8010d02:	f4ff af43 	bcc.w	8010b8c <forward_dense+0x154>
 8010d06:	9a06      	ldr	r2, [sp, #24]
 8010d08:	eba9 0302 	sub.w	r3, r9, r2
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	f023 0303 	bic.w	r3, r3, #3
 8010d12:	3304      	adds	r3, #4
 8010d14:	18d3      	adds	r3, r2, r3
 8010d16:	9306      	str	r3, [sp, #24]
 8010d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d1a:	9a05      	ldr	r2, [sp, #20]
 8010d1c:	4499      	add	r9, r3
 8010d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d20:	441a      	add	r2, r3
 8010d22:	9205      	str	r2, [sp, #20]
 8010d24:	9a02      	ldr	r2, [sp, #8]
 8010d26:	441a      	add	r2, r3
 8010d28:	9202      	str	r2, [sp, #8]
 8010d2a:	9a04      	ldr	r2, [sp, #16]
 8010d2c:	441a      	add	r2, r3
 8010d2e:	9204      	str	r2, [sp, #16]
 8010d30:	9b06      	ldr	r3, [sp, #24]
 8010d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d34:	4293      	cmp	r3, r2
 8010d36:	f4ff af08 	bcc.w	8010b4a <forward_dense+0x112>
 8010d3a:	b015      	add	sp, #84	; 0x54
 8010d3c:	ecbd 8b02 	vpop	{d8}
 8010d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d44:	6853      	ldr	r3, [r2, #4]
 8010d46:	deff      	udf	#255	; 0xff
 8010d48:	2300      	movs	r3, #0
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	deff      	udf	#255	; 0xff
 8010d4e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8010d64 <forward_dense+0x32c>
 8010d52:	eef0 2a48 	vmov.f32	s5, s16
 8010d56:	f1be 0f00 	cmp.w	lr, #0
 8010d5a:	f47f af22 	bne.w	8010ba2 <forward_dense+0x16a>
 8010d5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d60:	4661      	mov	r1, ip
 8010d62:	e77a      	b.n	8010c5a <forward_dense+0x222>
 8010d64:	00000000 	.word	0x00000000
 8010d68:	4549      	cmp	r1, r9
 8010d6a:	d2d5      	bcs.n	8010d18 <forward_dense+0x2e0>
 8010d6c:	9807      	ldr	r0, [sp, #28]
 8010d6e:	9103      	str	r1, [sp, #12]
 8010d70:	9904      	ldr	r1, [sp, #16]
 8010d72:	f100 0c01 	add.w	ip, r0, #1
 8010d76:	3901      	subs	r1, #1
 8010d78:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010d7c:	9109      	str	r1, [sp, #36]	; 0x24
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	f000 80b2 	beq.w	8010ee8 <forward_dense+0x4b0>
 8010d84:	9907      	ldr	r1, [sp, #28]
 8010d86:	ecf3 2a01 	vldmia	r3!, {s5}
 8010d8a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8010d64 <forward_dense+0x32c>
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	f000 80b2 	beq.w	8010ef8 <forward_dense+0x4c0>
 8010d94:	9902      	ldr	r1, [sp, #8]
 8010d96:	1d10      	adds	r0, r2, #4
 8010d98:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8010d9c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8010da0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8010da4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8010da8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8010dac:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8010db0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8010db4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8010db8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8010dbc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8010dc0:	f006 070f 	and.w	r7, r6, #15
 8010dc4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8010dc8:	edd7 7a00 	vldr	s15, [r7]
 8010dcc:	0936      	lsrs	r6, r6, #4
 8010dce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010dd2:	ed96 3a00 	vldr	s6, [r6]
 8010dd6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8010dda:	092e      	lsrs	r6, r5, #4
 8010ddc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010de0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010de4:	f005 050f 	and.w	r5, r5, #15
 8010de8:	edd6 3a00 	vldr	s7, [r6]
 8010dec:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8010df0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010df4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010df8:	0937      	lsrs	r7, r6, #4
 8010dfa:	ed95 4a00 	vldr	s8, [r5]
 8010dfe:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8010e02:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010e06:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8010e0a:	f006 060f 	and.w	r6, r6, #15
 8010e0e:	edd7 4a00 	vldr	s9, [r7]
 8010e12:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010e16:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010e1a:	3004      	adds	r0, #4
 8010e1c:	ed96 5a00 	vldr	s10, [r6]
 8010e20:	092e      	lsrs	r6, r5, #4
 8010e22:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010e26:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010e2a:	f005 050f 	and.w	r5, r5, #15
 8010e2e:	edd6 5a00 	vldr	s11, [r6]
 8010e32:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010e36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010e3a:	4584      	cmp	ip, r0
 8010e3c:	ed95 6a00 	vldr	s12, [r5]
 8010e40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010e44:	f101 0120 	add.w	r1, r1, #32
 8010e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e4c:	d1a4      	bne.n	8010d98 <forward_dense+0x360>
 8010e4e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8010e52:	f1ac 0804 	sub.w	r8, ip, #4
 8010e56:	9904      	ldr	r1, [sp, #16]
 8010e58:	458e      	cmp	lr, r1
 8010e5a:	d22a      	bcs.n	8010eb2 <forward_dense+0x47a>
 8010e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e5e:	eba1 070e 	sub.w	r7, r1, lr
 8010e62:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8010e66:	f10e 0008 	add.w	r0, lr, #8
 8010e6a:	f108 36ff 	add.w	r6, r8, #4294967295
 8010e6e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8010e72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e76:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010e7a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8010e7e:	f001 050f 	and.w	r5, r1, #15
 8010e82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010e86:	edd5 7a00 	vldr	s15, [r5]
 8010e8a:	0909      	lsrs	r1, r1, #4
 8010e8c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010e90:	ed91 6a00 	vldr	s12, [r1]
 8010e94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010e98:	42b7      	cmp	r7, r6
 8010e9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010e9e:	f100 0008 	add.w	r0, r0, #8
 8010ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ea6:	d1e4      	bne.n	8010e72 <forward_dense+0x43a>
 8010ea8:	f10a 0a01 	add.w	sl, sl, #1
 8010eac:	44d0      	add	r8, sl
 8010eae:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8010eb2:	9908      	ldr	r1, [sp, #32]
 8010eb4:	b321      	cbz	r1, 8010f00 <forward_dense+0x4c8>
 8010eb6:	f898 1000 	ldrb.w	r1, [r8]
 8010eba:	edde 7a00 	vldr	s15, [lr]
 8010ebe:	0909      	lsrs	r1, r1, #4
 8010ec0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010ec4:	edd1 6a00 	vldr	s13, [r1]
 8010ec8:	9903      	ldr	r1, [sp, #12]
 8010eca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ece:	445a      	add	r2, fp
 8010ed0:	44dc      	add	ip, fp
 8010ed2:	ee72 2a87 	vadd.f32	s5, s5, s14
 8010ed6:	ece1 2a01 	vstmia	r1!, {s5}
 8010eda:	4589      	cmp	r9, r1
 8010edc:	9103      	str	r1, [sp, #12]
 8010ede:	f67f af12 	bls.w	8010d06 <forward_dense+0x2ce>
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f47f af4e 	bne.w	8010d84 <forward_dense+0x34c>
 8010ee8:	9907      	ldr	r1, [sp, #28]
 8010eea:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8010d64 <forward_dense+0x32c>
 8010eee:	eef0 2a48 	vmov.f32	s5, s16
 8010ef2:	2900      	cmp	r1, #0
 8010ef4:	f47f af4e 	bne.w	8010d94 <forward_dense+0x35c>
 8010ef8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8010efc:	4690      	mov	r8, r2
 8010efe:	e7aa      	b.n	8010e56 <forward_dense+0x41e>
 8010f00:	9903      	ldr	r1, [sp, #12]
 8010f02:	ee32 7a87 	vadd.f32	s14, s5, s14
 8010f06:	445a      	add	r2, fp
 8010f08:	eca1 7a01 	vstmia	r1!, {s14}
 8010f0c:	4549      	cmp	r1, r9
 8010f0e:	9103      	str	r1, [sp, #12]
 8010f10:	44dc      	add	ip, fp
 8010f12:	f4ff af34 	bcc.w	8010d7e <forward_dense+0x346>
 8010f16:	e6f6      	b.n	8010d06 <forward_dense+0x2ce>
 8010f18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010f1a:	9d06      	ldr	r5, [sp, #24]
 8010f1c:	9101      	str	r1, [sp, #4]
 8010f1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010f20:	9100      	str	r1, [sp, #0]
 8010f22:	4628      	mov	r0, r5
 8010f24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f26:	f000 fc61 	bl	80117ec <forward_lite_dense_if32of32wf32>
 8010f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	4413      	add	r3, r2
 8010f30:	9306      	str	r3, [sp, #24]
 8010f32:	e6f1      	b.n	8010d18 <forward_dense+0x2e0>
 8010f34:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8010f38:	f1b9 0f00 	cmp.w	r9, #0
 8010f3c:	d016      	beq.n	8010f6c <forward_dense+0x534>
 8010f3e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010f42:	f000 fe69 	bl	8011c18 <ai_array_get_byte_size>
 8010f46:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	4659      	mov	r1, fp
 8010f4e:	4640      	mov	r0, r8
 8010f50:	f000 fd70 	bl	8011a34 <st_int8_copy>
 8010f54:	e5c7      	b.n	8010ae6 <forward_dense+0xae>
 8010f56:	2b04      	cmp	r3, #4
 8010f58:	d00a      	beq.n	8010f70 <forward_dense+0x538>
 8010f5a:	f04f 0900 	mov.w	r9, #0
 8010f5e:	e5bd      	b.n	8010adc <forward_dense+0xa4>
 8010f60:	930d      	str	r3, [sp, #52]	; 0x34
 8010f62:	e595      	b.n	8010a90 <forward_dense+0x58>
 8010f64:	2300      	movs	r3, #0
 8010f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f68:	460b      	mov	r3, r1
 8010f6a:	e591      	b.n	8010a90 <forward_dense+0x58>
 8010f6c:	46c3      	mov	fp, r8
 8010f6e:	e5ba      	b.n	8010ae6 <forward_dense+0xae>
 8010f70:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8010f74:	e5b7      	b.n	8010ae6 <forward_dense+0xae>
 8010f76:	2300      	movs	r3, #0
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	deff      	udf	#255	; 0xff
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	deff      	udf	#255	; 0xff
 8010f82:	bf00      	nop

08010f84 <forward_relu>:
 8010f84:	6982      	ldr	r2, [r0, #24]
 8010f86:	8813      	ldrh	r3, [r2, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d05b      	beq.n	8011044 <forward_relu+0xc0>
 8010f8c:	6851      	ldr	r1, [r2, #4]
 8010f8e:	684a      	ldr	r2, [r1, #4]
 8010f90:	b102      	cbz	r2, 8010f94 <forward_relu+0x10>
 8010f92:	6812      	ldr	r2, [r2, #0]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	f000 8123 	beq.w	80111e0 <forward_relu+0x25c>
 8010f9a:	b470      	push	{r4, r5, r6}
 8010f9c:	6909      	ldr	r1, [r1, #16]
 8010f9e:	b101      	cbz	r1, 8010fa2 <forward_relu+0x1e>
 8010fa0:	6809      	ldr	r1, [r1, #0]
 8010fa2:	69c6      	ldr	r6, [r0, #28]
 8010fa4:	2e00      	cmp	r6, #0
 8010fa6:	f000 8097 	beq.w	80110d8 <forward_relu+0x154>
 8010faa:	6873      	ldr	r3, [r6, #4]
 8010fac:	6988      	ldr	r0, [r1, #24]
 8010fae:	6991      	ldr	r1, [r2, #24]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	f000 80c1 	beq.w	8011138 <forward_relu+0x1b4>
 8010fb6:	6893      	ldr	r3, [r2, #8]
 8010fb8:	6880      	ldr	r0, [r0, #8]
 8010fba:	688c      	ldr	r4, [r1, #8]
 8010fbc:	0a1b      	lsrs	r3, r3, #8
 8010fbe:	f000 80f2 	beq.w	80111a6 <forward_relu+0x222>
 8010fc2:	68d5      	ldr	r5, [r2, #12]
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010fca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010fce:	42ab      	cmp	r3, r5
 8010fd0:	fb01 f202 	mul.w	r2, r1, r2
 8010fd4:	d1f9      	bne.n	8010fca <forward_relu+0x46>
 8010fd6:	68b3      	ldr	r3, [r6, #8]
 8010fd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8010fdc:	edd3 6a00 	vldr	s13, [r3]
 8010fe0:	ed93 6a01 	vldr	s12, [r3, #4]
 8010fe4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010fe8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010fec:	3a01      	subs	r2, #1
 8010fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ff6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010ffa:	d425      	bmi.n	8011048 <forward_relu+0xc4>
 8010ffc:	429c      	cmp	r4, r3
 8010ffe:	d81f      	bhi.n	8011040 <forward_relu+0xbc>
 8011000:	1d1a      	adds	r2, r3, #4
 8011002:	1d01      	adds	r1, r0, #4
 8011004:	e00d      	b.n	8011022 <forward_relu+0x9e>
 8011006:	eef4 6ae7 	vcmpe.f32	s13, s15
 801100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100e:	db03      	blt.n	8011018 <forward_relu+0x94>
 8011010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011014:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011018:	3b08      	subs	r3, #8
 801101a:	429c      	cmp	r4, r3
 801101c:	ed61 7a01 	vstmdb	r1!, {s15}
 8011020:	d80e      	bhi.n	8011040 <forward_relu+0xbc>
 8011022:	4613      	mov	r3, r2
 8011024:	ed72 7a01 	vldmdb	r2!, {s15}
 8011028:	eef4 7ac7 	vcmpe.f32	s15, s14
 801102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011030:	d9e9      	bls.n	8011006 <forward_relu+0x82>
 8011032:	3b08      	subs	r3, #8
 8011034:	eef0 7a47 	vmov.f32	s15, s14
 8011038:	429c      	cmp	r4, r3
 801103a:	ed61 7a01 	vstmdb	r1!, {s15}
 801103e:	d9f0      	bls.n	8011022 <forward_relu+0x9e>
 8011040:	bc70      	pop	{r4, r5, r6}
 8011042:	4770      	bx	lr
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	deff      	udf	#255	; 0xff
 8011048:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011050:	d11f      	bne.n	8011092 <forward_relu+0x10e>
 8011052:	429c      	cmp	r4, r3
 8011054:	d8f4      	bhi.n	8011040 <forward_relu+0xbc>
 8011056:	1b1c      	subs	r4, r3, r4
 8011058:	f024 0403 	bic.w	r4, r4, #3
 801105c:	1d1a      	adds	r2, r3, #4
 801105e:	2500      	movs	r5, #0
 8011060:	1b1b      	subs	r3, r3, r4
 8011062:	1d01      	adds	r1, r0, #4
 8011064:	ed72 7a01 	vldmdb	r2!, {s15}
 8011068:	eef4 7ae6 	vcmpe.f32	s15, s13
 801106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011070:	dc0a      	bgt.n	8011088 <forward_relu+0x104>
 8011072:	429a      	cmp	r2, r3
 8011074:	f841 5d04 	str.w	r5, [r1, #-4]!
 8011078:	d0e2      	beq.n	8011040 <forward_relu+0xbc>
 801107a:	ed72 7a01 	vldmdb	r2!, {s15}
 801107e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011086:	ddf4      	ble.n	8011072 <forward_relu+0xee>
 8011088:	429a      	cmp	r2, r3
 801108a:	ed61 7a01 	vstmdb	r1!, {s15}
 801108e:	d1e9      	bne.n	8011064 <forward_relu+0xe0>
 8011090:	e7d6      	b.n	8011040 <forward_relu+0xbc>
 8011092:	429c      	cmp	r4, r3
 8011094:	d8d4      	bhi.n	8011040 <forward_relu+0xbc>
 8011096:	1b1c      	subs	r4, r3, r4
 8011098:	f024 0403 	bic.w	r4, r4, #3
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	1d01      	adds	r1, r0, #4
 80110a0:	1b1b      	subs	r3, r3, r4
 80110a2:	ed72 7a01 	vldmdb	r2!, {s15}
 80110a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	db0e      	blt.n	80110ce <forward_relu+0x14a>
 80110b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80110b4:	4293      	cmp	r3, r2
 80110b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80110ba:	ed61 7a01 	vstmdb	r1!, {s15}
 80110be:	d0bf      	beq.n	8011040 <forward_relu+0xbc>
 80110c0:	ed72 7a01 	vldmdb	r2!, {s15}
 80110c4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	daf0      	bge.n	80110b0 <forward_relu+0x12c>
 80110ce:	4293      	cmp	r3, r2
 80110d0:	ed61 7a01 	vstmdb	r1!, {s15}
 80110d4:	d1e5      	bne.n	80110a2 <forward_relu+0x11e>
 80110d6:	e7b3      	b.n	8011040 <forward_relu+0xbc>
 80110d8:	6893      	ldr	r3, [r2, #8]
 80110da:	6989      	ldr	r1, [r1, #24]
 80110dc:	6990      	ldr	r0, [r2, #24]
 80110de:	6889      	ldr	r1, [r1, #8]
 80110e0:	6884      	ldr	r4, [r0, #8]
 80110e2:	0a1b      	lsrs	r3, r3, #8
 80110e4:	d075      	beq.n	80111d2 <forward_relu+0x24e>
 80110e6:	68d5      	ldr	r5, [r2, #12]
 80110e8:	2201      	movs	r2, #1
 80110ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80110ee:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80110f2:	429d      	cmp	r5, r3
 80110f4:	fb00 f202 	mul.w	r2, r0, r2
 80110f8:	d1f9      	bne.n	80110ee <forward_relu+0x16a>
 80110fa:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80110fe:	3b01      	subs	r3, #1
 8011100:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011104:	4294      	cmp	r4, r2
 8011106:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801110a:	d899      	bhi.n	8011040 <forward_relu+0xbc>
 801110c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80111e8 <forward_relu+0x264>
 8011110:	3204      	adds	r2, #4
 8011112:	3104      	adds	r1, #4
 8011114:	4613      	mov	r3, r2
 8011116:	ed72 7a01 	vldmdb	r2!, {s15}
 801111a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011122:	f1a3 0308 	sub.w	r3, r3, #8
 8011126:	bfb8      	it	lt
 8011128:	eef0 7a47 	vmovlt.f32	s15, s14
 801112c:	429c      	cmp	r4, r3
 801112e:	ed61 7a01 	vstmdb	r1!, {s15}
 8011132:	d9ef      	bls.n	8011114 <forward_relu+0x190>
 8011134:	bc70      	pop	{r4, r5, r6}
 8011136:	4770      	bx	lr
 8011138:	688c      	ldr	r4, [r1, #8]
 801113a:	6891      	ldr	r1, [r2, #8]
 801113c:	6880      	ldr	r0, [r0, #8]
 801113e:	0a09      	lsrs	r1, r1, #8
 8011140:	d049      	beq.n	80111d6 <forward_relu+0x252>
 8011142:	68d5      	ldr	r5, [r2, #12]
 8011144:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8011148:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801114c:	42aa      	cmp	r2, r5
 801114e:	fb01 f303 	mul.w	r3, r1, r3
 8011152:	d1f9      	bne.n	8011148 <forward_relu+0x1c4>
 8011154:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8011158:	3a01      	subs	r2, #1
 801115a:	68b1      	ldr	r1, [r6, #8]
 801115c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011160:	429c      	cmp	r4, r3
 8011162:	ed91 7a00 	vldr	s14, [r1]
 8011166:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801116a:	f63f af69 	bhi.w	8011040 <forward_relu+0xbc>
 801116e:	2500      	movs	r5, #0
 8011170:	3304      	adds	r3, #4
 8011172:	1d02      	adds	r2, r0, #4
 8011174:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011180:	f1a3 0104 	sub.w	r1, r3, #4
 8011184:	f1a3 0308 	sub.w	r3, r3, #8
 8011188:	d406      	bmi.n	8011198 <forward_relu+0x214>
 801118a:	429c      	cmp	r4, r3
 801118c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011190:	f63f af56 	bhi.w	8011040 <forward_relu+0xbc>
 8011194:	460b      	mov	r3, r1
 8011196:	e7ed      	b.n	8011174 <forward_relu+0x1f0>
 8011198:	429c      	cmp	r4, r3
 801119a:	ed62 7a01 	vstmdb	r2!, {s15}
 801119e:	f63f af4f 	bhi.w	8011040 <forward_relu+0xbc>
 80111a2:	460b      	mov	r3, r1
 80111a4:	e7e6      	b.n	8011174 <forward_relu+0x1f0>
 80111a6:	68b3      	ldr	r3, [r6, #8]
 80111a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80111ac:	edd3 6a00 	vldr	s13, [r3]
 80111b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80111b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80111b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111bc:	d401      	bmi.n	80111c2 <forward_relu+0x23e>
 80111be:	4623      	mov	r3, r4
 80111c0:	e71e      	b.n	8011000 <forward_relu+0x7c>
 80111c2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80111c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ca:	4623      	mov	r3, r4
 80111cc:	f47f af63 	bne.w	8011096 <forward_relu+0x112>
 80111d0:	e741      	b.n	8011056 <forward_relu+0xd2>
 80111d2:	4622      	mov	r2, r4
 80111d4:	e79a      	b.n	801110c <forward_relu+0x188>
 80111d6:	68b2      	ldr	r2, [r6, #8]
 80111d8:	4623      	mov	r3, r4
 80111da:	ed92 7a00 	vldr	s14, [r2]
 80111de:	e7c6      	b.n	801116e <forward_relu+0x1ea>
 80111e0:	2300      	movs	r3, #0
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	deff      	udf	#255	; 0xff
 80111e6:	bf00      	nop
 80111e8:	00000000 	.word	0x00000000

080111ec <forward_sm>:
 80111ec:	6982      	ldr	r2, [r0, #24]
 80111ee:	8813      	ldrh	r3, [r2, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d07c      	beq.n	80112ee <forward_sm+0x102>
 80111f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f8:	ed2d 8b04 	vpush	{d8-d9}
 80111fc:	6852      	ldr	r2, [r2, #4]
 80111fe:	6854      	ldr	r4, [r2, #4]
 8011200:	b085      	sub	sp, #20
 8011202:	b104      	cbz	r4, 8011206 <forward_sm+0x1a>
 8011204:	6824      	ldr	r4, [r4, #0]
 8011206:	2b01      	cmp	r3, #1
 8011208:	d076      	beq.n	80112f8 <forward_sm+0x10c>
 801120a:	6913      	ldr	r3, [r2, #16]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d076      	beq.n	80112fe <forward_sm+0x112>
 8011210:	681e      	ldr	r6, [r3, #0]
 8011212:	68a3      	ldr	r3, [r4, #8]
 8011214:	68e0      	ldr	r0, [r4, #12]
 8011216:	68f2      	ldr	r2, [r6, #12]
 8011218:	6845      	ldr	r5, [r0, #4]
 801121a:	6857      	ldr	r7, [r2, #4]
 801121c:	0a1b      	lsrs	r3, r3, #8
 801121e:	d068      	beq.n	80112f2 <forward_sm+0x106>
 8011220:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011224:	2201      	movs	r2, #1
 8011226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801122a:	4298      	cmp	r0, r3
 801122c:	fb01 f202 	mul.w	r2, r1, r2
 8011230:	d1f9      	bne.n	8011226 <forward_sm+0x3a>
 8011232:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8011236:	69a2      	ldr	r2, [r4, #24]
 8011238:	69b3      	ldr	r3, [r6, #24]
 801123a:	6892      	ldr	r2, [r2, #8]
 801123c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8011240:	eb02 0309 	add.w	r3, r2, r9
 8011244:	429a      	cmp	r2, r3
 8011246:	9301      	str	r3, [sp, #4]
 8011248:	d24c      	bcs.n	80112e4 <forward_sm+0xf8>
 801124a:	00bb      	lsls	r3, r7, #2
 801124c:	9303      	str	r3, [sp, #12]
 801124e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8011252:	00ab      	lsls	r3, r5, #2
 8011254:	2d01      	cmp	r5, #1
 8011256:	ed92 8a00 	vldr	s16, [r2]
 801125a:	9302      	str	r3, [sp, #8]
 801125c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011260:	463e      	mov	r6, r7
 8011262:	d93c      	bls.n	80112de <forward_sm+0xf2>
 8011264:	1d13      	adds	r3, r2, #4
 8011266:	ecf3 7a01 	vldmia	r3!, {s15}
 801126a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011272:	bfb8      	it	lt
 8011274:	eeb0 8a67 	vmovlt.f32	s16, s15
 8011278:	429e      	cmp	r6, r3
 801127a:	d1f4      	bne.n	8011266 <forward_sm+0x7a>
 801127c:	eddf 8a21 	vldr	s17, [pc, #132]	; 8011304 <forward_sm+0x118>
 8011280:	4692      	mov	sl, r2
 8011282:	46c3      	mov	fp, r8
 8011284:	46c1      	mov	r9, r8
 8011286:	2400      	movs	r4, #0
 8011288:	ecba 0a01 	vldmia	sl!, {s0}
 801128c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011290:	f005 f99a 	bl	80165c8 <expf>
 8011294:	3401      	adds	r4, #1
 8011296:	42a5      	cmp	r5, r4
 8011298:	ee78 8a80 	vadd.f32	s17, s17, s0
 801129c:	eca9 0a01 	vstmia	r9!, {s0}
 80112a0:	d8f2      	bhi.n	8011288 <forward_sm+0x9c>
 80112a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80112a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112aa:	d00b      	beq.n	80112c4 <forward_sm+0xd8>
 80112ac:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80112b0:	2300      	movs	r3, #0
 80112b2:	3301      	adds	r3, #1
 80112b4:	429d      	cmp	r5, r3
 80112b6:	eddb 7a00 	vldr	s15, [fp]
 80112ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112be:	eceb 7a01 	vstmia	fp!, {s15}
 80112c2:	d8f6      	bhi.n	80112b2 <forward_sm+0xc6>
 80112c4:	9b03      	ldr	r3, [sp, #12]
 80112c6:	9901      	ldr	r1, [sp, #4]
 80112c8:	4498      	add	r8, r3
 80112ca:	9b02      	ldr	r3, [sp, #8]
 80112cc:	42b9      	cmp	r1, r7
 80112ce:	463a      	mov	r2, r7
 80112d0:	441e      	add	r6, r3
 80112d2:	d907      	bls.n	80112e4 <forward_sm+0xf8>
 80112d4:	2d01      	cmp	r5, #1
 80112d6:	ed92 8a00 	vldr	s16, [r2]
 80112da:	441f      	add	r7, r3
 80112dc:	d8c2      	bhi.n	8011264 <forward_sm+0x78>
 80112de:	2d00      	cmp	r5, #0
 80112e0:	d0f0      	beq.n	80112c4 <forward_sm+0xd8>
 80112e2:	e7cb      	b.n	801127c <forward_sm+0x90>
 80112e4:	b005      	add	sp, #20
 80112e6:	ecbd 8b04 	vpop	{d8-d9}
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	deff      	udf	#255	; 0xff
 80112f2:	f04f 0904 	mov.w	r9, #4
 80112f6:	e79e      	b.n	8011236 <forward_sm+0x4a>
 80112f8:	2300      	movs	r3, #0
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	deff      	udf	#255	; 0xff
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	deff      	udf	#255	; 0xff
 8011302:	bf00      	nop
 8011304:	00000000 	.word	0x00000000

08011308 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	b08d      	sub	sp, #52	; 0x34
 801130e:	9003      	str	r0, [sp, #12]
 8011310:	9207      	str	r2, [sp, #28]
 8011312:	9308      	str	r3, [sp, #32]
 8011314:	461a      	mov	r2, r3
 8011316:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
 801131a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801131c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801131e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8011322:	910b      	str	r1, [sp, #44]	; 0x2c
 8011324:	fb00 f003 	mul.w	r0, r0, r3
 8011328:	9004      	str	r0, [sp, #16]
 801132a:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 801132e:	9009      	str	r0, [sp, #36]	; 0x24
 8011330:	2d00      	cmp	r5, #0
 8011332:	f000 80ef 	beq.w	8011514 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011336:	fb00 f302 	mul.w	r3, r0, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	9306      	str	r3, [sp, #24]
 801133e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011340:	fb03 f302 	mul.w	r3, r3, r2
 8011344:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011348:	9301      	str	r3, [sp, #4]
 801134a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801134c:	425b      	negs	r3, r3
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	2300      	movs	r3, #0
 8011352:	00a4      	lsls	r4, r4, #2
 8011354:	9302      	str	r3, [sp, #8]
 8011356:	0093      	lsls	r3, r2, #2
 8011358:	9405      	str	r4, [sp, #20]
 801135a:	930a      	str	r3, [sp, #40]	; 0x28
 801135c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801135e:	2b00      	cmp	r3, #0
 8011360:	f2c0 80db 	blt.w	801151a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 8011364:	9e01      	ldr	r6, [sp, #4]
 8011366:	9d04      	ldr	r5, [sp, #16]
 8011368:	2000      	movs	r0, #0
 801136a:	9b07      	ldr	r3, [sp, #28]
 801136c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801136e:	9900      	ldr	r1, [sp, #0]
 8011370:	fb05 3502 	mla	r5, r5, r2, r3
 8011374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011376:	440b      	add	r3, r1
 8011378:	9919      	ldr	r1, [sp, #100]	; 0x64
 801137a:	428b      	cmp	r3, r1
 801137c:	bf94      	ite	ls
 801137e:	ebc0 0003 	rsbls	r0, r0, r3
 8011382:	ebc0 0001 	rsbhi	r0, r0, r1
 8011386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011388:	eba3 0a00 	sub.w	sl, r3, r0
 801138c:	9b08      	ldr	r3, [sp, #32]
 801138e:	f1bb 0f00 	cmp.w	fp, #0
 8011392:	eba1 0900 	sub.w	r9, r1, r0
 8011396:	eeb0 7a40 	vmov.f32	s14, s0
 801139a:	fb03 f000 	mul.w	r0, r3, r0
 801139e:	f340 80a1 	ble.w	80114e4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 80113a2:	f020 040f 	bic.w	r4, r0, #15
 80113a6:	f104 38ff 	add.w	r8, r4, #4294967295
 80113aa:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80113ae:	f108 0801 	add.w	r8, r8, #1
 80113b2:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80113b6:	fb02 fa0a 	mul.w	sl, r2, sl
 80113ba:	fb02 f909 	mul.w	r9, r2, r9
 80113be:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80113c2:	f04f 0c00 	mov.w	ip, #0
 80113c6:	2c00      	cmp	r4, #0
 80113c8:	bfd8      	it	le
 80113ca:	2700      	movle	r7, #0
 80113cc:	dd70      	ble.n	80114b0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 80113ce:	f106 0240 	add.w	r2, r6, #64	; 0x40
 80113d2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80113d6:	2100      	movs	r1, #0
 80113d8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80113dc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80113e0:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80113e4:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80113e8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80113ec:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80113f0:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80113f4:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80113f8:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 80113fc:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8011400:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8011404:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8011408:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 801140c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011410:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8011414:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011418:	3110      	adds	r1, #16
 801141a:	42a1      	cmp	r1, r4
 801141c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8011420:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8011424:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011428:	f102 0240 	add.w	r2, r2, #64	; 0x40
 801142c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011430:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8011434:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8011438:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801143c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8011440:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8011444:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011448:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 801144c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8011450:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011454:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8011458:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 801145c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011460:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011464:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8011468:	eee4 7a24 	vfma.f32	s15, s8, s9
 801146c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8011470:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8011474:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011478:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 801147c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8011480:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011484:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8011488:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 801148c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011490:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011494:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011498:	eee4 7a24 	vfma.f32	s15, s8, s9
 801149c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80114a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80114a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114a8:	db96      	blt.n	80113d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 80114aa:	4476      	add	r6, lr
 80114ac:	4475      	add	r5, lr
 80114ae:	4647      	mov	r7, r8
 80114b0:	42b8      	cmp	r0, r7
 80114b2:	dd10      	ble.n	80114d6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 80114b4:	463b      	mov	r3, r7
 80114b6:	4631      	mov	r1, r6
 80114b8:	462a      	mov	r2, r5
 80114ba:	ecf2 6a01 	vldmia	r2!, {s13}
 80114be:	ecf1 7a01 	vldmia	r1!, {s15}
 80114c2:	3301      	adds	r3, #1
 80114c4:	4298      	cmp	r0, r3
 80114c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114ca:	d1f6      	bne.n	80114ba <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 80114cc:	1bc7      	subs	r7, r0, r7
 80114ce:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80114d2:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80114d6:	f10c 0c01 	add.w	ip, ip, #1
 80114da:	45dc      	cmp	ip, fp
 80114dc:	4456      	add	r6, sl
 80114de:	444d      	add	r5, r9
 80114e0:	f47f af71 	bne.w	80113c6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 80114e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80114e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114e8:	9a03      	ldr	r2, [sp, #12]
 80114ea:	9b02      	ldr	r3, [sp, #8]
 80114ec:	ed82 7a00 	vstr	s14, [r2]
 80114f0:	4401      	add	r1, r0
 80114f2:	911c      	str	r1, [sp, #112]	; 0x70
 80114f4:	9905      	ldr	r1, [sp, #20]
 80114f6:	440a      	add	r2, r1
 80114f8:	9203      	str	r2, [sp, #12]
 80114fa:	9a00      	ldr	r2, [sp, #0]
 80114fc:	9906      	ldr	r1, [sp, #24]
 80114fe:	1a12      	subs	r2, r2, r0
 8011500:	9200      	str	r2, [sp, #0]
 8011502:	9a01      	ldr	r2, [sp, #4]
 8011504:	440a      	add	r2, r1
 8011506:	9201      	str	r2, [sp, #4]
 8011508:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801150a:	3301      	adds	r3, #1
 801150c:	4293      	cmp	r3, r2
 801150e:	9302      	str	r3, [sp, #8]
 8011510:	f47f af24 	bne.w	801135c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 8011514:	b00d      	add	sp, #52	; 0x34
 8011516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151a:	9a00      	ldr	r2, [sp, #0]
 801151c:	9b04      	ldr	r3, [sp, #16]
 801151e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011520:	4610      	mov	r0, r2
 8011522:	189d      	adds	r5, r3, r2
 8011524:	e721      	b.n	801136a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 8011526:	bf00      	nop

08011528 <forward_lite_conv2d_if32of32wf32>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	ed2d 8b02 	vpush	{d8}
 8011530:	b09f      	sub	sp, #124	; 0x7c
 8011532:	af08      	add	r7, sp, #32
 8011534:	461c      	mov	r4, r3
 8011536:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011538:	63fc      	str	r4, [r7, #60]	; 0x3c
 801153a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 801153e:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 8011542:	64fc      	str	r4, [r7, #76]	; 0x4c
 8011544:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011548:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 801154c:	6078      	str	r0, [r7, #4]
 801154e:	424e      	negs	r6, r1
 8011550:	4686      	mov	lr, r0
 8011552:	4694      	mov	ip, r2
 8011554:	613a      	str	r2, [r7, #16]
 8011556:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 801155a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801155e:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8011562:	617d      	str	r5, [r7, #20]
 8011564:	633e      	str	r6, [r7, #48]	; 0x30
 8011566:	2c00      	cmp	r4, #0
 8011568:	f000 8092 	beq.w	8011690 <forward_lite_conv2d_if32of32wf32+0x168>
 801156c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8011570:	6379      	str	r1, [r7, #52]	; 0x34
 8011572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011576:	eddf 0a9c 	vldr	s1, [pc, #624]	; 80117e8 <forward_lite_conv2d_if32of32wf32+0x2c0>
 801157a:	fb04 f202 	mul.w	r2, r4, r2
 801157e:	fb03 f402 	mul.w	r4, r3, r2
 8011582:	fb03 f201 	mul.w	r2, r3, r1
 8011586:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801158a:	63bc      	str	r4, [r7, #56]	; 0x38
 801158c:	fb01 f10a 	mul.w	r1, r1, sl
 8011590:	0089      	lsls	r1, r1, #2
 8011592:	61b9      	str	r1, [r7, #24]
 8011594:	fb05 f102 	mul.w	r1, r5, r2
 8011598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801159c:	fb06 f202 	mul.w	r2, r6, r2
 80115a0:	0089      	lsls	r1, r1, #2
 80115a2:	61f9      	str	r1, [r7, #28]
 80115a4:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 80115a8:	f10b 0207 	add.w	r2, fp, #7
 80115ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80115ae:	f022 0107 	bic.w	r1, r2, #7
 80115b2:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 80115b6:	4240      	negs	r0, r0
 80115b8:	60f9      	str	r1, [r7, #12]
 80115ba:	60ba      	str	r2, [r7, #8]
 80115bc:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 80115c0:	2200      	movs	r2, #0
 80115c2:	4655      	mov	r5, sl
 80115c4:	6538      	str	r0, [r7, #80]	; 0x50
 80115c6:	6239      	str	r1, [r7, #32]
 80115c8:	627a      	str	r2, [r7, #36]	; 0x24
 80115ca:	46da      	mov	sl, fp
 80115cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ce:	2a00      	cmp	r2, #0
 80115d0:	f2c0 80d7 	blt.w	8011782 <forward_lite_conv2d_if32of32wf32+0x25a>
 80115d4:	2200      	movs	r2, #0
 80115d6:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 80115da:	657a      	str	r2, [r7, #84]	; 0x54
 80115dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80115de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80115e2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80115e6:	440a      	add	r2, r1
 80115e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80115ea:	4282      	cmp	r2, r0
 80115ec:	bf94      	ite	ls
 80115ee:	ebc1 0102 	rsbls	r1, r1, r2
 80115f2:	ebc1 0100 	rsbhi	r1, r1, r0
 80115f6:	6a3a      	ldr	r2, [r7, #32]
 80115f8:	6439      	str	r1, [r7, #64]	; 0x40
 80115fa:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80115fe:	d24d      	bcs.n	801169c <forward_lite_conv2d_if32of32wf32+0x174>
 8011600:	b385      	cbz	r5, 8011664 <forward_lite_conv2d_if32of32wf32+0x13c>
 8011602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011604:	2a00      	cmp	r2, #0
 8011606:	f000 80c1 	beq.w	801178c <forward_lite_conv2d_if32of32wf32+0x264>
 801160a:	4659      	mov	r1, fp
 801160c:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011610:	693e      	ldr	r6, [r7, #16]
 8011612:	46d3      	mov	fp, sl
 8011614:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8011618:	4691      	mov	r9, r2
 801161a:	2400      	movs	r4, #0
 801161c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801161e:	ecb9 0a01 	vldmia	r9!, {s0}
 8011622:	9207      	str	r2, [sp, #28]
 8011624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011626:	e9cd a205 	strd	sl, r2, [sp, #20]
 801162a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801162c:	9204      	str	r2, [sp, #16]
 801162e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011632:	9203      	str	r2, [sp, #12]
 8011634:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011638:	9202      	str	r2, [sp, #8]
 801163a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801163e:	4640      	mov	r0, r8
 8011640:	e9cd 5200 	strd	r5, r2, [sp]
 8011644:	3401      	adds	r4, #1
 8011646:	4632      	mov	r2, r6
 8011648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801164c:	64b9      	str	r1, [r7, #72]	; 0x48
 801164e:	f7ff fe5b 	bl	8011308 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011652:	42a5      	cmp	r5, r4
 8011654:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011656:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801165a:	445e      	add	r6, fp
 801165c:	f108 0804 	add.w	r8, r8, #4
 8011660:	d1dc      	bne.n	801161c <forward_lite_conv2d_if32of32wf32+0xf4>
 8011662:	46da      	mov	sl, fp
 8011664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011666:	69b8      	ldr	r0, [r7, #24]
 8011668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801166a:	4401      	add	r1, r0
 801166c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801166e:	6978      	ldr	r0, [r7, #20]
 8011670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011672:	4401      	add	r1, r0
 8011674:	6339      	str	r1, [r7, #48]	; 0x30
 8011676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011678:	1a09      	subs	r1, r1, r0
 801167a:	6379      	str	r1, [r7, #52]	; 0x34
 801167c:	69f8      	ldr	r0, [r7, #28]
 801167e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011680:	4401      	add	r1, r0
 8011682:	62b9      	str	r1, [r7, #40]	; 0x28
 8011684:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011688:	3201      	adds	r2, #1
 801168a:	4291      	cmp	r1, r2
 801168c:	627a      	str	r2, [r7, #36]	; 0x24
 801168e:	d19d      	bne.n	80115cc <forward_lite_conv2d_if32of32wf32+0xa4>
 8011690:	375c      	adds	r7, #92	; 0x5c
 8011692:	46bd      	mov	sp, r7
 8011694:	ecbd 8b02 	vpop	{d8}
 8011698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169c:	466a      	mov	r2, sp
 801169e:	ee08 2a10 	vmov	s16, r2
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	ebad 0d02 	sub.w	sp, sp, r2
 80116a8:	aa08      	add	r2, sp, #32
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	d03d      	beq.n	801172a <forward_lite_conv2d_if32of32wf32+0x202>
 80116ae:	6938      	ldr	r0, [r7, #16]
 80116b0:	68bc      	ldr	r4, [r7, #8]
 80116b2:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 80116b6:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80116b8:	4659      	mov	r1, fp
 80116ba:	f04f 0800 	mov.w	r8, #0
 80116be:	46ab      	mov	fp, r5
 80116c0:	4605      	mov	r5, r0
 80116c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116c4:	b138      	cbz	r0, 80116d6 <forward_lite_conv2d_if32of32wf32+0x1ae>
 80116c6:	4628      	mov	r0, r5
 80116c8:	4694      	mov	ip, r2
 80116ca:	f850 eb04 	ldr.w	lr, [r0], #4
 80116ce:	f84c eb04 	str.w	lr, [ip], #4
 80116d2:	42a0      	cmp	r0, r4
 80116d4:	d1f9      	bne.n	80116ca <forward_lite_conv2d_if32of32wf32+0x1a2>
 80116d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80116d8:	b358      	cbz	r0, 8011732 <forward_lite_conv2d_if32of32wf32+0x20a>
 80116da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80116dc:	ecb6 0a01 	vldmia	r6!, {s0}
 80116e0:	9007      	str	r0, [sp, #28]
 80116e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80116e4:	9006      	str	r0, [sp, #24]
 80116e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80116e8:	9005      	str	r0, [sp, #20]
 80116ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80116ec:	9004      	str	r0, [sp, #16]
 80116ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80116f2:	9003      	str	r0, [sp, #12]
 80116f4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80116f8:	9002      	str	r0, [sp, #8]
 80116fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80116fe:	f108 0801 	add.w	r8, r8, #1
 8011702:	e9cd b000 	strd	fp, r0, [sp]
 8011706:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 801170a:	4648      	mov	r0, r9
 801170c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011710:	f7ff fdfa 	bl	8011308 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011714:	45d8      	cmp	r8, fp
 8011716:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 801171a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801171e:	4455      	add	r5, sl
 8011720:	4454      	add	r4, sl
 8011722:	f109 0904 	add.w	r9, r9, #4
 8011726:	d1cc      	bne.n	80116c2 <forward_lite_conv2d_if32of32wf32+0x19a>
 8011728:	465d      	mov	r5, fp
 801172a:	ee18 2a10 	vmov	r2, s16
 801172e:	4695      	mov	sp, r2
 8011730:	e798      	b.n	8011664 <forward_lite_conv2d_if32of32wf32+0x13c>
 8011732:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011734:	9007      	str	r0, [sp, #28]
 8011736:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011738:	9006      	str	r0, [sp, #24]
 801173a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801173c:	9005      	str	r0, [sp, #20]
 801173e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011740:	9004      	str	r0, [sp, #16]
 8011742:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011746:	9003      	str	r0, [sp, #12]
 8011748:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801174c:	9002      	str	r0, [sp, #8]
 801174e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011752:	eeb0 0a60 	vmov.f32	s0, s1
 8011756:	e9cd b000 	strd	fp, r0, [sp]
 801175a:	f108 0801 	add.w	r8, r8, #1
 801175e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8011762:	4648      	mov	r0, r9
 8011764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011768:	f7ff fdce 	bl	8011308 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801176c:	45c3      	cmp	fp, r8
 801176e:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8011772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011776:	4455      	add	r5, sl
 8011778:	4454      	add	r4, sl
 801177a:	f109 0904 	add.w	r9, r9, #4
 801177e:	d1a0      	bne.n	80116c2 <forward_lite_conv2d_if32of32wf32+0x19a>
 8011780:	e7d2      	b.n	8011728 <forward_lite_conv2d_if32of32wf32+0x200>
 8011782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011784:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8011788:	657a      	str	r2, [r7, #84]	; 0x54
 801178a:	e727      	b.n	80115dc <forward_lite_conv2d_if32of32wf32+0xb4>
 801178c:	4659      	mov	r1, fp
 801178e:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011792:	693e      	ldr	r6, [r7, #16]
 8011794:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8011798:	46d3      	mov	fp, sl
 801179a:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 801179e:	4614      	mov	r4, r2
 80117a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117a2:	9207      	str	r2, [sp, #28]
 80117a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80117aa:	e9cd a205 	strd	sl, r2, [sp, #20]
 80117ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80117b2:	9203      	str	r2, [sp, #12]
 80117b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80117b8:	9202      	str	r2, [sp, #8]
 80117ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80117be:	4640      	mov	r0, r8
 80117c0:	e9cd 5200 	strd	r5, r2, [sp]
 80117c4:	eeb0 0a60 	vmov.f32	s0, s1
 80117c8:	4632      	mov	r2, r6
 80117ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80117ce:	6579      	str	r1, [r7, #84]	; 0x54
 80117d0:	3401      	adds	r4, #1
 80117d2:	f7ff fd99 	bl	8011308 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80117d6:	42a5      	cmp	r5, r4
 80117d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80117da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80117de:	445e      	add	r6, fp
 80117e0:	f108 0804 	add.w	r8, r8, #4
 80117e4:	d1dc      	bne.n	80117a0 <forward_lite_conv2d_if32of32wf32+0x278>
 80117e6:	e73c      	b.n	8011662 <forward_lite_conv2d_if32of32wf32+0x13a>
 80117e8:	00000000 	.word	0x00000000

080117ec <forward_lite_dense_if32of32wf32>:
 80117ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80117f4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80117f8:	4287      	cmp	r7, r0
 80117fa:	f240 8106 	bls.w	8011a0a <forward_lite_dense_if32of32wf32+0x21e>
 80117fe:	f1a6 0810 	sub.w	r8, r6, #16
 8011802:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011806:	f108 0801 	add.w	r8, r8, #1
 801180a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 801180e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8011812:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8011816:	4605      	mov	r5, r0
 8011818:	f006 0a0f 	and.w	sl, r6, #15
 801181c:	2e0f      	cmp	r6, #15
 801181e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8011a30 <forward_lite_dense_if32of32wf32+0x244>
 8011822:	f240 8101 	bls.w	8011a28 <forward_lite_dense_if32of32wf32+0x23c>
 8011826:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 801182a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 801182e:	46b6      	mov	lr, r6
 8011830:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8011834:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8011838:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 801183c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8011840:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8011844:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8011848:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 801184c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8011850:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8011854:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8011858:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 801185c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8011860:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8011864:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011868:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 801186c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011870:	f1ae 0e10 	sub.w	lr, lr, #16
 8011874:	f1be 0f0f 	cmp.w	lr, #15
 8011878:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 801187c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8011880:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011884:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8011888:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801188c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8011890:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8011894:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8011898:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 801189c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80118a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118a4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80118a8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80118ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80118b0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80118b4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80118b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80118bc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80118c0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80118c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80118c8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80118cc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80118d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118d4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80118d8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80118dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80118e0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80118e4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80118e8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80118ec:	eee2 7a22 	vfma.f32	s15, s4, s5
 80118f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80118f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80118f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011904:	d894      	bhi.n	8011830 <forward_lite_dense_if32of32wf32+0x44>
 8011906:	eb02 0e0b 	add.w	lr, r2, fp
 801190a:	4654      	mov	r4, sl
 801190c:	46c4      	mov	ip, r8
 801190e:	2c00      	cmp	r4, #0
 8011910:	d075      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011912:	eddc 6a00 	vldr	s13, [ip]
 8011916:	edde 7a00 	vldr	s15, [lr]
 801191a:	2c01      	cmp	r4, #1
 801191c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011920:	d06d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011922:	eddc 6a01 	vldr	s13, [ip, #4]
 8011926:	edde 7a01 	vldr	s15, [lr, #4]
 801192a:	2c02      	cmp	r4, #2
 801192c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011930:	d065      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011932:	eddc 6a02 	vldr	s13, [ip, #8]
 8011936:	edde 7a02 	vldr	s15, [lr, #8]
 801193a:	2c03      	cmp	r4, #3
 801193c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011940:	d05d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011942:	eddc 6a03 	vldr	s13, [ip, #12]
 8011946:	edde 7a03 	vldr	s15, [lr, #12]
 801194a:	2c04      	cmp	r4, #4
 801194c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011950:	d055      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011952:	eddc 6a04 	vldr	s13, [ip, #16]
 8011956:	edde 7a04 	vldr	s15, [lr, #16]
 801195a:	2c05      	cmp	r4, #5
 801195c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011960:	d04d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011962:	eddc 6a05 	vldr	s13, [ip, #20]
 8011966:	edde 7a05 	vldr	s15, [lr, #20]
 801196a:	2c06      	cmp	r4, #6
 801196c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011970:	d045      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011972:	eddc 6a06 	vldr	s13, [ip, #24]
 8011976:	edde 7a06 	vldr	s15, [lr, #24]
 801197a:	2c07      	cmp	r4, #7
 801197c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011980:	d03d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011982:	eddc 6a07 	vldr	s13, [ip, #28]
 8011986:	edde 7a07 	vldr	s15, [lr, #28]
 801198a:	2c08      	cmp	r4, #8
 801198c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011990:	d035      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 8011992:	eddc 6a08 	vldr	s13, [ip, #32]
 8011996:	edde 7a08 	vldr	s15, [lr, #32]
 801199a:	2c09      	cmp	r4, #9
 801199c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119a0:	d02d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119a2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80119a6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80119aa:	2c0a      	cmp	r4, #10
 80119ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119b0:	d025      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119b2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80119b6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80119ba:	2c0b      	cmp	r4, #11
 80119bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119c0:	d01d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119c2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80119c6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80119ca:	2c0c      	cmp	r4, #12
 80119cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119d0:	d015      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119d2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80119d6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80119da:	3c0d      	subs	r4, #13
 80119dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119e0:	d00d      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119e2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80119e6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80119ea:	2c01      	cmp	r4, #1
 80119ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119f0:	d005      	beq.n	80119fe <forward_lite_dense_if32of32wf32+0x212>
 80119f2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80119f6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80119fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80119fe:	444a      	add	r2, r9
 8011a00:	eca5 7a01 	vstmia	r5!, {s14}
 8011a04:	42af      	cmp	r7, r5
 8011a06:	f63f af09 	bhi.w	801181c <forward_lite_dense_if32of32wf32+0x30>
 8011a0a:	b15b      	cbz	r3, 8011a24 <forward_lite_dense_if32of32wf32+0x238>
 8011a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a0e:	b14a      	cbz	r2, 8011a24 <forward_lite_dense_if32of32wf32+0x238>
 8011a10:	edd0 7a00 	vldr	s15, [r0]
 8011a14:	ecb3 7a01 	vldmia	r3!, {s14}
 8011a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a1c:	ece0 7a01 	vstmia	r0!, {s15}
 8011a20:	4287      	cmp	r7, r0
 8011a22:	d1f5      	bne.n	8011a10 <forward_lite_dense_if32of32wf32+0x224>
 8011a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a28:	4634      	mov	r4, r6
 8011a2a:	4696      	mov	lr, r2
 8011a2c:	468c      	mov	ip, r1
 8011a2e:	e76e      	b.n	801190e <forward_lite_dense_if32of32wf32+0x122>
 8011a30:	00000000 	.word	0x00000000

08011a34 <st_int8_copy>:
 8011a34:	4288      	cmp	r0, r1
 8011a36:	d057      	beq.n	8011ae8 <st_int8_copy+0xb4>
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	d055      	beq.n	8011ae8 <st_int8_copy+0xb4>
 8011a3c:	4288      	cmp	r0, r1
 8011a3e:	d354      	bcc.n	8011aea <st_int8_copy+0xb6>
 8011a40:	078b      	lsls	r3, r1, #30
 8011a42:	d102      	bne.n	8011a4a <st_int8_copy+0x16>
 8011a44:	e009      	b.n	8011a5a <st_int8_copy+0x26>
 8011a46:	2a00      	cmp	r2, #0
 8011a48:	d05c      	beq.n	8011b04 <st_int8_copy+0xd0>
 8011a4a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8011a4e:	f801 3b01 	strb.w	r3, [r1], #1
 8011a52:	078b      	lsls	r3, r1, #30
 8011a54:	f102 32ff 	add.w	r2, r2, #4294967295
 8011a58:	d1f5      	bne.n	8011a46 <st_int8_copy+0x12>
 8011a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8011a62:	d069      	beq.n	8011b38 <st_int8_copy+0x104>
 8011a64:	ea41 0300 	orr.w	r3, r1, r0
 8011a68:	075b      	lsls	r3, r3, #29
 8011a6a:	d14c      	bne.n	8011b06 <st_int8_copy+0xd2>
 8011a6c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d948      	bls.n	8011b06 <st_int8_copy+0xd2>
 8011a74:	f100 0310 	add.w	r3, r0, #16
 8011a78:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011a7c:	f101 0c10 	add.w	ip, r1, #16
 8011a80:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8011a84:	ed13 6b04 	vldr	d6, [r3, #-16]
 8011a88:	ed13 7b02 	vldr	d7, [r3, #-8]
 8011a8c:	3310      	adds	r3, #16
 8011a8e:	4573      	cmp	r3, lr
 8011a90:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8011a94:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8011a98:	f10c 0c10 	add.w	ip, ip, #16
 8011a9c:	d1f2      	bne.n	8011a84 <st_int8_copy+0x50>
 8011a9e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011aa2:	4421      	add	r1, r4
 8011aa4:	4420      	add	r0, r4
 8011aa6:	f002 0203 	and.w	r2, r2, #3
 8011aaa:	b16b      	cbz	r3, 8011ac8 <st_int8_copy+0x94>
 8011aac:	6804      	ldr	r4, [r0, #0]
 8011aae:	600c      	str	r4, [r1, #0]
 8011ab0:	1e5c      	subs	r4, r3, #1
 8011ab2:	d005      	beq.n	8011ac0 <st_int8_copy+0x8c>
 8011ab4:	6845      	ldr	r5, [r0, #4]
 8011ab6:	604d      	str	r5, [r1, #4]
 8011ab8:	2c01      	cmp	r4, #1
 8011aba:	bf1c      	itt	ne
 8011abc:	6884      	ldrne	r4, [r0, #8]
 8011abe:	608c      	strne	r4, [r1, #8]
 8011ac0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011ac4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011ac8:	b162      	cbz	r2, 8011ae4 <st_int8_copy+0xb0>
 8011aca:	f990 3000 	ldrsb.w	r3, [r0]
 8011ace:	700b      	strb	r3, [r1, #0]
 8011ad0:	3a01      	subs	r2, #1
 8011ad2:	d007      	beq.n	8011ae4 <st_int8_copy+0xb0>
 8011ad4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011ad8:	704b      	strb	r3, [r1, #1]
 8011ada:	2a01      	cmp	r2, #1
 8011adc:	bf1c      	itt	ne
 8011ade:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8011ae2:	708b      	strbne	r3, [r1, #2]
 8011ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae8:	4770      	bx	lr
 8011aea:	1883      	adds	r3, r0, r2
 8011aec:	428b      	cmp	r3, r1
 8011aee:	d9a7      	bls.n	8011a40 <st_int8_copy+0xc>
 8011af0:	4283      	cmp	r3, r0
 8011af2:	440a      	add	r2, r1
 8011af4:	d9f8      	bls.n	8011ae8 <st_int8_copy+0xb4>
 8011af6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8011afa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8011afe:	4283      	cmp	r3, r0
 8011b00:	d1f9      	bne.n	8011af6 <st_int8_copy+0xc2>
 8011b02:	4770      	bx	lr
 8011b04:	4770      	bx	lr
 8011b06:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011b0a:	460b      	mov	r3, r1
 8011b0c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8011b10:	4684      	mov	ip, r0
 8011b12:	f8dc 7000 	ldr.w	r7, [ip]
 8011b16:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8011b1a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8011b1e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8011b22:	f8c3 800c 	str.w	r8, [r3, #12]
 8011b26:	601f      	str	r7, [r3, #0]
 8011b28:	605e      	str	r6, [r3, #4]
 8011b2a:	609d      	str	r5, [r3, #8]
 8011b2c:	3310      	adds	r3, #16
 8011b2e:	459e      	cmp	lr, r3
 8011b30:	f10c 0c10 	add.w	ip, ip, #16
 8011b34:	d1ed      	bne.n	8011b12 <st_int8_copy+0xde>
 8011b36:	e7b2      	b.n	8011a9e <st_int8_copy+0x6a>
 8011b38:	0893      	lsrs	r3, r2, #2
 8011b3a:	f002 0203 	and.w	r2, r2, #3
 8011b3e:	e7b4      	b.n	8011aaa <st_int8_copy+0x76>

08011b40 <ai_array_to_buffer_fmt>:
 8011b40:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d050      	beq.n	8011bea <ai_array_to_buffer_fmt+0xaa>
 8011b48:	4b2a      	ldr	r3, [pc, #168]	; (8011bf4 <ai_array_to_buffer_fmt+0xb4>)
 8011b4a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d00b      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b52:	dc1c      	bgt.n	8011b8e <ai_array_to_buffer_fmt+0x4e>
 8011b54:	4b28      	ldr	r3, [pc, #160]	; (8011bf8 <ai_array_to_buffer_fmt+0xb8>)
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d007      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b5a:	dd0b      	ble.n	8011b74 <ai_array_to_buffer_fmt+0x34>
 8011b5c:	4b27      	ldr	r3, [pc, #156]	; (8011bfc <ai_array_to_buffer_fmt+0xbc>)
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d003      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b62:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d131      	bne.n	8011bce <ai_array_to_buffer_fmt+0x8e>
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011b70:	4318      	orrs	r0, r3
 8011b72:	4770      	bx	lr
 8011b74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d0f6      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b7c:	dd2c      	ble.n	8011bd8 <ai_array_to_buffer_fmt+0x98>
 8011b7e:	4b20      	ldr	r3, [pc, #128]	; (8011c00 <ai_array_to_buffer_fmt+0xc0>)
 8011b80:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011b84:	429a      	cmp	r2, r3
 8011b86:	bf18      	it	ne
 8011b88:	2340      	movne	r3, #64	; 0x40
 8011b8a:	4318      	orrs	r0, r3
 8011b8c:	4770      	bx	lr
 8011b8e:	4b1d      	ldr	r3, [pc, #116]	; (8011c04 <ai_array_to_buffer_fmt+0xc4>)
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d0ea      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b94:	dd0e      	ble.n	8011bb4 <ai_array_to_buffer_fmt+0x74>
 8011b96:	4b1c      	ldr	r3, [pc, #112]	; (8011c08 <ai_array_to_buffer_fmt+0xc8>)
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d0e6      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011b9c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d0e2      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011ba4:	4b19      	ldr	r3, [pc, #100]	; (8011c0c <ai_array_to_buffer_fmt+0xcc>)
 8011ba6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011baa:	429a      	cmp	r2, r3
 8011bac:	bf18      	it	ne
 8011bae:	2340      	movne	r3, #64	; 0x40
 8011bb0:	4318      	orrs	r0, r3
 8011bb2:	4770      	bx	lr
 8011bb4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d0d6      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011bbc:	3307      	adds	r3, #7
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d0d3      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011bc2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	bf18      	it	ne
 8011bca:	2340      	movne	r3, #64	; 0x40
 8011bcc:	e7ce      	b.n	8011b6c <ai_array_to_buffer_fmt+0x2c>
 8011bce:	4b10      	ldr	r3, [pc, #64]	; (8011c10 <ai_array_to_buffer_fmt+0xd0>)
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	bf18      	it	ne
 8011bd4:	2340      	movne	r3, #64	; 0x40
 8011bd6:	e7c9      	b.n	8011b6c <ai_array_to_buffer_fmt+0x2c>
 8011bd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d0c4      	beq.n	8011b6a <ai_array_to_buffer_fmt+0x2a>
 8011be0:	3380      	adds	r3, #128	; 0x80
 8011be2:	429a      	cmp	r2, r3
 8011be4:	bf18      	it	ne
 8011be6:	2340      	movne	r3, #64	; 0x40
 8011be8:	e7c0      	b.n	8011b6c <ai_array_to_buffer_fmt+0x2c>
 8011bea:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <ai_array_to_buffer_fmt+0xd4>)
 8011bec:	4003      	ands	r3, r0
 8011bee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011bf2:	e7bb      	b.n	8011b6c <ai_array_to_buffer_fmt+0x2c>
 8011bf4:	00840040 	.word	0x00840040
 8011bf8:	00040840 	.word	0x00040840
 8011bfc:	00041040 	.word	0x00041040
 8011c00:	00040447 	.word	0x00040447
 8011c04:	00840840 	.word	0x00840840
 8011c08:	00841040 	.word	0x00841040
 8011c0c:	0084084f 	.word	0x0084084f
 8011c10:	0004084f 	.word	0x0004084f
 8011c14:	00803fff 	.word	0x00803fff

08011c18 <ai_array_get_byte_size>:
 8011c18:	b319      	cbz	r1, 8011c62 <ai_array_get_byte_size+0x4a>
 8011c1a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011c1e:	fb03 f101 	mul.w	r1, r3, r1
 8011c22:	3107      	adds	r1, #7
 8011c24:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8011c28:	f021 0307 	bic.w	r3, r1, #7
 8011c2c:	2a04      	cmp	r2, #4
 8011c2e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8011c32:	fa23 f101 	lsr.w	r1, r3, r1
 8011c36:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8011c3a:	d00b      	beq.n	8011c54 <ai_array_get_byte_size+0x3c>
 8011c3c:	2a08      	cmp	r2, #8
 8011c3e:	d002      	beq.n	8011c46 <ai_array_get_byte_size+0x2e>
 8011c40:	3107      	adds	r1, #7
 8011c42:	08c8      	lsrs	r0, r1, #3
 8011c44:	4770      	bx	lr
 8011c46:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011c4a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8011c4e:	3107      	adds	r1, #7
 8011c50:	08c8      	lsrs	r0, r1, #3
 8011c52:	4770      	bx	lr
 8011c54:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011c58:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8011c5c:	3107      	adds	r1, #7
 8011c5e:	08c8      	lsrs	r0, r1, #3
 8011c60:	4770      	bx	lr
 8011c62:	4608      	mov	r0, r1
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop

08011c68 <ai_array_get_data_byte_size>:
 8011c68:	b169      	cbz	r1, 8011c86 <ai_array_get_data_byte_size+0x1e>
 8011c6a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8011c6e:	fb02 f101 	mul.w	r1, r2, r1
 8011c72:	1dcb      	adds	r3, r1, #7
 8011c74:	f023 0307 	bic.w	r3, r3, #7
 8011c78:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8011c7c:	fa23 f000 	lsr.w	r0, r3, r0
 8011c80:	3007      	adds	r0, #7
 8011c82:	08c0      	lsrs	r0, r0, #3
 8011c84:	4770      	bx	lr
 8011c86:	4608      	mov	r0, r1
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop

08011c8c <ai_version_get>:
 8011c8c:	0212      	lsls	r2, r2, #8
 8011c8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011c92:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8011c96:	4770      	bx	lr

08011c98 <get_tensor_byte_size>:
 8011c98:	b410      	push	{r4}
 8011c9a:	6983      	ldr	r3, [r0, #24]
 8011c9c:	68c4      	ldr	r4, [r0, #12]
 8011c9e:	6941      	ldr	r1, [r0, #20]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	68e0      	ldr	r0, [r4, #12]
 8011ca4:	4a07      	ldr	r2, [pc, #28]	; (8011cc4 <get_tensor_byte_size+0x2c>)
 8011ca6:	68c9      	ldr	r1, [r1, #12]
 8011ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8011cb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011cb4:	fb01 f000 	mul.w	r0, r1, r0
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	bf04      	itt	eq
 8011cbc:	3007      	addeq	r0, #7
 8011cbe:	08c0      	lsreq	r0, r0, #3
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop
 8011cc4:	000400c0 	.word	0x000400c0

08011cc8 <malloc>:
 8011cc8:	4b02      	ldr	r3, [pc, #8]	; (8011cd4 <malloc+0xc>)
 8011cca:	4601      	mov	r1, r0
 8011ccc:	6818      	ldr	r0, [r3, #0]
 8011cce:	f000 b82b 	b.w	8011d28 <_malloc_r>
 8011cd2:	bf00      	nop
 8011cd4:	20000a44 	.word	0x20000a44

08011cd8 <free>:
 8011cd8:	4b02      	ldr	r3, [pc, #8]	; (8011ce4 <free+0xc>)
 8011cda:	4601      	mov	r1, r0
 8011cdc:	6818      	ldr	r0, [r3, #0]
 8011cde:	f002 b8d1 	b.w	8013e84 <_free_r>
 8011ce2:	bf00      	nop
 8011ce4:	20000a44 	.word	0x20000a44

08011ce8 <sbrk_aligned>:
 8011ce8:	b570      	push	{r4, r5, r6, lr}
 8011cea:	4e0e      	ldr	r6, [pc, #56]	; (8011d24 <sbrk_aligned+0x3c>)
 8011cec:	460c      	mov	r4, r1
 8011cee:	6831      	ldr	r1, [r6, #0]
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	b911      	cbnz	r1, 8011cfa <sbrk_aligned+0x12>
 8011cf4:	f001 f9e6 	bl	80130c4 <_sbrk_r>
 8011cf8:	6030      	str	r0, [r6, #0]
 8011cfa:	4621      	mov	r1, r4
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f001 f9e1 	bl	80130c4 <_sbrk_r>
 8011d02:	1c43      	adds	r3, r0, #1
 8011d04:	d00a      	beq.n	8011d1c <sbrk_aligned+0x34>
 8011d06:	1cc4      	adds	r4, r0, #3
 8011d08:	f024 0403 	bic.w	r4, r4, #3
 8011d0c:	42a0      	cmp	r0, r4
 8011d0e:	d007      	beq.n	8011d20 <sbrk_aligned+0x38>
 8011d10:	1a21      	subs	r1, r4, r0
 8011d12:	4628      	mov	r0, r5
 8011d14:	f001 f9d6 	bl	80130c4 <_sbrk_r>
 8011d18:	3001      	adds	r0, #1
 8011d1a:	d101      	bne.n	8011d20 <sbrk_aligned+0x38>
 8011d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8011d20:	4620      	mov	r0, r4
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	20005bac 	.word	0x20005bac

08011d28 <_malloc_r>:
 8011d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d2c:	1ccd      	adds	r5, r1, #3
 8011d2e:	f025 0503 	bic.w	r5, r5, #3
 8011d32:	3508      	adds	r5, #8
 8011d34:	2d0c      	cmp	r5, #12
 8011d36:	bf38      	it	cc
 8011d38:	250c      	movcc	r5, #12
 8011d3a:	2d00      	cmp	r5, #0
 8011d3c:	4607      	mov	r7, r0
 8011d3e:	db01      	blt.n	8011d44 <_malloc_r+0x1c>
 8011d40:	42a9      	cmp	r1, r5
 8011d42:	d905      	bls.n	8011d50 <_malloc_r+0x28>
 8011d44:	230c      	movs	r3, #12
 8011d46:	603b      	str	r3, [r7, #0]
 8011d48:	2600      	movs	r6, #0
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011e24 <_malloc_r+0xfc>
 8011d54:	f000 f868 	bl	8011e28 <__malloc_lock>
 8011d58:	f8d8 3000 	ldr.w	r3, [r8]
 8011d5c:	461c      	mov	r4, r3
 8011d5e:	bb5c      	cbnz	r4, 8011db8 <_malloc_r+0x90>
 8011d60:	4629      	mov	r1, r5
 8011d62:	4638      	mov	r0, r7
 8011d64:	f7ff ffc0 	bl	8011ce8 <sbrk_aligned>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	d155      	bne.n	8011e1a <_malloc_r+0xf2>
 8011d6e:	f8d8 4000 	ldr.w	r4, [r8]
 8011d72:	4626      	mov	r6, r4
 8011d74:	2e00      	cmp	r6, #0
 8011d76:	d145      	bne.n	8011e04 <_malloc_r+0xdc>
 8011d78:	2c00      	cmp	r4, #0
 8011d7a:	d048      	beq.n	8011e0e <_malloc_r+0xe6>
 8011d7c:	6823      	ldr	r3, [r4, #0]
 8011d7e:	4631      	mov	r1, r6
 8011d80:	4638      	mov	r0, r7
 8011d82:	eb04 0903 	add.w	r9, r4, r3
 8011d86:	f001 f99d 	bl	80130c4 <_sbrk_r>
 8011d8a:	4581      	cmp	r9, r0
 8011d8c:	d13f      	bne.n	8011e0e <_malloc_r+0xe6>
 8011d8e:	6821      	ldr	r1, [r4, #0]
 8011d90:	1a6d      	subs	r5, r5, r1
 8011d92:	4629      	mov	r1, r5
 8011d94:	4638      	mov	r0, r7
 8011d96:	f7ff ffa7 	bl	8011ce8 <sbrk_aligned>
 8011d9a:	3001      	adds	r0, #1
 8011d9c:	d037      	beq.n	8011e0e <_malloc_r+0xe6>
 8011d9e:	6823      	ldr	r3, [r4, #0]
 8011da0:	442b      	add	r3, r5
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	f8d8 3000 	ldr.w	r3, [r8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d038      	beq.n	8011e1e <_malloc_r+0xf6>
 8011dac:	685a      	ldr	r2, [r3, #4]
 8011dae:	42a2      	cmp	r2, r4
 8011db0:	d12b      	bne.n	8011e0a <_malloc_r+0xe2>
 8011db2:	2200      	movs	r2, #0
 8011db4:	605a      	str	r2, [r3, #4]
 8011db6:	e00f      	b.n	8011dd8 <_malloc_r+0xb0>
 8011db8:	6822      	ldr	r2, [r4, #0]
 8011dba:	1b52      	subs	r2, r2, r5
 8011dbc:	d41f      	bmi.n	8011dfe <_malloc_r+0xd6>
 8011dbe:	2a0b      	cmp	r2, #11
 8011dc0:	d917      	bls.n	8011df2 <_malloc_r+0xca>
 8011dc2:	1961      	adds	r1, r4, r5
 8011dc4:	42a3      	cmp	r3, r4
 8011dc6:	6025      	str	r5, [r4, #0]
 8011dc8:	bf18      	it	ne
 8011dca:	6059      	strne	r1, [r3, #4]
 8011dcc:	6863      	ldr	r3, [r4, #4]
 8011dce:	bf08      	it	eq
 8011dd0:	f8c8 1000 	streq.w	r1, [r8]
 8011dd4:	5162      	str	r2, [r4, r5]
 8011dd6:	604b      	str	r3, [r1, #4]
 8011dd8:	4638      	mov	r0, r7
 8011dda:	f104 060b 	add.w	r6, r4, #11
 8011dde:	f000 f829 	bl	8011e34 <__malloc_unlock>
 8011de2:	f026 0607 	bic.w	r6, r6, #7
 8011de6:	1d23      	adds	r3, r4, #4
 8011de8:	1af2      	subs	r2, r6, r3
 8011dea:	d0ae      	beq.n	8011d4a <_malloc_r+0x22>
 8011dec:	1b9b      	subs	r3, r3, r6
 8011dee:	50a3      	str	r3, [r4, r2]
 8011df0:	e7ab      	b.n	8011d4a <_malloc_r+0x22>
 8011df2:	42a3      	cmp	r3, r4
 8011df4:	6862      	ldr	r2, [r4, #4]
 8011df6:	d1dd      	bne.n	8011db4 <_malloc_r+0x8c>
 8011df8:	f8c8 2000 	str.w	r2, [r8]
 8011dfc:	e7ec      	b.n	8011dd8 <_malloc_r+0xb0>
 8011dfe:	4623      	mov	r3, r4
 8011e00:	6864      	ldr	r4, [r4, #4]
 8011e02:	e7ac      	b.n	8011d5e <_malloc_r+0x36>
 8011e04:	4634      	mov	r4, r6
 8011e06:	6876      	ldr	r6, [r6, #4]
 8011e08:	e7b4      	b.n	8011d74 <_malloc_r+0x4c>
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	e7cc      	b.n	8011da8 <_malloc_r+0x80>
 8011e0e:	230c      	movs	r3, #12
 8011e10:	603b      	str	r3, [r7, #0]
 8011e12:	4638      	mov	r0, r7
 8011e14:	f000 f80e 	bl	8011e34 <__malloc_unlock>
 8011e18:	e797      	b.n	8011d4a <_malloc_r+0x22>
 8011e1a:	6025      	str	r5, [r4, #0]
 8011e1c:	e7dc      	b.n	8011dd8 <_malloc_r+0xb0>
 8011e1e:	605b      	str	r3, [r3, #4]
 8011e20:	deff      	udf	#255	; 0xff
 8011e22:	bf00      	nop
 8011e24:	20005ba8 	.word	0x20005ba8

08011e28 <__malloc_lock>:
 8011e28:	4801      	ldr	r0, [pc, #4]	; (8011e30 <__malloc_lock+0x8>)
 8011e2a:	f001 b998 	b.w	801315e <__retarget_lock_acquire_recursive>
 8011e2e:	bf00      	nop
 8011e30:	20005cf0 	.word	0x20005cf0

08011e34 <__malloc_unlock>:
 8011e34:	4801      	ldr	r0, [pc, #4]	; (8011e3c <__malloc_unlock+0x8>)
 8011e36:	f001 b993 	b.w	8013160 <__retarget_lock_release_recursive>
 8011e3a:	bf00      	nop
 8011e3c:	20005cf0 	.word	0x20005cf0

08011e40 <_realloc_r>:
 8011e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e44:	4680      	mov	r8, r0
 8011e46:	4614      	mov	r4, r2
 8011e48:	460e      	mov	r6, r1
 8011e4a:	b921      	cbnz	r1, 8011e56 <_realloc_r+0x16>
 8011e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e50:	4611      	mov	r1, r2
 8011e52:	f7ff bf69 	b.w	8011d28 <_malloc_r>
 8011e56:	b92a      	cbnz	r2, 8011e64 <_realloc_r+0x24>
 8011e58:	f002 f814 	bl	8013e84 <_free_r>
 8011e5c:	4625      	mov	r5, r4
 8011e5e:	4628      	mov	r0, r5
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	f002 fd07 	bl	8014876 <_malloc_usable_size_r>
 8011e68:	4284      	cmp	r4, r0
 8011e6a:	4607      	mov	r7, r0
 8011e6c:	d802      	bhi.n	8011e74 <_realloc_r+0x34>
 8011e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e72:	d812      	bhi.n	8011e9a <_realloc_r+0x5a>
 8011e74:	4621      	mov	r1, r4
 8011e76:	4640      	mov	r0, r8
 8011e78:	f7ff ff56 	bl	8011d28 <_malloc_r>
 8011e7c:	4605      	mov	r5, r0
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d0ed      	beq.n	8011e5e <_realloc_r+0x1e>
 8011e82:	42bc      	cmp	r4, r7
 8011e84:	4622      	mov	r2, r4
 8011e86:	4631      	mov	r1, r6
 8011e88:	bf28      	it	cs
 8011e8a:	463a      	movcs	r2, r7
 8011e8c:	f001 f969 	bl	8013162 <memcpy>
 8011e90:	4631      	mov	r1, r6
 8011e92:	4640      	mov	r0, r8
 8011e94:	f001 fff6 	bl	8013e84 <_free_r>
 8011e98:	e7e1      	b.n	8011e5e <_realloc_r+0x1e>
 8011e9a:	4635      	mov	r5, r6
 8011e9c:	e7df      	b.n	8011e5e <_realloc_r+0x1e>

08011e9e <__cvt>:
 8011e9e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea2:	ec55 4b10 	vmov	r4, r5, d0
 8011ea6:	2d00      	cmp	r5, #0
 8011ea8:	460e      	mov	r6, r1
 8011eaa:	4619      	mov	r1, r3
 8011eac:	462b      	mov	r3, r5
 8011eae:	bfbb      	ittet	lt
 8011eb0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011eb4:	461d      	movlt	r5, r3
 8011eb6:	2300      	movge	r3, #0
 8011eb8:	232d      	movlt	r3, #45	; 0x2d
 8011eba:	700b      	strb	r3, [r1, #0]
 8011ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ebe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ec2:	4691      	mov	r9, r2
 8011ec4:	f023 0820 	bic.w	r8, r3, #32
 8011ec8:	bfbc      	itt	lt
 8011eca:	4622      	movlt	r2, r4
 8011ecc:	4614      	movlt	r4, r2
 8011ece:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ed2:	d005      	beq.n	8011ee0 <__cvt+0x42>
 8011ed4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ed8:	d100      	bne.n	8011edc <__cvt+0x3e>
 8011eda:	3601      	adds	r6, #1
 8011edc:	2102      	movs	r1, #2
 8011ede:	e000      	b.n	8011ee2 <__cvt+0x44>
 8011ee0:	2103      	movs	r1, #3
 8011ee2:	ab03      	add	r3, sp, #12
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	ab02      	add	r3, sp, #8
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	ec45 4b10 	vmov	d0, r4, r5
 8011eee:	4653      	mov	r3, sl
 8011ef0:	4632      	mov	r2, r6
 8011ef2:	f001 f9d5 	bl	80132a0 <_dtoa_r>
 8011ef6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011efa:	4607      	mov	r7, r0
 8011efc:	d102      	bne.n	8011f04 <__cvt+0x66>
 8011efe:	f019 0f01 	tst.w	r9, #1
 8011f02:	d022      	beq.n	8011f4a <__cvt+0xac>
 8011f04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f08:	eb07 0906 	add.w	r9, r7, r6
 8011f0c:	d110      	bne.n	8011f30 <__cvt+0x92>
 8011f0e:	783b      	ldrb	r3, [r7, #0]
 8011f10:	2b30      	cmp	r3, #48	; 0x30
 8011f12:	d10a      	bne.n	8011f2a <__cvt+0x8c>
 8011f14:	2200      	movs	r2, #0
 8011f16:	2300      	movs	r3, #0
 8011f18:	4620      	mov	r0, r4
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	f7ee fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f20:	b918      	cbnz	r0, 8011f2a <__cvt+0x8c>
 8011f22:	f1c6 0601 	rsb	r6, r6, #1
 8011f26:	f8ca 6000 	str.w	r6, [sl]
 8011f2a:	f8da 3000 	ldr.w	r3, [sl]
 8011f2e:	4499      	add	r9, r3
 8011f30:	2200      	movs	r2, #0
 8011f32:	2300      	movs	r3, #0
 8011f34:	4620      	mov	r0, r4
 8011f36:	4629      	mov	r1, r5
 8011f38:	f7ee fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f3c:	b108      	cbz	r0, 8011f42 <__cvt+0xa4>
 8011f3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f42:	2230      	movs	r2, #48	; 0x30
 8011f44:	9b03      	ldr	r3, [sp, #12]
 8011f46:	454b      	cmp	r3, r9
 8011f48:	d307      	bcc.n	8011f5a <__cvt+0xbc>
 8011f4a:	9b03      	ldr	r3, [sp, #12]
 8011f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f4e:	1bdb      	subs	r3, r3, r7
 8011f50:	4638      	mov	r0, r7
 8011f52:	6013      	str	r3, [r2, #0]
 8011f54:	b004      	add	sp, #16
 8011f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f5a:	1c59      	adds	r1, r3, #1
 8011f5c:	9103      	str	r1, [sp, #12]
 8011f5e:	701a      	strb	r2, [r3, #0]
 8011f60:	e7f0      	b.n	8011f44 <__cvt+0xa6>

08011f62 <__exponent>:
 8011f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f64:	4603      	mov	r3, r0
 8011f66:	2900      	cmp	r1, #0
 8011f68:	bfb8      	it	lt
 8011f6a:	4249      	neglt	r1, r1
 8011f6c:	f803 2b02 	strb.w	r2, [r3], #2
 8011f70:	bfb4      	ite	lt
 8011f72:	222d      	movlt	r2, #45	; 0x2d
 8011f74:	222b      	movge	r2, #43	; 0x2b
 8011f76:	2909      	cmp	r1, #9
 8011f78:	7042      	strb	r2, [r0, #1]
 8011f7a:	dd2a      	ble.n	8011fd2 <__exponent+0x70>
 8011f7c:	f10d 0207 	add.w	r2, sp, #7
 8011f80:	4617      	mov	r7, r2
 8011f82:	260a      	movs	r6, #10
 8011f84:	4694      	mov	ip, r2
 8011f86:	fb91 f5f6 	sdiv	r5, r1, r6
 8011f8a:	fb06 1415 	mls	r4, r6, r5, r1
 8011f8e:	3430      	adds	r4, #48	; 0x30
 8011f90:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011f94:	460c      	mov	r4, r1
 8011f96:	2c63      	cmp	r4, #99	; 0x63
 8011f98:	f102 32ff 	add.w	r2, r2, #4294967295
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	dcf1      	bgt.n	8011f84 <__exponent+0x22>
 8011fa0:	3130      	adds	r1, #48	; 0x30
 8011fa2:	f1ac 0402 	sub.w	r4, ip, #2
 8011fa6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011faa:	1c41      	adds	r1, r0, #1
 8011fac:	4622      	mov	r2, r4
 8011fae:	42ba      	cmp	r2, r7
 8011fb0:	d30a      	bcc.n	8011fc8 <__exponent+0x66>
 8011fb2:	f10d 0209 	add.w	r2, sp, #9
 8011fb6:	eba2 020c 	sub.w	r2, r2, ip
 8011fba:	42bc      	cmp	r4, r7
 8011fbc:	bf88      	it	hi
 8011fbe:	2200      	movhi	r2, #0
 8011fc0:	4413      	add	r3, r2
 8011fc2:	1a18      	subs	r0, r3, r0
 8011fc4:	b003      	add	sp, #12
 8011fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fc8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011fcc:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011fd0:	e7ed      	b.n	8011fae <__exponent+0x4c>
 8011fd2:	2330      	movs	r3, #48	; 0x30
 8011fd4:	3130      	adds	r1, #48	; 0x30
 8011fd6:	7083      	strb	r3, [r0, #2]
 8011fd8:	70c1      	strb	r1, [r0, #3]
 8011fda:	1d03      	adds	r3, r0, #4
 8011fdc:	e7f1      	b.n	8011fc2 <__exponent+0x60>
	...

08011fe0 <_printf_float>:
 8011fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe4:	ed2d 8b02 	vpush	{d8}
 8011fe8:	b08d      	sub	sp, #52	; 0x34
 8011fea:	460c      	mov	r4, r1
 8011fec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011ff0:	4616      	mov	r6, r2
 8011ff2:	461f      	mov	r7, r3
 8011ff4:	4605      	mov	r5, r0
 8011ff6:	f001 f82d 	bl	8013054 <_localeconv_r>
 8011ffa:	f8d0 a000 	ldr.w	sl, [r0]
 8011ffe:	4650      	mov	r0, sl
 8012000:	f7ee f936 	bl	8000270 <strlen>
 8012004:	2300      	movs	r3, #0
 8012006:	930a      	str	r3, [sp, #40]	; 0x28
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	9305      	str	r3, [sp, #20]
 801200c:	f8d8 3000 	ldr.w	r3, [r8]
 8012010:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012014:	3307      	adds	r3, #7
 8012016:	f023 0307 	bic.w	r3, r3, #7
 801201a:	f103 0208 	add.w	r2, r3, #8
 801201e:	f8c8 2000 	str.w	r2, [r8]
 8012022:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801202a:	9307      	str	r3, [sp, #28]
 801202c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012030:	ee08 0a10 	vmov	s16, r0
 8012034:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801203c:	4b9e      	ldr	r3, [pc, #632]	; (80122b8 <_printf_float+0x2d8>)
 801203e:	f04f 32ff 	mov.w	r2, #4294967295
 8012042:	f7ee fd73 	bl	8000b2c <__aeabi_dcmpun>
 8012046:	bb88      	cbnz	r0, 80120ac <_printf_float+0xcc>
 8012048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801204c:	4b9a      	ldr	r3, [pc, #616]	; (80122b8 <_printf_float+0x2d8>)
 801204e:	f04f 32ff 	mov.w	r2, #4294967295
 8012052:	f7ee fd4d 	bl	8000af0 <__aeabi_dcmple>
 8012056:	bb48      	cbnz	r0, 80120ac <_printf_float+0xcc>
 8012058:	2200      	movs	r2, #0
 801205a:	2300      	movs	r3, #0
 801205c:	4640      	mov	r0, r8
 801205e:	4649      	mov	r1, r9
 8012060:	f7ee fd3c 	bl	8000adc <__aeabi_dcmplt>
 8012064:	b110      	cbz	r0, 801206c <_printf_float+0x8c>
 8012066:	232d      	movs	r3, #45	; 0x2d
 8012068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801206c:	4a93      	ldr	r2, [pc, #588]	; (80122bc <_printf_float+0x2dc>)
 801206e:	4b94      	ldr	r3, [pc, #592]	; (80122c0 <_printf_float+0x2e0>)
 8012070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012074:	bf94      	ite	ls
 8012076:	4690      	movls	r8, r2
 8012078:	4698      	movhi	r8, r3
 801207a:	2303      	movs	r3, #3
 801207c:	6123      	str	r3, [r4, #16]
 801207e:	9b05      	ldr	r3, [sp, #20]
 8012080:	f023 0304 	bic.w	r3, r3, #4
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	f04f 0900 	mov.w	r9, #0
 801208a:	9700      	str	r7, [sp, #0]
 801208c:	4633      	mov	r3, r6
 801208e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012090:	4621      	mov	r1, r4
 8012092:	4628      	mov	r0, r5
 8012094:	f000 f9da 	bl	801244c <_printf_common>
 8012098:	3001      	adds	r0, #1
 801209a:	f040 8090 	bne.w	80121be <_printf_float+0x1de>
 801209e:	f04f 30ff 	mov.w	r0, #4294967295
 80120a2:	b00d      	add	sp, #52	; 0x34
 80120a4:	ecbd 8b02 	vpop	{d8}
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ac:	4642      	mov	r2, r8
 80120ae:	464b      	mov	r3, r9
 80120b0:	4640      	mov	r0, r8
 80120b2:	4649      	mov	r1, r9
 80120b4:	f7ee fd3a 	bl	8000b2c <__aeabi_dcmpun>
 80120b8:	b140      	cbz	r0, 80120cc <_printf_float+0xec>
 80120ba:	464b      	mov	r3, r9
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bfbc      	itt	lt
 80120c0:	232d      	movlt	r3, #45	; 0x2d
 80120c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80120c6:	4a7f      	ldr	r2, [pc, #508]	; (80122c4 <_printf_float+0x2e4>)
 80120c8:	4b7f      	ldr	r3, [pc, #508]	; (80122c8 <_printf_float+0x2e8>)
 80120ca:	e7d1      	b.n	8012070 <_printf_float+0x90>
 80120cc:	6863      	ldr	r3, [r4, #4]
 80120ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80120d2:	9206      	str	r2, [sp, #24]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	d13f      	bne.n	8012158 <_printf_float+0x178>
 80120d8:	2306      	movs	r3, #6
 80120da:	6063      	str	r3, [r4, #4]
 80120dc:	9b05      	ldr	r3, [sp, #20]
 80120de:	6861      	ldr	r1, [r4, #4]
 80120e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80120e4:	2300      	movs	r3, #0
 80120e6:	9303      	str	r3, [sp, #12]
 80120e8:	ab0a      	add	r3, sp, #40	; 0x28
 80120ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80120ee:	ab09      	add	r3, sp, #36	; 0x24
 80120f0:	ec49 8b10 	vmov	d0, r8, r9
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	6022      	str	r2, [r4, #0]
 80120f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80120fc:	4628      	mov	r0, r5
 80120fe:	f7ff fece 	bl	8011e9e <__cvt>
 8012102:	9b06      	ldr	r3, [sp, #24]
 8012104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012106:	2b47      	cmp	r3, #71	; 0x47
 8012108:	4680      	mov	r8, r0
 801210a:	d108      	bne.n	801211e <_printf_float+0x13e>
 801210c:	1cc8      	adds	r0, r1, #3
 801210e:	db02      	blt.n	8012116 <_printf_float+0x136>
 8012110:	6863      	ldr	r3, [r4, #4]
 8012112:	4299      	cmp	r1, r3
 8012114:	dd41      	ble.n	801219a <_printf_float+0x1ba>
 8012116:	f1ab 0302 	sub.w	r3, fp, #2
 801211a:	fa5f fb83 	uxtb.w	fp, r3
 801211e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012122:	d820      	bhi.n	8012166 <_printf_float+0x186>
 8012124:	3901      	subs	r1, #1
 8012126:	465a      	mov	r2, fp
 8012128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801212c:	9109      	str	r1, [sp, #36]	; 0x24
 801212e:	f7ff ff18 	bl	8011f62 <__exponent>
 8012132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012134:	1813      	adds	r3, r2, r0
 8012136:	2a01      	cmp	r2, #1
 8012138:	4681      	mov	r9, r0
 801213a:	6123      	str	r3, [r4, #16]
 801213c:	dc02      	bgt.n	8012144 <_printf_float+0x164>
 801213e:	6822      	ldr	r2, [r4, #0]
 8012140:	07d2      	lsls	r2, r2, #31
 8012142:	d501      	bpl.n	8012148 <_printf_float+0x168>
 8012144:	3301      	adds	r3, #1
 8012146:	6123      	str	r3, [r4, #16]
 8012148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801214c:	2b00      	cmp	r3, #0
 801214e:	d09c      	beq.n	801208a <_printf_float+0xaa>
 8012150:	232d      	movs	r3, #45	; 0x2d
 8012152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012156:	e798      	b.n	801208a <_printf_float+0xaa>
 8012158:	9a06      	ldr	r2, [sp, #24]
 801215a:	2a47      	cmp	r2, #71	; 0x47
 801215c:	d1be      	bne.n	80120dc <_printf_float+0xfc>
 801215e:	2b00      	cmp	r3, #0
 8012160:	d1bc      	bne.n	80120dc <_printf_float+0xfc>
 8012162:	2301      	movs	r3, #1
 8012164:	e7b9      	b.n	80120da <_printf_float+0xfa>
 8012166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801216a:	d118      	bne.n	801219e <_printf_float+0x1be>
 801216c:	2900      	cmp	r1, #0
 801216e:	6863      	ldr	r3, [r4, #4]
 8012170:	dd0b      	ble.n	801218a <_printf_float+0x1aa>
 8012172:	6121      	str	r1, [r4, #16]
 8012174:	b913      	cbnz	r3, 801217c <_printf_float+0x19c>
 8012176:	6822      	ldr	r2, [r4, #0]
 8012178:	07d0      	lsls	r0, r2, #31
 801217a:	d502      	bpl.n	8012182 <_printf_float+0x1a2>
 801217c:	3301      	adds	r3, #1
 801217e:	440b      	add	r3, r1
 8012180:	6123      	str	r3, [r4, #16]
 8012182:	65a1      	str	r1, [r4, #88]	; 0x58
 8012184:	f04f 0900 	mov.w	r9, #0
 8012188:	e7de      	b.n	8012148 <_printf_float+0x168>
 801218a:	b913      	cbnz	r3, 8012192 <_printf_float+0x1b2>
 801218c:	6822      	ldr	r2, [r4, #0]
 801218e:	07d2      	lsls	r2, r2, #31
 8012190:	d501      	bpl.n	8012196 <_printf_float+0x1b6>
 8012192:	3302      	adds	r3, #2
 8012194:	e7f4      	b.n	8012180 <_printf_float+0x1a0>
 8012196:	2301      	movs	r3, #1
 8012198:	e7f2      	b.n	8012180 <_printf_float+0x1a0>
 801219a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801219e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121a0:	4299      	cmp	r1, r3
 80121a2:	db05      	blt.n	80121b0 <_printf_float+0x1d0>
 80121a4:	6823      	ldr	r3, [r4, #0]
 80121a6:	6121      	str	r1, [r4, #16]
 80121a8:	07d8      	lsls	r0, r3, #31
 80121aa:	d5ea      	bpl.n	8012182 <_printf_float+0x1a2>
 80121ac:	1c4b      	adds	r3, r1, #1
 80121ae:	e7e7      	b.n	8012180 <_printf_float+0x1a0>
 80121b0:	2900      	cmp	r1, #0
 80121b2:	bfd4      	ite	le
 80121b4:	f1c1 0202 	rsble	r2, r1, #2
 80121b8:	2201      	movgt	r2, #1
 80121ba:	4413      	add	r3, r2
 80121bc:	e7e0      	b.n	8012180 <_printf_float+0x1a0>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	055a      	lsls	r2, r3, #21
 80121c2:	d407      	bmi.n	80121d4 <_printf_float+0x1f4>
 80121c4:	6923      	ldr	r3, [r4, #16]
 80121c6:	4642      	mov	r2, r8
 80121c8:	4631      	mov	r1, r6
 80121ca:	4628      	mov	r0, r5
 80121cc:	47b8      	blx	r7
 80121ce:	3001      	adds	r0, #1
 80121d0:	d12c      	bne.n	801222c <_printf_float+0x24c>
 80121d2:	e764      	b.n	801209e <_printf_float+0xbe>
 80121d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121d8:	f240 80e0 	bls.w	801239c <_printf_float+0x3bc>
 80121dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80121e0:	2200      	movs	r2, #0
 80121e2:	2300      	movs	r3, #0
 80121e4:	f7ee fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d034      	beq.n	8012256 <_printf_float+0x276>
 80121ec:	4a37      	ldr	r2, [pc, #220]	; (80122cc <_printf_float+0x2ec>)
 80121ee:	2301      	movs	r3, #1
 80121f0:	4631      	mov	r1, r6
 80121f2:	4628      	mov	r0, r5
 80121f4:	47b8      	blx	r7
 80121f6:	3001      	adds	r0, #1
 80121f8:	f43f af51 	beq.w	801209e <_printf_float+0xbe>
 80121fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012200:	429a      	cmp	r2, r3
 8012202:	db02      	blt.n	801220a <_printf_float+0x22a>
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	07d8      	lsls	r0, r3, #31
 8012208:	d510      	bpl.n	801222c <_printf_float+0x24c>
 801220a:	ee18 3a10 	vmov	r3, s16
 801220e:	4652      	mov	r2, sl
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	f43f af41 	beq.w	801209e <_printf_float+0xbe>
 801221c:	f04f 0800 	mov.w	r8, #0
 8012220:	f104 091a 	add.w	r9, r4, #26
 8012224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012226:	3b01      	subs	r3, #1
 8012228:	4543      	cmp	r3, r8
 801222a:	dc09      	bgt.n	8012240 <_printf_float+0x260>
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	079b      	lsls	r3, r3, #30
 8012230:	f100 8107 	bmi.w	8012442 <_printf_float+0x462>
 8012234:	68e0      	ldr	r0, [r4, #12]
 8012236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012238:	4298      	cmp	r0, r3
 801223a:	bfb8      	it	lt
 801223c:	4618      	movlt	r0, r3
 801223e:	e730      	b.n	80120a2 <_printf_float+0xc2>
 8012240:	2301      	movs	r3, #1
 8012242:	464a      	mov	r2, r9
 8012244:	4631      	mov	r1, r6
 8012246:	4628      	mov	r0, r5
 8012248:	47b8      	blx	r7
 801224a:	3001      	adds	r0, #1
 801224c:	f43f af27 	beq.w	801209e <_printf_float+0xbe>
 8012250:	f108 0801 	add.w	r8, r8, #1
 8012254:	e7e6      	b.n	8012224 <_printf_float+0x244>
 8012256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012258:	2b00      	cmp	r3, #0
 801225a:	dc39      	bgt.n	80122d0 <_printf_float+0x2f0>
 801225c:	4a1b      	ldr	r2, [pc, #108]	; (80122cc <_printf_float+0x2ec>)
 801225e:	2301      	movs	r3, #1
 8012260:	4631      	mov	r1, r6
 8012262:	4628      	mov	r0, r5
 8012264:	47b8      	blx	r7
 8012266:	3001      	adds	r0, #1
 8012268:	f43f af19 	beq.w	801209e <_printf_float+0xbe>
 801226c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012270:	4313      	orrs	r3, r2
 8012272:	d102      	bne.n	801227a <_printf_float+0x29a>
 8012274:	6823      	ldr	r3, [r4, #0]
 8012276:	07d9      	lsls	r1, r3, #31
 8012278:	d5d8      	bpl.n	801222c <_printf_float+0x24c>
 801227a:	ee18 3a10 	vmov	r3, s16
 801227e:	4652      	mov	r2, sl
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	47b8      	blx	r7
 8012286:	3001      	adds	r0, #1
 8012288:	f43f af09 	beq.w	801209e <_printf_float+0xbe>
 801228c:	f04f 0900 	mov.w	r9, #0
 8012290:	f104 0a1a 	add.w	sl, r4, #26
 8012294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012296:	425b      	negs	r3, r3
 8012298:	454b      	cmp	r3, r9
 801229a:	dc01      	bgt.n	80122a0 <_printf_float+0x2c0>
 801229c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229e:	e792      	b.n	80121c6 <_printf_float+0x1e6>
 80122a0:	2301      	movs	r3, #1
 80122a2:	4652      	mov	r2, sl
 80122a4:	4631      	mov	r1, r6
 80122a6:	4628      	mov	r0, r5
 80122a8:	47b8      	blx	r7
 80122aa:	3001      	adds	r0, #1
 80122ac:	f43f aef7 	beq.w	801209e <_printf_float+0xbe>
 80122b0:	f109 0901 	add.w	r9, r9, #1
 80122b4:	e7ee      	b.n	8012294 <_printf_float+0x2b4>
 80122b6:	bf00      	nop
 80122b8:	7fefffff 	.word	0x7fefffff
 80122bc:	08046318 	.word	0x08046318
 80122c0:	0804631c 	.word	0x0804631c
 80122c4:	08046320 	.word	0x08046320
 80122c8:	08046324 	.word	0x08046324
 80122cc:	08046328 	.word	0x08046328
 80122d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122d4:	429a      	cmp	r2, r3
 80122d6:	bfa8      	it	ge
 80122d8:	461a      	movge	r2, r3
 80122da:	2a00      	cmp	r2, #0
 80122dc:	4691      	mov	r9, r2
 80122de:	dc37      	bgt.n	8012350 <_printf_float+0x370>
 80122e0:	f04f 0b00 	mov.w	fp, #0
 80122e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122e8:	f104 021a 	add.w	r2, r4, #26
 80122ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122ee:	9305      	str	r3, [sp, #20]
 80122f0:	eba3 0309 	sub.w	r3, r3, r9
 80122f4:	455b      	cmp	r3, fp
 80122f6:	dc33      	bgt.n	8012360 <_printf_float+0x380>
 80122f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122fc:	429a      	cmp	r2, r3
 80122fe:	db3b      	blt.n	8012378 <_printf_float+0x398>
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	07da      	lsls	r2, r3, #31
 8012304:	d438      	bmi.n	8012378 <_printf_float+0x398>
 8012306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801230a:	eba2 0903 	sub.w	r9, r2, r3
 801230e:	9b05      	ldr	r3, [sp, #20]
 8012310:	1ad2      	subs	r2, r2, r3
 8012312:	4591      	cmp	r9, r2
 8012314:	bfa8      	it	ge
 8012316:	4691      	movge	r9, r2
 8012318:	f1b9 0f00 	cmp.w	r9, #0
 801231c:	dc35      	bgt.n	801238a <_printf_float+0x3aa>
 801231e:	f04f 0800 	mov.w	r8, #0
 8012322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012326:	f104 0a1a 	add.w	sl, r4, #26
 801232a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	eba3 0309 	sub.w	r3, r3, r9
 8012334:	4543      	cmp	r3, r8
 8012336:	f77f af79 	ble.w	801222c <_printf_float+0x24c>
 801233a:	2301      	movs	r3, #1
 801233c:	4652      	mov	r2, sl
 801233e:	4631      	mov	r1, r6
 8012340:	4628      	mov	r0, r5
 8012342:	47b8      	blx	r7
 8012344:	3001      	adds	r0, #1
 8012346:	f43f aeaa 	beq.w	801209e <_printf_float+0xbe>
 801234a:	f108 0801 	add.w	r8, r8, #1
 801234e:	e7ec      	b.n	801232a <_printf_float+0x34a>
 8012350:	4613      	mov	r3, r2
 8012352:	4631      	mov	r1, r6
 8012354:	4642      	mov	r2, r8
 8012356:	4628      	mov	r0, r5
 8012358:	47b8      	blx	r7
 801235a:	3001      	adds	r0, #1
 801235c:	d1c0      	bne.n	80122e0 <_printf_float+0x300>
 801235e:	e69e      	b.n	801209e <_printf_float+0xbe>
 8012360:	2301      	movs	r3, #1
 8012362:	4631      	mov	r1, r6
 8012364:	4628      	mov	r0, r5
 8012366:	9205      	str	r2, [sp, #20]
 8012368:	47b8      	blx	r7
 801236a:	3001      	adds	r0, #1
 801236c:	f43f ae97 	beq.w	801209e <_printf_float+0xbe>
 8012370:	9a05      	ldr	r2, [sp, #20]
 8012372:	f10b 0b01 	add.w	fp, fp, #1
 8012376:	e7b9      	b.n	80122ec <_printf_float+0x30c>
 8012378:	ee18 3a10 	vmov	r3, s16
 801237c:	4652      	mov	r2, sl
 801237e:	4631      	mov	r1, r6
 8012380:	4628      	mov	r0, r5
 8012382:	47b8      	blx	r7
 8012384:	3001      	adds	r0, #1
 8012386:	d1be      	bne.n	8012306 <_printf_float+0x326>
 8012388:	e689      	b.n	801209e <_printf_float+0xbe>
 801238a:	9a05      	ldr	r2, [sp, #20]
 801238c:	464b      	mov	r3, r9
 801238e:	4442      	add	r2, r8
 8012390:	4631      	mov	r1, r6
 8012392:	4628      	mov	r0, r5
 8012394:	47b8      	blx	r7
 8012396:	3001      	adds	r0, #1
 8012398:	d1c1      	bne.n	801231e <_printf_float+0x33e>
 801239a:	e680      	b.n	801209e <_printf_float+0xbe>
 801239c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801239e:	2a01      	cmp	r2, #1
 80123a0:	dc01      	bgt.n	80123a6 <_printf_float+0x3c6>
 80123a2:	07db      	lsls	r3, r3, #31
 80123a4:	d53a      	bpl.n	801241c <_printf_float+0x43c>
 80123a6:	2301      	movs	r3, #1
 80123a8:	4642      	mov	r2, r8
 80123aa:	4631      	mov	r1, r6
 80123ac:	4628      	mov	r0, r5
 80123ae:	47b8      	blx	r7
 80123b0:	3001      	adds	r0, #1
 80123b2:	f43f ae74 	beq.w	801209e <_printf_float+0xbe>
 80123b6:	ee18 3a10 	vmov	r3, s16
 80123ba:	4652      	mov	r2, sl
 80123bc:	4631      	mov	r1, r6
 80123be:	4628      	mov	r0, r5
 80123c0:	47b8      	blx	r7
 80123c2:	3001      	adds	r0, #1
 80123c4:	f43f ae6b 	beq.w	801209e <_printf_float+0xbe>
 80123c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123cc:	2200      	movs	r2, #0
 80123ce:	2300      	movs	r3, #0
 80123d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80123d4:	f7ee fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80123d8:	b9d8      	cbnz	r0, 8012412 <_printf_float+0x432>
 80123da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80123de:	f108 0201 	add.w	r2, r8, #1
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	d10e      	bne.n	801240a <_printf_float+0x42a>
 80123ec:	e657      	b.n	801209e <_printf_float+0xbe>
 80123ee:	2301      	movs	r3, #1
 80123f0:	4652      	mov	r2, sl
 80123f2:	4631      	mov	r1, r6
 80123f4:	4628      	mov	r0, r5
 80123f6:	47b8      	blx	r7
 80123f8:	3001      	adds	r0, #1
 80123fa:	f43f ae50 	beq.w	801209e <_printf_float+0xbe>
 80123fe:	f108 0801 	add.w	r8, r8, #1
 8012402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012404:	3b01      	subs	r3, #1
 8012406:	4543      	cmp	r3, r8
 8012408:	dcf1      	bgt.n	80123ee <_printf_float+0x40e>
 801240a:	464b      	mov	r3, r9
 801240c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012410:	e6da      	b.n	80121c8 <_printf_float+0x1e8>
 8012412:	f04f 0800 	mov.w	r8, #0
 8012416:	f104 0a1a 	add.w	sl, r4, #26
 801241a:	e7f2      	b.n	8012402 <_printf_float+0x422>
 801241c:	2301      	movs	r3, #1
 801241e:	4642      	mov	r2, r8
 8012420:	e7df      	b.n	80123e2 <_printf_float+0x402>
 8012422:	2301      	movs	r3, #1
 8012424:	464a      	mov	r2, r9
 8012426:	4631      	mov	r1, r6
 8012428:	4628      	mov	r0, r5
 801242a:	47b8      	blx	r7
 801242c:	3001      	adds	r0, #1
 801242e:	f43f ae36 	beq.w	801209e <_printf_float+0xbe>
 8012432:	f108 0801 	add.w	r8, r8, #1
 8012436:	68e3      	ldr	r3, [r4, #12]
 8012438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801243a:	1a5b      	subs	r3, r3, r1
 801243c:	4543      	cmp	r3, r8
 801243e:	dcf0      	bgt.n	8012422 <_printf_float+0x442>
 8012440:	e6f8      	b.n	8012234 <_printf_float+0x254>
 8012442:	f04f 0800 	mov.w	r8, #0
 8012446:	f104 0919 	add.w	r9, r4, #25
 801244a:	e7f4      	b.n	8012436 <_printf_float+0x456>

0801244c <_printf_common>:
 801244c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012450:	4616      	mov	r6, r2
 8012452:	4699      	mov	r9, r3
 8012454:	688a      	ldr	r2, [r1, #8]
 8012456:	690b      	ldr	r3, [r1, #16]
 8012458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801245c:	4293      	cmp	r3, r2
 801245e:	bfb8      	it	lt
 8012460:	4613      	movlt	r3, r2
 8012462:	6033      	str	r3, [r6, #0]
 8012464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012468:	4607      	mov	r7, r0
 801246a:	460c      	mov	r4, r1
 801246c:	b10a      	cbz	r2, 8012472 <_printf_common+0x26>
 801246e:	3301      	adds	r3, #1
 8012470:	6033      	str	r3, [r6, #0]
 8012472:	6823      	ldr	r3, [r4, #0]
 8012474:	0699      	lsls	r1, r3, #26
 8012476:	bf42      	ittt	mi
 8012478:	6833      	ldrmi	r3, [r6, #0]
 801247a:	3302      	addmi	r3, #2
 801247c:	6033      	strmi	r3, [r6, #0]
 801247e:	6825      	ldr	r5, [r4, #0]
 8012480:	f015 0506 	ands.w	r5, r5, #6
 8012484:	d106      	bne.n	8012494 <_printf_common+0x48>
 8012486:	f104 0a19 	add.w	sl, r4, #25
 801248a:	68e3      	ldr	r3, [r4, #12]
 801248c:	6832      	ldr	r2, [r6, #0]
 801248e:	1a9b      	subs	r3, r3, r2
 8012490:	42ab      	cmp	r3, r5
 8012492:	dc26      	bgt.n	80124e2 <_printf_common+0x96>
 8012494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012498:	1e13      	subs	r3, r2, #0
 801249a:	6822      	ldr	r2, [r4, #0]
 801249c:	bf18      	it	ne
 801249e:	2301      	movne	r3, #1
 80124a0:	0692      	lsls	r2, r2, #26
 80124a2:	d42b      	bmi.n	80124fc <_printf_common+0xb0>
 80124a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124a8:	4649      	mov	r1, r9
 80124aa:	4638      	mov	r0, r7
 80124ac:	47c0      	blx	r8
 80124ae:	3001      	adds	r0, #1
 80124b0:	d01e      	beq.n	80124f0 <_printf_common+0xa4>
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	6922      	ldr	r2, [r4, #16]
 80124b6:	f003 0306 	and.w	r3, r3, #6
 80124ba:	2b04      	cmp	r3, #4
 80124bc:	bf02      	ittt	eq
 80124be:	68e5      	ldreq	r5, [r4, #12]
 80124c0:	6833      	ldreq	r3, [r6, #0]
 80124c2:	1aed      	subeq	r5, r5, r3
 80124c4:	68a3      	ldr	r3, [r4, #8]
 80124c6:	bf0c      	ite	eq
 80124c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124cc:	2500      	movne	r5, #0
 80124ce:	4293      	cmp	r3, r2
 80124d0:	bfc4      	itt	gt
 80124d2:	1a9b      	subgt	r3, r3, r2
 80124d4:	18ed      	addgt	r5, r5, r3
 80124d6:	2600      	movs	r6, #0
 80124d8:	341a      	adds	r4, #26
 80124da:	42b5      	cmp	r5, r6
 80124dc:	d11a      	bne.n	8012514 <_printf_common+0xc8>
 80124de:	2000      	movs	r0, #0
 80124e0:	e008      	b.n	80124f4 <_printf_common+0xa8>
 80124e2:	2301      	movs	r3, #1
 80124e4:	4652      	mov	r2, sl
 80124e6:	4649      	mov	r1, r9
 80124e8:	4638      	mov	r0, r7
 80124ea:	47c0      	blx	r8
 80124ec:	3001      	adds	r0, #1
 80124ee:	d103      	bne.n	80124f8 <_printf_common+0xac>
 80124f0:	f04f 30ff 	mov.w	r0, #4294967295
 80124f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f8:	3501      	adds	r5, #1
 80124fa:	e7c6      	b.n	801248a <_printf_common+0x3e>
 80124fc:	18e1      	adds	r1, r4, r3
 80124fe:	1c5a      	adds	r2, r3, #1
 8012500:	2030      	movs	r0, #48	; 0x30
 8012502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012506:	4422      	add	r2, r4
 8012508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801250c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012510:	3302      	adds	r3, #2
 8012512:	e7c7      	b.n	80124a4 <_printf_common+0x58>
 8012514:	2301      	movs	r3, #1
 8012516:	4622      	mov	r2, r4
 8012518:	4649      	mov	r1, r9
 801251a:	4638      	mov	r0, r7
 801251c:	47c0      	blx	r8
 801251e:	3001      	adds	r0, #1
 8012520:	d0e6      	beq.n	80124f0 <_printf_common+0xa4>
 8012522:	3601      	adds	r6, #1
 8012524:	e7d9      	b.n	80124da <_printf_common+0x8e>
	...

08012528 <_printf_i>:
 8012528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801252c:	7e0f      	ldrb	r7, [r1, #24]
 801252e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012530:	2f78      	cmp	r7, #120	; 0x78
 8012532:	4691      	mov	r9, r2
 8012534:	4680      	mov	r8, r0
 8012536:	460c      	mov	r4, r1
 8012538:	469a      	mov	sl, r3
 801253a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801253e:	d807      	bhi.n	8012550 <_printf_i+0x28>
 8012540:	2f62      	cmp	r7, #98	; 0x62
 8012542:	d80a      	bhi.n	801255a <_printf_i+0x32>
 8012544:	2f00      	cmp	r7, #0
 8012546:	f000 80d4 	beq.w	80126f2 <_printf_i+0x1ca>
 801254a:	2f58      	cmp	r7, #88	; 0x58
 801254c:	f000 80c0 	beq.w	80126d0 <_printf_i+0x1a8>
 8012550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012558:	e03a      	b.n	80125d0 <_printf_i+0xa8>
 801255a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801255e:	2b15      	cmp	r3, #21
 8012560:	d8f6      	bhi.n	8012550 <_printf_i+0x28>
 8012562:	a101      	add	r1, pc, #4	; (adr r1, 8012568 <_printf_i+0x40>)
 8012564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012568:	080125c1 	.word	0x080125c1
 801256c:	080125d5 	.word	0x080125d5
 8012570:	08012551 	.word	0x08012551
 8012574:	08012551 	.word	0x08012551
 8012578:	08012551 	.word	0x08012551
 801257c:	08012551 	.word	0x08012551
 8012580:	080125d5 	.word	0x080125d5
 8012584:	08012551 	.word	0x08012551
 8012588:	08012551 	.word	0x08012551
 801258c:	08012551 	.word	0x08012551
 8012590:	08012551 	.word	0x08012551
 8012594:	080126d9 	.word	0x080126d9
 8012598:	08012601 	.word	0x08012601
 801259c:	08012693 	.word	0x08012693
 80125a0:	08012551 	.word	0x08012551
 80125a4:	08012551 	.word	0x08012551
 80125a8:	080126fb 	.word	0x080126fb
 80125ac:	08012551 	.word	0x08012551
 80125b0:	08012601 	.word	0x08012601
 80125b4:	08012551 	.word	0x08012551
 80125b8:	08012551 	.word	0x08012551
 80125bc:	0801269b 	.word	0x0801269b
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	1d1a      	adds	r2, r3, #4
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	602a      	str	r2, [r5, #0]
 80125c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125d0:	2301      	movs	r3, #1
 80125d2:	e09f      	b.n	8012714 <_printf_i+0x1ec>
 80125d4:	6820      	ldr	r0, [r4, #0]
 80125d6:	682b      	ldr	r3, [r5, #0]
 80125d8:	0607      	lsls	r7, r0, #24
 80125da:	f103 0104 	add.w	r1, r3, #4
 80125de:	6029      	str	r1, [r5, #0]
 80125e0:	d501      	bpl.n	80125e6 <_printf_i+0xbe>
 80125e2:	681e      	ldr	r6, [r3, #0]
 80125e4:	e003      	b.n	80125ee <_printf_i+0xc6>
 80125e6:	0646      	lsls	r6, r0, #25
 80125e8:	d5fb      	bpl.n	80125e2 <_printf_i+0xba>
 80125ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80125ee:	2e00      	cmp	r6, #0
 80125f0:	da03      	bge.n	80125fa <_printf_i+0xd2>
 80125f2:	232d      	movs	r3, #45	; 0x2d
 80125f4:	4276      	negs	r6, r6
 80125f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125fa:	485a      	ldr	r0, [pc, #360]	; (8012764 <_printf_i+0x23c>)
 80125fc:	230a      	movs	r3, #10
 80125fe:	e012      	b.n	8012626 <_printf_i+0xfe>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	6820      	ldr	r0, [r4, #0]
 8012604:	1d19      	adds	r1, r3, #4
 8012606:	6029      	str	r1, [r5, #0]
 8012608:	0605      	lsls	r5, r0, #24
 801260a:	d501      	bpl.n	8012610 <_printf_i+0xe8>
 801260c:	681e      	ldr	r6, [r3, #0]
 801260e:	e002      	b.n	8012616 <_printf_i+0xee>
 8012610:	0641      	lsls	r1, r0, #25
 8012612:	d5fb      	bpl.n	801260c <_printf_i+0xe4>
 8012614:	881e      	ldrh	r6, [r3, #0]
 8012616:	4853      	ldr	r0, [pc, #332]	; (8012764 <_printf_i+0x23c>)
 8012618:	2f6f      	cmp	r7, #111	; 0x6f
 801261a:	bf0c      	ite	eq
 801261c:	2308      	moveq	r3, #8
 801261e:	230a      	movne	r3, #10
 8012620:	2100      	movs	r1, #0
 8012622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012626:	6865      	ldr	r5, [r4, #4]
 8012628:	60a5      	str	r5, [r4, #8]
 801262a:	2d00      	cmp	r5, #0
 801262c:	bfa2      	ittt	ge
 801262e:	6821      	ldrge	r1, [r4, #0]
 8012630:	f021 0104 	bicge.w	r1, r1, #4
 8012634:	6021      	strge	r1, [r4, #0]
 8012636:	b90e      	cbnz	r6, 801263c <_printf_i+0x114>
 8012638:	2d00      	cmp	r5, #0
 801263a:	d04b      	beq.n	80126d4 <_printf_i+0x1ac>
 801263c:	4615      	mov	r5, r2
 801263e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012642:	fb03 6711 	mls	r7, r3, r1, r6
 8012646:	5dc7      	ldrb	r7, [r0, r7]
 8012648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801264c:	4637      	mov	r7, r6
 801264e:	42bb      	cmp	r3, r7
 8012650:	460e      	mov	r6, r1
 8012652:	d9f4      	bls.n	801263e <_printf_i+0x116>
 8012654:	2b08      	cmp	r3, #8
 8012656:	d10b      	bne.n	8012670 <_printf_i+0x148>
 8012658:	6823      	ldr	r3, [r4, #0]
 801265a:	07de      	lsls	r6, r3, #31
 801265c:	d508      	bpl.n	8012670 <_printf_i+0x148>
 801265e:	6923      	ldr	r3, [r4, #16]
 8012660:	6861      	ldr	r1, [r4, #4]
 8012662:	4299      	cmp	r1, r3
 8012664:	bfde      	ittt	le
 8012666:	2330      	movle	r3, #48	; 0x30
 8012668:	f805 3c01 	strble.w	r3, [r5, #-1]
 801266c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012670:	1b52      	subs	r2, r2, r5
 8012672:	6122      	str	r2, [r4, #16]
 8012674:	f8cd a000 	str.w	sl, [sp]
 8012678:	464b      	mov	r3, r9
 801267a:	aa03      	add	r2, sp, #12
 801267c:	4621      	mov	r1, r4
 801267e:	4640      	mov	r0, r8
 8012680:	f7ff fee4 	bl	801244c <_printf_common>
 8012684:	3001      	adds	r0, #1
 8012686:	d14a      	bne.n	801271e <_printf_i+0x1f6>
 8012688:	f04f 30ff 	mov.w	r0, #4294967295
 801268c:	b004      	add	sp, #16
 801268e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	f043 0320 	orr.w	r3, r3, #32
 8012698:	6023      	str	r3, [r4, #0]
 801269a:	4833      	ldr	r0, [pc, #204]	; (8012768 <_printf_i+0x240>)
 801269c:	2778      	movs	r7, #120	; 0x78
 801269e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126a2:	6823      	ldr	r3, [r4, #0]
 80126a4:	6829      	ldr	r1, [r5, #0]
 80126a6:	061f      	lsls	r7, r3, #24
 80126a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80126ac:	d402      	bmi.n	80126b4 <_printf_i+0x18c>
 80126ae:	065f      	lsls	r7, r3, #25
 80126b0:	bf48      	it	mi
 80126b2:	b2b6      	uxthmi	r6, r6
 80126b4:	07df      	lsls	r7, r3, #31
 80126b6:	bf48      	it	mi
 80126b8:	f043 0320 	orrmi.w	r3, r3, #32
 80126bc:	6029      	str	r1, [r5, #0]
 80126be:	bf48      	it	mi
 80126c0:	6023      	strmi	r3, [r4, #0]
 80126c2:	b91e      	cbnz	r6, 80126cc <_printf_i+0x1a4>
 80126c4:	6823      	ldr	r3, [r4, #0]
 80126c6:	f023 0320 	bic.w	r3, r3, #32
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	2310      	movs	r3, #16
 80126ce:	e7a7      	b.n	8012620 <_printf_i+0xf8>
 80126d0:	4824      	ldr	r0, [pc, #144]	; (8012764 <_printf_i+0x23c>)
 80126d2:	e7e4      	b.n	801269e <_printf_i+0x176>
 80126d4:	4615      	mov	r5, r2
 80126d6:	e7bd      	b.n	8012654 <_printf_i+0x12c>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	6826      	ldr	r6, [r4, #0]
 80126dc:	6961      	ldr	r1, [r4, #20]
 80126de:	1d18      	adds	r0, r3, #4
 80126e0:	6028      	str	r0, [r5, #0]
 80126e2:	0635      	lsls	r5, r6, #24
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	d501      	bpl.n	80126ec <_printf_i+0x1c4>
 80126e8:	6019      	str	r1, [r3, #0]
 80126ea:	e002      	b.n	80126f2 <_printf_i+0x1ca>
 80126ec:	0670      	lsls	r0, r6, #25
 80126ee:	d5fb      	bpl.n	80126e8 <_printf_i+0x1c0>
 80126f0:	8019      	strh	r1, [r3, #0]
 80126f2:	2300      	movs	r3, #0
 80126f4:	6123      	str	r3, [r4, #16]
 80126f6:	4615      	mov	r5, r2
 80126f8:	e7bc      	b.n	8012674 <_printf_i+0x14c>
 80126fa:	682b      	ldr	r3, [r5, #0]
 80126fc:	1d1a      	adds	r2, r3, #4
 80126fe:	602a      	str	r2, [r5, #0]
 8012700:	681d      	ldr	r5, [r3, #0]
 8012702:	6862      	ldr	r2, [r4, #4]
 8012704:	2100      	movs	r1, #0
 8012706:	4628      	mov	r0, r5
 8012708:	f7ed fd62 	bl	80001d0 <memchr>
 801270c:	b108      	cbz	r0, 8012712 <_printf_i+0x1ea>
 801270e:	1b40      	subs	r0, r0, r5
 8012710:	6060      	str	r0, [r4, #4]
 8012712:	6863      	ldr	r3, [r4, #4]
 8012714:	6123      	str	r3, [r4, #16]
 8012716:	2300      	movs	r3, #0
 8012718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801271c:	e7aa      	b.n	8012674 <_printf_i+0x14c>
 801271e:	6923      	ldr	r3, [r4, #16]
 8012720:	462a      	mov	r2, r5
 8012722:	4649      	mov	r1, r9
 8012724:	4640      	mov	r0, r8
 8012726:	47d0      	blx	sl
 8012728:	3001      	adds	r0, #1
 801272a:	d0ad      	beq.n	8012688 <_printf_i+0x160>
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	079b      	lsls	r3, r3, #30
 8012730:	d413      	bmi.n	801275a <_printf_i+0x232>
 8012732:	68e0      	ldr	r0, [r4, #12]
 8012734:	9b03      	ldr	r3, [sp, #12]
 8012736:	4298      	cmp	r0, r3
 8012738:	bfb8      	it	lt
 801273a:	4618      	movlt	r0, r3
 801273c:	e7a6      	b.n	801268c <_printf_i+0x164>
 801273e:	2301      	movs	r3, #1
 8012740:	4632      	mov	r2, r6
 8012742:	4649      	mov	r1, r9
 8012744:	4640      	mov	r0, r8
 8012746:	47d0      	blx	sl
 8012748:	3001      	adds	r0, #1
 801274a:	d09d      	beq.n	8012688 <_printf_i+0x160>
 801274c:	3501      	adds	r5, #1
 801274e:	68e3      	ldr	r3, [r4, #12]
 8012750:	9903      	ldr	r1, [sp, #12]
 8012752:	1a5b      	subs	r3, r3, r1
 8012754:	42ab      	cmp	r3, r5
 8012756:	dcf2      	bgt.n	801273e <_printf_i+0x216>
 8012758:	e7eb      	b.n	8012732 <_printf_i+0x20a>
 801275a:	2500      	movs	r5, #0
 801275c:	f104 0619 	add.w	r6, r4, #25
 8012760:	e7f5      	b.n	801274e <_printf_i+0x226>
 8012762:	bf00      	nop
 8012764:	0804632a 	.word	0x0804632a
 8012768:	0804633b 	.word	0x0804633b

0801276c <_scanf_float>:
 801276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012770:	b087      	sub	sp, #28
 8012772:	4617      	mov	r7, r2
 8012774:	9303      	str	r3, [sp, #12]
 8012776:	688b      	ldr	r3, [r1, #8]
 8012778:	1e5a      	subs	r2, r3, #1
 801277a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801277e:	bf83      	ittte	hi
 8012780:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012784:	195b      	addhi	r3, r3, r5
 8012786:	9302      	strhi	r3, [sp, #8]
 8012788:	2300      	movls	r3, #0
 801278a:	bf86      	itte	hi
 801278c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012790:	608b      	strhi	r3, [r1, #8]
 8012792:	9302      	strls	r3, [sp, #8]
 8012794:	680b      	ldr	r3, [r1, #0]
 8012796:	468b      	mov	fp, r1
 8012798:	2500      	movs	r5, #0
 801279a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801279e:	f84b 3b1c 	str.w	r3, [fp], #28
 80127a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80127a6:	4680      	mov	r8, r0
 80127a8:	460c      	mov	r4, r1
 80127aa:	465e      	mov	r6, fp
 80127ac:	46aa      	mov	sl, r5
 80127ae:	46a9      	mov	r9, r5
 80127b0:	9501      	str	r5, [sp, #4]
 80127b2:	68a2      	ldr	r2, [r4, #8]
 80127b4:	b152      	cbz	r2, 80127cc <_scanf_float+0x60>
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	2b4e      	cmp	r3, #78	; 0x4e
 80127bc:	d864      	bhi.n	8012888 <_scanf_float+0x11c>
 80127be:	2b40      	cmp	r3, #64	; 0x40
 80127c0:	d83c      	bhi.n	801283c <_scanf_float+0xd0>
 80127c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80127c6:	b2c8      	uxtb	r0, r1
 80127c8:	280e      	cmp	r0, #14
 80127ca:	d93a      	bls.n	8012842 <_scanf_float+0xd6>
 80127cc:	f1b9 0f00 	cmp.w	r9, #0
 80127d0:	d003      	beq.n	80127da <_scanf_float+0x6e>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127de:	f1ba 0f01 	cmp.w	sl, #1
 80127e2:	f200 8113 	bhi.w	8012a0c <_scanf_float+0x2a0>
 80127e6:	455e      	cmp	r6, fp
 80127e8:	f200 8105 	bhi.w	80129f6 <_scanf_float+0x28a>
 80127ec:	2501      	movs	r5, #1
 80127ee:	4628      	mov	r0, r5
 80127f0:	b007      	add	sp, #28
 80127f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80127fa:	2a0d      	cmp	r2, #13
 80127fc:	d8e6      	bhi.n	80127cc <_scanf_float+0x60>
 80127fe:	a101      	add	r1, pc, #4	; (adr r1, 8012804 <_scanf_float+0x98>)
 8012800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012804:	08012943 	.word	0x08012943
 8012808:	080127cd 	.word	0x080127cd
 801280c:	080127cd 	.word	0x080127cd
 8012810:	080127cd 	.word	0x080127cd
 8012814:	080129a3 	.word	0x080129a3
 8012818:	0801297b 	.word	0x0801297b
 801281c:	080127cd 	.word	0x080127cd
 8012820:	080127cd 	.word	0x080127cd
 8012824:	08012951 	.word	0x08012951
 8012828:	080127cd 	.word	0x080127cd
 801282c:	080127cd 	.word	0x080127cd
 8012830:	080127cd 	.word	0x080127cd
 8012834:	080127cd 	.word	0x080127cd
 8012838:	08012909 	.word	0x08012909
 801283c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012840:	e7db      	b.n	80127fa <_scanf_float+0x8e>
 8012842:	290e      	cmp	r1, #14
 8012844:	d8c2      	bhi.n	80127cc <_scanf_float+0x60>
 8012846:	a001      	add	r0, pc, #4	; (adr r0, 801284c <_scanf_float+0xe0>)
 8012848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801284c:	080128fb 	.word	0x080128fb
 8012850:	080127cd 	.word	0x080127cd
 8012854:	080128fb 	.word	0x080128fb
 8012858:	0801298f 	.word	0x0801298f
 801285c:	080127cd 	.word	0x080127cd
 8012860:	080128a9 	.word	0x080128a9
 8012864:	080128e5 	.word	0x080128e5
 8012868:	080128e5 	.word	0x080128e5
 801286c:	080128e5 	.word	0x080128e5
 8012870:	080128e5 	.word	0x080128e5
 8012874:	080128e5 	.word	0x080128e5
 8012878:	080128e5 	.word	0x080128e5
 801287c:	080128e5 	.word	0x080128e5
 8012880:	080128e5 	.word	0x080128e5
 8012884:	080128e5 	.word	0x080128e5
 8012888:	2b6e      	cmp	r3, #110	; 0x6e
 801288a:	d809      	bhi.n	80128a0 <_scanf_float+0x134>
 801288c:	2b60      	cmp	r3, #96	; 0x60
 801288e:	d8b2      	bhi.n	80127f6 <_scanf_float+0x8a>
 8012890:	2b54      	cmp	r3, #84	; 0x54
 8012892:	d077      	beq.n	8012984 <_scanf_float+0x218>
 8012894:	2b59      	cmp	r3, #89	; 0x59
 8012896:	d199      	bne.n	80127cc <_scanf_float+0x60>
 8012898:	2d07      	cmp	r5, #7
 801289a:	d197      	bne.n	80127cc <_scanf_float+0x60>
 801289c:	2508      	movs	r5, #8
 801289e:	e029      	b.n	80128f4 <_scanf_float+0x188>
 80128a0:	2b74      	cmp	r3, #116	; 0x74
 80128a2:	d06f      	beq.n	8012984 <_scanf_float+0x218>
 80128a4:	2b79      	cmp	r3, #121	; 0x79
 80128a6:	e7f6      	b.n	8012896 <_scanf_float+0x12a>
 80128a8:	6821      	ldr	r1, [r4, #0]
 80128aa:	05c8      	lsls	r0, r1, #23
 80128ac:	d51a      	bpl.n	80128e4 <_scanf_float+0x178>
 80128ae:	9b02      	ldr	r3, [sp, #8]
 80128b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80128b4:	6021      	str	r1, [r4, #0]
 80128b6:	f109 0901 	add.w	r9, r9, #1
 80128ba:	b11b      	cbz	r3, 80128c4 <_scanf_float+0x158>
 80128bc:	3b01      	subs	r3, #1
 80128be:	3201      	adds	r2, #1
 80128c0:	9302      	str	r3, [sp, #8]
 80128c2:	60a2      	str	r2, [r4, #8]
 80128c4:	68a3      	ldr	r3, [r4, #8]
 80128c6:	3b01      	subs	r3, #1
 80128c8:	60a3      	str	r3, [r4, #8]
 80128ca:	6923      	ldr	r3, [r4, #16]
 80128cc:	3301      	adds	r3, #1
 80128ce:	6123      	str	r3, [r4, #16]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3b01      	subs	r3, #1
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	607b      	str	r3, [r7, #4]
 80128d8:	f340 8084 	ble.w	80129e4 <_scanf_float+0x278>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	3301      	adds	r3, #1
 80128e0:	603b      	str	r3, [r7, #0]
 80128e2:	e766      	b.n	80127b2 <_scanf_float+0x46>
 80128e4:	eb1a 0f05 	cmn.w	sl, r5
 80128e8:	f47f af70 	bne.w	80127cc <_scanf_float+0x60>
 80128ec:	6822      	ldr	r2, [r4, #0]
 80128ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80128f2:	6022      	str	r2, [r4, #0]
 80128f4:	f806 3b01 	strb.w	r3, [r6], #1
 80128f8:	e7e4      	b.n	80128c4 <_scanf_float+0x158>
 80128fa:	6822      	ldr	r2, [r4, #0]
 80128fc:	0610      	lsls	r0, r2, #24
 80128fe:	f57f af65 	bpl.w	80127cc <_scanf_float+0x60>
 8012902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012906:	e7f4      	b.n	80128f2 <_scanf_float+0x186>
 8012908:	f1ba 0f00 	cmp.w	sl, #0
 801290c:	d10e      	bne.n	801292c <_scanf_float+0x1c0>
 801290e:	f1b9 0f00 	cmp.w	r9, #0
 8012912:	d10e      	bne.n	8012932 <_scanf_float+0x1c6>
 8012914:	6822      	ldr	r2, [r4, #0]
 8012916:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801291a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801291e:	d108      	bne.n	8012932 <_scanf_float+0x1c6>
 8012920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012924:	6022      	str	r2, [r4, #0]
 8012926:	f04f 0a01 	mov.w	sl, #1
 801292a:	e7e3      	b.n	80128f4 <_scanf_float+0x188>
 801292c:	f1ba 0f02 	cmp.w	sl, #2
 8012930:	d055      	beq.n	80129de <_scanf_float+0x272>
 8012932:	2d01      	cmp	r5, #1
 8012934:	d002      	beq.n	801293c <_scanf_float+0x1d0>
 8012936:	2d04      	cmp	r5, #4
 8012938:	f47f af48 	bne.w	80127cc <_scanf_float+0x60>
 801293c:	3501      	adds	r5, #1
 801293e:	b2ed      	uxtb	r5, r5
 8012940:	e7d8      	b.n	80128f4 <_scanf_float+0x188>
 8012942:	f1ba 0f01 	cmp.w	sl, #1
 8012946:	f47f af41 	bne.w	80127cc <_scanf_float+0x60>
 801294a:	f04f 0a02 	mov.w	sl, #2
 801294e:	e7d1      	b.n	80128f4 <_scanf_float+0x188>
 8012950:	b97d      	cbnz	r5, 8012972 <_scanf_float+0x206>
 8012952:	f1b9 0f00 	cmp.w	r9, #0
 8012956:	f47f af3c 	bne.w	80127d2 <_scanf_float+0x66>
 801295a:	6822      	ldr	r2, [r4, #0]
 801295c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012960:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012964:	f47f af39 	bne.w	80127da <_scanf_float+0x6e>
 8012968:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801296c:	6022      	str	r2, [r4, #0]
 801296e:	2501      	movs	r5, #1
 8012970:	e7c0      	b.n	80128f4 <_scanf_float+0x188>
 8012972:	2d03      	cmp	r5, #3
 8012974:	d0e2      	beq.n	801293c <_scanf_float+0x1d0>
 8012976:	2d05      	cmp	r5, #5
 8012978:	e7de      	b.n	8012938 <_scanf_float+0x1cc>
 801297a:	2d02      	cmp	r5, #2
 801297c:	f47f af26 	bne.w	80127cc <_scanf_float+0x60>
 8012980:	2503      	movs	r5, #3
 8012982:	e7b7      	b.n	80128f4 <_scanf_float+0x188>
 8012984:	2d06      	cmp	r5, #6
 8012986:	f47f af21 	bne.w	80127cc <_scanf_float+0x60>
 801298a:	2507      	movs	r5, #7
 801298c:	e7b2      	b.n	80128f4 <_scanf_float+0x188>
 801298e:	6822      	ldr	r2, [r4, #0]
 8012990:	0591      	lsls	r1, r2, #22
 8012992:	f57f af1b 	bpl.w	80127cc <_scanf_float+0x60>
 8012996:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801299a:	6022      	str	r2, [r4, #0]
 801299c:	f8cd 9004 	str.w	r9, [sp, #4]
 80129a0:	e7a8      	b.n	80128f4 <_scanf_float+0x188>
 80129a2:	6822      	ldr	r2, [r4, #0]
 80129a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80129a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80129ac:	d006      	beq.n	80129bc <_scanf_float+0x250>
 80129ae:	0550      	lsls	r0, r2, #21
 80129b0:	f57f af0c 	bpl.w	80127cc <_scanf_float+0x60>
 80129b4:	f1b9 0f00 	cmp.w	r9, #0
 80129b8:	f43f af0f 	beq.w	80127da <_scanf_float+0x6e>
 80129bc:	0591      	lsls	r1, r2, #22
 80129be:	bf58      	it	pl
 80129c0:	9901      	ldrpl	r1, [sp, #4]
 80129c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129c6:	bf58      	it	pl
 80129c8:	eba9 0101 	subpl.w	r1, r9, r1
 80129cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80129d0:	bf58      	it	pl
 80129d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80129d6:	6022      	str	r2, [r4, #0]
 80129d8:	f04f 0900 	mov.w	r9, #0
 80129dc:	e78a      	b.n	80128f4 <_scanf_float+0x188>
 80129de:	f04f 0a03 	mov.w	sl, #3
 80129e2:	e787      	b.n	80128f4 <_scanf_float+0x188>
 80129e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80129e8:	4639      	mov	r1, r7
 80129ea:	4640      	mov	r0, r8
 80129ec:	4798      	blx	r3
 80129ee:	2800      	cmp	r0, #0
 80129f0:	f43f aedf 	beq.w	80127b2 <_scanf_float+0x46>
 80129f4:	e6ea      	b.n	80127cc <_scanf_float+0x60>
 80129f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80129fe:	463a      	mov	r2, r7
 8012a00:	4640      	mov	r0, r8
 8012a02:	4798      	blx	r3
 8012a04:	6923      	ldr	r3, [r4, #16]
 8012a06:	3b01      	subs	r3, #1
 8012a08:	6123      	str	r3, [r4, #16]
 8012a0a:	e6ec      	b.n	80127e6 <_scanf_float+0x7a>
 8012a0c:	1e6b      	subs	r3, r5, #1
 8012a0e:	2b06      	cmp	r3, #6
 8012a10:	d825      	bhi.n	8012a5e <_scanf_float+0x2f2>
 8012a12:	2d02      	cmp	r5, #2
 8012a14:	d836      	bhi.n	8012a84 <_scanf_float+0x318>
 8012a16:	455e      	cmp	r6, fp
 8012a18:	f67f aee8 	bls.w	80127ec <_scanf_float+0x80>
 8012a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a24:	463a      	mov	r2, r7
 8012a26:	4640      	mov	r0, r8
 8012a28:	4798      	blx	r3
 8012a2a:	6923      	ldr	r3, [r4, #16]
 8012a2c:	3b01      	subs	r3, #1
 8012a2e:	6123      	str	r3, [r4, #16]
 8012a30:	e7f1      	b.n	8012a16 <_scanf_float+0x2aa>
 8012a32:	9802      	ldr	r0, [sp, #8]
 8012a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012a3c:	9002      	str	r0, [sp, #8]
 8012a3e:	463a      	mov	r2, r7
 8012a40:	4640      	mov	r0, r8
 8012a42:	4798      	blx	r3
 8012a44:	6923      	ldr	r3, [r4, #16]
 8012a46:	3b01      	subs	r3, #1
 8012a48:	6123      	str	r3, [r4, #16]
 8012a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a4e:	fa5f fa8a 	uxtb.w	sl, sl
 8012a52:	f1ba 0f02 	cmp.w	sl, #2
 8012a56:	d1ec      	bne.n	8012a32 <_scanf_float+0x2c6>
 8012a58:	3d03      	subs	r5, #3
 8012a5a:	b2ed      	uxtb	r5, r5
 8012a5c:	1b76      	subs	r6, r6, r5
 8012a5e:	6823      	ldr	r3, [r4, #0]
 8012a60:	05da      	lsls	r2, r3, #23
 8012a62:	d52f      	bpl.n	8012ac4 <_scanf_float+0x358>
 8012a64:	055b      	lsls	r3, r3, #21
 8012a66:	d510      	bpl.n	8012a8a <_scanf_float+0x31e>
 8012a68:	455e      	cmp	r6, fp
 8012a6a:	f67f aebf 	bls.w	80127ec <_scanf_float+0x80>
 8012a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a76:	463a      	mov	r2, r7
 8012a78:	4640      	mov	r0, r8
 8012a7a:	4798      	blx	r3
 8012a7c:	6923      	ldr	r3, [r4, #16]
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	6123      	str	r3, [r4, #16]
 8012a82:	e7f1      	b.n	8012a68 <_scanf_float+0x2fc>
 8012a84:	46aa      	mov	sl, r5
 8012a86:	9602      	str	r6, [sp, #8]
 8012a88:	e7df      	b.n	8012a4a <_scanf_float+0x2de>
 8012a8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012a8e:	6923      	ldr	r3, [r4, #16]
 8012a90:	2965      	cmp	r1, #101	; 0x65
 8012a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a96:	f106 35ff 	add.w	r5, r6, #4294967295
 8012a9a:	6123      	str	r3, [r4, #16]
 8012a9c:	d00c      	beq.n	8012ab8 <_scanf_float+0x34c>
 8012a9e:	2945      	cmp	r1, #69	; 0x45
 8012aa0:	d00a      	beq.n	8012ab8 <_scanf_float+0x34c>
 8012aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aa6:	463a      	mov	r2, r7
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	4798      	blx	r3
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012ab2:	3b01      	subs	r3, #1
 8012ab4:	1eb5      	subs	r5, r6, #2
 8012ab6:	6123      	str	r3, [r4, #16]
 8012ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012abc:	463a      	mov	r2, r7
 8012abe:	4640      	mov	r0, r8
 8012ac0:	4798      	blx	r3
 8012ac2:	462e      	mov	r6, r5
 8012ac4:	6825      	ldr	r5, [r4, #0]
 8012ac6:	f015 0510 	ands.w	r5, r5, #16
 8012aca:	d158      	bne.n	8012b7e <_scanf_float+0x412>
 8012acc:	7035      	strb	r5, [r6, #0]
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ad8:	d11c      	bne.n	8012b14 <_scanf_float+0x3a8>
 8012ada:	9b01      	ldr	r3, [sp, #4]
 8012adc:	454b      	cmp	r3, r9
 8012ade:	eba3 0209 	sub.w	r2, r3, r9
 8012ae2:	d124      	bne.n	8012b2e <_scanf_float+0x3c2>
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	4659      	mov	r1, fp
 8012ae8:	4640      	mov	r0, r8
 8012aea:	f002 fcd9 	bl	80154a0 <_strtod_r>
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	6821      	ldr	r1, [r4, #0]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f011 0f02 	tst.w	r1, #2
 8012af8:	ec57 6b10 	vmov	r6, r7, d0
 8012afc:	f103 0204 	add.w	r2, r3, #4
 8012b00:	d020      	beq.n	8012b44 <_scanf_float+0x3d8>
 8012b02:	9903      	ldr	r1, [sp, #12]
 8012b04:	600a      	str	r2, [r1, #0]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	e9c3 6700 	strd	r6, r7, [r3]
 8012b0c:	68e3      	ldr	r3, [r4, #12]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	60e3      	str	r3, [r4, #12]
 8012b12:	e66c      	b.n	80127ee <_scanf_float+0x82>
 8012b14:	9b04      	ldr	r3, [sp, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d0e4      	beq.n	8012ae4 <_scanf_float+0x378>
 8012b1a:	9905      	ldr	r1, [sp, #20]
 8012b1c:	230a      	movs	r3, #10
 8012b1e:	462a      	mov	r2, r5
 8012b20:	3101      	adds	r1, #1
 8012b22:	4640      	mov	r0, r8
 8012b24:	f002 fd44 	bl	80155b0 <_strtol_r>
 8012b28:	9b04      	ldr	r3, [sp, #16]
 8012b2a:	9e05      	ldr	r6, [sp, #20]
 8012b2c:	1ac2      	subs	r2, r0, r3
 8012b2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012b32:	429e      	cmp	r6, r3
 8012b34:	bf28      	it	cs
 8012b36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012b3a:	4912      	ldr	r1, [pc, #72]	; (8012b84 <_scanf_float+0x418>)
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f000 f989 	bl	8012e54 <siprintf>
 8012b42:	e7cf      	b.n	8012ae4 <_scanf_float+0x378>
 8012b44:	f011 0f04 	tst.w	r1, #4
 8012b48:	9903      	ldr	r1, [sp, #12]
 8012b4a:	600a      	str	r2, [r1, #0]
 8012b4c:	d1db      	bne.n	8012b06 <_scanf_float+0x39a>
 8012b4e:	f8d3 8000 	ldr.w	r8, [r3]
 8012b52:	ee10 2a10 	vmov	r2, s0
 8012b56:	ee10 0a10 	vmov	r0, s0
 8012b5a:	463b      	mov	r3, r7
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	f7ed ffe5 	bl	8000b2c <__aeabi_dcmpun>
 8012b62:	b128      	cbz	r0, 8012b70 <_scanf_float+0x404>
 8012b64:	4808      	ldr	r0, [pc, #32]	; (8012b88 <_scanf_float+0x41c>)
 8012b66:	f000 fb0b 	bl	8013180 <nanf>
 8012b6a:	ed88 0a00 	vstr	s0, [r8]
 8012b6e:	e7cd      	b.n	8012b0c <_scanf_float+0x3a0>
 8012b70:	4630      	mov	r0, r6
 8012b72:	4639      	mov	r1, r7
 8012b74:	f7ee f838 	bl	8000be8 <__aeabi_d2f>
 8012b78:	f8c8 0000 	str.w	r0, [r8]
 8012b7c:	e7c6      	b.n	8012b0c <_scanf_float+0x3a0>
 8012b7e:	2500      	movs	r5, #0
 8012b80:	e635      	b.n	80127ee <_scanf_float+0x82>
 8012b82:	bf00      	nop
 8012b84:	0804634c 	.word	0x0804634c
 8012b88:	080466dd 	.word	0x080466dd

08012b8c <std>:
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	b510      	push	{r4, lr}
 8012b90:	4604      	mov	r4, r0
 8012b92:	e9c0 3300 	strd	r3, r3, [r0]
 8012b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b9a:	6083      	str	r3, [r0, #8]
 8012b9c:	8181      	strh	r1, [r0, #12]
 8012b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8012ba0:	81c2      	strh	r2, [r0, #14]
 8012ba2:	6183      	str	r3, [r0, #24]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	2208      	movs	r2, #8
 8012ba8:	305c      	adds	r0, #92	; 0x5c
 8012baa:	f000 fa4b 	bl	8013044 <memset>
 8012bae:	4b0d      	ldr	r3, [pc, #52]	; (8012be4 <std+0x58>)
 8012bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8012bb2:	4b0d      	ldr	r3, [pc, #52]	; (8012be8 <std+0x5c>)
 8012bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bb6:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <std+0x60>)
 8012bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bba:	4b0d      	ldr	r3, [pc, #52]	; (8012bf0 <std+0x64>)
 8012bbc:	6323      	str	r3, [r4, #48]	; 0x30
 8012bbe:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <std+0x68>)
 8012bc0:	6224      	str	r4, [r4, #32]
 8012bc2:	429c      	cmp	r4, r3
 8012bc4:	d006      	beq.n	8012bd4 <std+0x48>
 8012bc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012bca:	4294      	cmp	r4, r2
 8012bcc:	d002      	beq.n	8012bd4 <std+0x48>
 8012bce:	33d0      	adds	r3, #208	; 0xd0
 8012bd0:	429c      	cmp	r4, r3
 8012bd2:	d105      	bne.n	8012be0 <std+0x54>
 8012bd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bdc:	f000 babe 	b.w	801315c <__retarget_lock_init_recursive>
 8012be0:	bd10      	pop	{r4, pc}
 8012be2:	bf00      	nop
 8012be4:	08012e95 	.word	0x08012e95
 8012be8:	08012eb7 	.word	0x08012eb7
 8012bec:	08012eef 	.word	0x08012eef
 8012bf0:	08012f13 	.word	0x08012f13
 8012bf4:	20005bb0 	.word	0x20005bb0

08012bf8 <stdio_exit_handler>:
 8012bf8:	4a02      	ldr	r2, [pc, #8]	; (8012c04 <stdio_exit_handler+0xc>)
 8012bfa:	4903      	ldr	r1, [pc, #12]	; (8012c08 <stdio_exit_handler+0x10>)
 8012bfc:	4803      	ldr	r0, [pc, #12]	; (8012c0c <stdio_exit_handler+0x14>)
 8012bfe:	f000 b869 	b.w	8012cd4 <_fwalk_sglue>
 8012c02:	bf00      	nop
 8012c04:	200009ec 	.word	0x200009ec
 8012c08:	08015bf9 	.word	0x08015bf9
 8012c0c:	200009f8 	.word	0x200009f8

08012c10 <cleanup_stdio>:
 8012c10:	6841      	ldr	r1, [r0, #4]
 8012c12:	4b0c      	ldr	r3, [pc, #48]	; (8012c44 <cleanup_stdio+0x34>)
 8012c14:	4299      	cmp	r1, r3
 8012c16:	b510      	push	{r4, lr}
 8012c18:	4604      	mov	r4, r0
 8012c1a:	d001      	beq.n	8012c20 <cleanup_stdio+0x10>
 8012c1c:	f002 ffec 	bl	8015bf8 <_fflush_r>
 8012c20:	68a1      	ldr	r1, [r4, #8]
 8012c22:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <cleanup_stdio+0x38>)
 8012c24:	4299      	cmp	r1, r3
 8012c26:	d002      	beq.n	8012c2e <cleanup_stdio+0x1e>
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f002 ffe5 	bl	8015bf8 <_fflush_r>
 8012c2e:	68e1      	ldr	r1, [r4, #12]
 8012c30:	4b06      	ldr	r3, [pc, #24]	; (8012c4c <cleanup_stdio+0x3c>)
 8012c32:	4299      	cmp	r1, r3
 8012c34:	d004      	beq.n	8012c40 <cleanup_stdio+0x30>
 8012c36:	4620      	mov	r0, r4
 8012c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c3c:	f002 bfdc 	b.w	8015bf8 <_fflush_r>
 8012c40:	bd10      	pop	{r4, pc}
 8012c42:	bf00      	nop
 8012c44:	20005bb0 	.word	0x20005bb0
 8012c48:	20005c18 	.word	0x20005c18
 8012c4c:	20005c80 	.word	0x20005c80

08012c50 <global_stdio_init.part.0>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <global_stdio_init.part.0+0x30>)
 8012c54:	4c0b      	ldr	r4, [pc, #44]	; (8012c84 <global_stdio_init.part.0+0x34>)
 8012c56:	4a0c      	ldr	r2, [pc, #48]	; (8012c88 <global_stdio_init.part.0+0x38>)
 8012c58:	601a      	str	r2, [r3, #0]
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	2104      	movs	r1, #4
 8012c60:	f7ff ff94 	bl	8012b8c <std>
 8012c64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012c68:	2201      	movs	r2, #1
 8012c6a:	2109      	movs	r1, #9
 8012c6c:	f7ff ff8e 	bl	8012b8c <std>
 8012c70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012c74:	2202      	movs	r2, #2
 8012c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c7a:	2112      	movs	r1, #18
 8012c7c:	f7ff bf86 	b.w	8012b8c <std>
 8012c80:	20005ce8 	.word	0x20005ce8
 8012c84:	20005bb0 	.word	0x20005bb0
 8012c88:	08012bf9 	.word	0x08012bf9

08012c8c <__sfp_lock_acquire>:
 8012c8c:	4801      	ldr	r0, [pc, #4]	; (8012c94 <__sfp_lock_acquire+0x8>)
 8012c8e:	f000 ba66 	b.w	801315e <__retarget_lock_acquire_recursive>
 8012c92:	bf00      	nop
 8012c94:	20005cf1 	.word	0x20005cf1

08012c98 <__sfp_lock_release>:
 8012c98:	4801      	ldr	r0, [pc, #4]	; (8012ca0 <__sfp_lock_release+0x8>)
 8012c9a:	f000 ba61 	b.w	8013160 <__retarget_lock_release_recursive>
 8012c9e:	bf00      	nop
 8012ca0:	20005cf1 	.word	0x20005cf1

08012ca4 <__sinit>:
 8012ca4:	b510      	push	{r4, lr}
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	f7ff fff0 	bl	8012c8c <__sfp_lock_acquire>
 8012cac:	6a23      	ldr	r3, [r4, #32]
 8012cae:	b11b      	cbz	r3, 8012cb8 <__sinit+0x14>
 8012cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cb4:	f7ff bff0 	b.w	8012c98 <__sfp_lock_release>
 8012cb8:	4b04      	ldr	r3, [pc, #16]	; (8012ccc <__sinit+0x28>)
 8012cba:	6223      	str	r3, [r4, #32]
 8012cbc:	4b04      	ldr	r3, [pc, #16]	; (8012cd0 <__sinit+0x2c>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d1f5      	bne.n	8012cb0 <__sinit+0xc>
 8012cc4:	f7ff ffc4 	bl	8012c50 <global_stdio_init.part.0>
 8012cc8:	e7f2      	b.n	8012cb0 <__sinit+0xc>
 8012cca:	bf00      	nop
 8012ccc:	08012c11 	.word	0x08012c11
 8012cd0:	20005ce8 	.word	0x20005ce8

08012cd4 <_fwalk_sglue>:
 8012cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cd8:	4607      	mov	r7, r0
 8012cda:	4688      	mov	r8, r1
 8012cdc:	4614      	mov	r4, r2
 8012cde:	2600      	movs	r6, #0
 8012ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ce4:	f1b9 0901 	subs.w	r9, r9, #1
 8012ce8:	d505      	bpl.n	8012cf6 <_fwalk_sglue+0x22>
 8012cea:	6824      	ldr	r4, [r4, #0]
 8012cec:	2c00      	cmp	r4, #0
 8012cee:	d1f7      	bne.n	8012ce0 <_fwalk_sglue+0xc>
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cf6:	89ab      	ldrh	r3, [r5, #12]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d907      	bls.n	8012d0c <_fwalk_sglue+0x38>
 8012cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d00:	3301      	adds	r3, #1
 8012d02:	d003      	beq.n	8012d0c <_fwalk_sglue+0x38>
 8012d04:	4629      	mov	r1, r5
 8012d06:	4638      	mov	r0, r7
 8012d08:	47c0      	blx	r8
 8012d0a:	4306      	orrs	r6, r0
 8012d0c:	3568      	adds	r5, #104	; 0x68
 8012d0e:	e7e9      	b.n	8012ce4 <_fwalk_sglue+0x10>

08012d10 <iprintf>:
 8012d10:	b40f      	push	{r0, r1, r2, r3}
 8012d12:	b507      	push	{r0, r1, r2, lr}
 8012d14:	4906      	ldr	r1, [pc, #24]	; (8012d30 <iprintf+0x20>)
 8012d16:	ab04      	add	r3, sp, #16
 8012d18:	6808      	ldr	r0, [r1, #0]
 8012d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d1e:	6881      	ldr	r1, [r0, #8]
 8012d20:	9301      	str	r3, [sp, #4]
 8012d22:	f002 fdc9 	bl	80158b8 <_vfiprintf_r>
 8012d26:	b003      	add	sp, #12
 8012d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d2c:	b004      	add	sp, #16
 8012d2e:	4770      	bx	lr
 8012d30:	20000a44 	.word	0x20000a44

08012d34 <_puts_r>:
 8012d34:	6a03      	ldr	r3, [r0, #32]
 8012d36:	b570      	push	{r4, r5, r6, lr}
 8012d38:	6884      	ldr	r4, [r0, #8]
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	460e      	mov	r6, r1
 8012d3e:	b90b      	cbnz	r3, 8012d44 <_puts_r+0x10>
 8012d40:	f7ff ffb0 	bl	8012ca4 <__sinit>
 8012d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d46:	07db      	lsls	r3, r3, #31
 8012d48:	d405      	bmi.n	8012d56 <_puts_r+0x22>
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	0598      	lsls	r0, r3, #22
 8012d4e:	d402      	bmi.n	8012d56 <_puts_r+0x22>
 8012d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d52:	f000 fa04 	bl	801315e <__retarget_lock_acquire_recursive>
 8012d56:	89a3      	ldrh	r3, [r4, #12]
 8012d58:	0719      	lsls	r1, r3, #28
 8012d5a:	d513      	bpl.n	8012d84 <_puts_r+0x50>
 8012d5c:	6923      	ldr	r3, [r4, #16]
 8012d5e:	b18b      	cbz	r3, 8012d84 <_puts_r+0x50>
 8012d60:	3e01      	subs	r6, #1
 8012d62:	68a3      	ldr	r3, [r4, #8]
 8012d64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	60a3      	str	r3, [r4, #8]
 8012d6c:	b9e9      	cbnz	r1, 8012daa <_puts_r+0x76>
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	da2e      	bge.n	8012dd0 <_puts_r+0x9c>
 8012d72:	4622      	mov	r2, r4
 8012d74:	210a      	movs	r1, #10
 8012d76:	4628      	mov	r0, r5
 8012d78:	f000 f8cf 	bl	8012f1a <__swbuf_r>
 8012d7c:	3001      	adds	r0, #1
 8012d7e:	d007      	beq.n	8012d90 <_puts_r+0x5c>
 8012d80:	250a      	movs	r5, #10
 8012d82:	e007      	b.n	8012d94 <_puts_r+0x60>
 8012d84:	4621      	mov	r1, r4
 8012d86:	4628      	mov	r0, r5
 8012d88:	f000 f904 	bl	8012f94 <__swsetup_r>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d0e7      	beq.n	8012d60 <_puts_r+0x2c>
 8012d90:	f04f 35ff 	mov.w	r5, #4294967295
 8012d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d96:	07da      	lsls	r2, r3, #31
 8012d98:	d405      	bmi.n	8012da6 <_puts_r+0x72>
 8012d9a:	89a3      	ldrh	r3, [r4, #12]
 8012d9c:	059b      	lsls	r3, r3, #22
 8012d9e:	d402      	bmi.n	8012da6 <_puts_r+0x72>
 8012da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012da2:	f000 f9dd 	bl	8013160 <__retarget_lock_release_recursive>
 8012da6:	4628      	mov	r0, r5
 8012da8:	bd70      	pop	{r4, r5, r6, pc}
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	da04      	bge.n	8012db8 <_puts_r+0x84>
 8012dae:	69a2      	ldr	r2, [r4, #24]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	dc06      	bgt.n	8012dc2 <_puts_r+0x8e>
 8012db4:	290a      	cmp	r1, #10
 8012db6:	d004      	beq.n	8012dc2 <_puts_r+0x8e>
 8012db8:	6823      	ldr	r3, [r4, #0]
 8012dba:	1c5a      	adds	r2, r3, #1
 8012dbc:	6022      	str	r2, [r4, #0]
 8012dbe:	7019      	strb	r1, [r3, #0]
 8012dc0:	e7cf      	b.n	8012d62 <_puts_r+0x2e>
 8012dc2:	4622      	mov	r2, r4
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	f000 f8a8 	bl	8012f1a <__swbuf_r>
 8012dca:	3001      	adds	r0, #1
 8012dcc:	d1c9      	bne.n	8012d62 <_puts_r+0x2e>
 8012dce:	e7df      	b.n	8012d90 <_puts_r+0x5c>
 8012dd0:	6823      	ldr	r3, [r4, #0]
 8012dd2:	250a      	movs	r5, #10
 8012dd4:	1c5a      	adds	r2, r3, #1
 8012dd6:	6022      	str	r2, [r4, #0]
 8012dd8:	701d      	strb	r5, [r3, #0]
 8012dda:	e7db      	b.n	8012d94 <_puts_r+0x60>

08012ddc <puts>:
 8012ddc:	4b02      	ldr	r3, [pc, #8]	; (8012de8 <puts+0xc>)
 8012dde:	4601      	mov	r1, r0
 8012de0:	6818      	ldr	r0, [r3, #0]
 8012de2:	f7ff bfa7 	b.w	8012d34 <_puts_r>
 8012de6:	bf00      	nop
 8012de8:	20000a44 	.word	0x20000a44

08012dec <sniprintf>:
 8012dec:	b40c      	push	{r2, r3}
 8012dee:	b530      	push	{r4, r5, lr}
 8012df0:	4b17      	ldr	r3, [pc, #92]	; (8012e50 <sniprintf+0x64>)
 8012df2:	1e0c      	subs	r4, r1, #0
 8012df4:	681d      	ldr	r5, [r3, #0]
 8012df6:	b09d      	sub	sp, #116	; 0x74
 8012df8:	da08      	bge.n	8012e0c <sniprintf+0x20>
 8012dfa:	238b      	movs	r3, #139	; 0x8b
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8012e02:	b01d      	add	sp, #116	; 0x74
 8012e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e08:	b002      	add	sp, #8
 8012e0a:	4770      	bx	lr
 8012e0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012e14:	bf14      	ite	ne
 8012e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012e1a:	4623      	moveq	r3, r4
 8012e1c:	9304      	str	r3, [sp, #16]
 8012e1e:	9307      	str	r3, [sp, #28]
 8012e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e24:	9002      	str	r0, [sp, #8]
 8012e26:	9006      	str	r0, [sp, #24]
 8012e28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e2e:	ab21      	add	r3, sp, #132	; 0x84
 8012e30:	a902      	add	r1, sp, #8
 8012e32:	4628      	mov	r0, r5
 8012e34:	9301      	str	r3, [sp, #4]
 8012e36:	f002 fc17 	bl	8015668 <_svfiprintf_r>
 8012e3a:	1c43      	adds	r3, r0, #1
 8012e3c:	bfbc      	itt	lt
 8012e3e:	238b      	movlt	r3, #139	; 0x8b
 8012e40:	602b      	strlt	r3, [r5, #0]
 8012e42:	2c00      	cmp	r4, #0
 8012e44:	d0dd      	beq.n	8012e02 <sniprintf+0x16>
 8012e46:	9b02      	ldr	r3, [sp, #8]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	701a      	strb	r2, [r3, #0]
 8012e4c:	e7d9      	b.n	8012e02 <sniprintf+0x16>
 8012e4e:	bf00      	nop
 8012e50:	20000a44 	.word	0x20000a44

08012e54 <siprintf>:
 8012e54:	b40e      	push	{r1, r2, r3}
 8012e56:	b500      	push	{lr}
 8012e58:	b09c      	sub	sp, #112	; 0x70
 8012e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8012e5c:	9002      	str	r0, [sp, #8]
 8012e5e:	9006      	str	r0, [sp, #24]
 8012e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012e64:	4809      	ldr	r0, [pc, #36]	; (8012e8c <siprintf+0x38>)
 8012e66:	9107      	str	r1, [sp, #28]
 8012e68:	9104      	str	r1, [sp, #16]
 8012e6a:	4909      	ldr	r1, [pc, #36]	; (8012e90 <siprintf+0x3c>)
 8012e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e70:	9105      	str	r1, [sp, #20]
 8012e72:	6800      	ldr	r0, [r0, #0]
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	a902      	add	r1, sp, #8
 8012e78:	f002 fbf6 	bl	8015668 <_svfiprintf_r>
 8012e7c:	9b02      	ldr	r3, [sp, #8]
 8012e7e:	2200      	movs	r2, #0
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	b01c      	add	sp, #112	; 0x70
 8012e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e88:	b003      	add	sp, #12
 8012e8a:	4770      	bx	lr
 8012e8c:	20000a44 	.word	0x20000a44
 8012e90:	ffff0208 	.word	0xffff0208

08012e94 <__sread>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	460c      	mov	r4, r1
 8012e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e9c:	f000 f900 	bl	80130a0 <_read_r>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	bfab      	itete	ge
 8012ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ea8:	181b      	addge	r3, r3, r0
 8012eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012eae:	bfac      	ite	ge
 8012eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012eb2:	81a3      	strhlt	r3, [r4, #12]
 8012eb4:	bd10      	pop	{r4, pc}

08012eb6 <__swrite>:
 8012eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eba:	461f      	mov	r7, r3
 8012ebc:	898b      	ldrh	r3, [r1, #12]
 8012ebe:	05db      	lsls	r3, r3, #23
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	4616      	mov	r6, r2
 8012ec6:	d505      	bpl.n	8012ed4 <__swrite+0x1e>
 8012ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ecc:	2302      	movs	r3, #2
 8012ece:	2200      	movs	r2, #0
 8012ed0:	f000 f8d4 	bl	801307c <_lseek_r>
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ede:	81a3      	strh	r3, [r4, #12]
 8012ee0:	4632      	mov	r2, r6
 8012ee2:	463b      	mov	r3, r7
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eea:	f000 b8fb 	b.w	80130e4 <_write_r>

08012eee <__sseek>:
 8012eee:	b510      	push	{r4, lr}
 8012ef0:	460c      	mov	r4, r1
 8012ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ef6:	f000 f8c1 	bl	801307c <_lseek_r>
 8012efa:	1c43      	adds	r3, r0, #1
 8012efc:	89a3      	ldrh	r3, [r4, #12]
 8012efe:	bf15      	itete	ne
 8012f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f0a:	81a3      	strheq	r3, [r4, #12]
 8012f0c:	bf18      	it	ne
 8012f0e:	81a3      	strhne	r3, [r4, #12]
 8012f10:	bd10      	pop	{r4, pc}

08012f12 <__sclose>:
 8012f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f16:	f000 b8a1 	b.w	801305c <_close_r>

08012f1a <__swbuf_r>:
 8012f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f1c:	460e      	mov	r6, r1
 8012f1e:	4614      	mov	r4, r2
 8012f20:	4605      	mov	r5, r0
 8012f22:	b118      	cbz	r0, 8012f2c <__swbuf_r+0x12>
 8012f24:	6a03      	ldr	r3, [r0, #32]
 8012f26:	b90b      	cbnz	r3, 8012f2c <__swbuf_r+0x12>
 8012f28:	f7ff febc 	bl	8012ca4 <__sinit>
 8012f2c:	69a3      	ldr	r3, [r4, #24]
 8012f2e:	60a3      	str	r3, [r4, #8]
 8012f30:	89a3      	ldrh	r3, [r4, #12]
 8012f32:	071a      	lsls	r2, r3, #28
 8012f34:	d525      	bpl.n	8012f82 <__swbuf_r+0x68>
 8012f36:	6923      	ldr	r3, [r4, #16]
 8012f38:	b31b      	cbz	r3, 8012f82 <__swbuf_r+0x68>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	6922      	ldr	r2, [r4, #16]
 8012f3e:	1a98      	subs	r0, r3, r2
 8012f40:	6963      	ldr	r3, [r4, #20]
 8012f42:	b2f6      	uxtb	r6, r6
 8012f44:	4283      	cmp	r3, r0
 8012f46:	4637      	mov	r7, r6
 8012f48:	dc04      	bgt.n	8012f54 <__swbuf_r+0x3a>
 8012f4a:	4621      	mov	r1, r4
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f002 fe53 	bl	8015bf8 <_fflush_r>
 8012f52:	b9e0      	cbnz	r0, 8012f8e <__swbuf_r+0x74>
 8012f54:	68a3      	ldr	r3, [r4, #8]
 8012f56:	3b01      	subs	r3, #1
 8012f58:	60a3      	str	r3, [r4, #8]
 8012f5a:	6823      	ldr	r3, [r4, #0]
 8012f5c:	1c5a      	adds	r2, r3, #1
 8012f5e:	6022      	str	r2, [r4, #0]
 8012f60:	701e      	strb	r6, [r3, #0]
 8012f62:	6962      	ldr	r2, [r4, #20]
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d004      	beq.n	8012f74 <__swbuf_r+0x5a>
 8012f6a:	89a3      	ldrh	r3, [r4, #12]
 8012f6c:	07db      	lsls	r3, r3, #31
 8012f6e:	d506      	bpl.n	8012f7e <__swbuf_r+0x64>
 8012f70:	2e0a      	cmp	r6, #10
 8012f72:	d104      	bne.n	8012f7e <__swbuf_r+0x64>
 8012f74:	4621      	mov	r1, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	f002 fe3e 	bl	8015bf8 <_fflush_r>
 8012f7c:	b938      	cbnz	r0, 8012f8e <__swbuf_r+0x74>
 8012f7e:	4638      	mov	r0, r7
 8012f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f82:	4621      	mov	r1, r4
 8012f84:	4628      	mov	r0, r5
 8012f86:	f000 f805 	bl	8012f94 <__swsetup_r>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	d0d5      	beq.n	8012f3a <__swbuf_r+0x20>
 8012f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8012f92:	e7f4      	b.n	8012f7e <__swbuf_r+0x64>

08012f94 <__swsetup_r>:
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4b2a      	ldr	r3, [pc, #168]	; (8013040 <__swsetup_r+0xac>)
 8012f98:	4605      	mov	r5, r0
 8012f9a:	6818      	ldr	r0, [r3, #0]
 8012f9c:	460c      	mov	r4, r1
 8012f9e:	b118      	cbz	r0, 8012fa8 <__swsetup_r+0x14>
 8012fa0:	6a03      	ldr	r3, [r0, #32]
 8012fa2:	b90b      	cbnz	r3, 8012fa8 <__swsetup_r+0x14>
 8012fa4:	f7ff fe7e 	bl	8012ca4 <__sinit>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fae:	0718      	lsls	r0, r3, #28
 8012fb0:	d422      	bmi.n	8012ff8 <__swsetup_r+0x64>
 8012fb2:	06d9      	lsls	r1, r3, #27
 8012fb4:	d407      	bmi.n	8012fc6 <__swsetup_r+0x32>
 8012fb6:	2309      	movs	r3, #9
 8012fb8:	602b      	str	r3, [r5, #0]
 8012fba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012fbe:	81a3      	strh	r3, [r4, #12]
 8012fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc4:	e034      	b.n	8013030 <__swsetup_r+0x9c>
 8012fc6:	0758      	lsls	r0, r3, #29
 8012fc8:	d512      	bpl.n	8012ff0 <__swsetup_r+0x5c>
 8012fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fcc:	b141      	cbz	r1, 8012fe0 <__swsetup_r+0x4c>
 8012fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fd2:	4299      	cmp	r1, r3
 8012fd4:	d002      	beq.n	8012fdc <__swsetup_r+0x48>
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f000 ff54 	bl	8013e84 <_free_r>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	6363      	str	r3, [r4, #52]	; 0x34
 8012fe0:	89a3      	ldrh	r3, [r4, #12]
 8012fe2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012fe6:	81a3      	strh	r3, [r4, #12]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	6063      	str	r3, [r4, #4]
 8012fec:	6923      	ldr	r3, [r4, #16]
 8012fee:	6023      	str	r3, [r4, #0]
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	f043 0308 	orr.w	r3, r3, #8
 8012ff6:	81a3      	strh	r3, [r4, #12]
 8012ff8:	6923      	ldr	r3, [r4, #16]
 8012ffa:	b94b      	cbnz	r3, 8013010 <__swsetup_r+0x7c>
 8012ffc:	89a3      	ldrh	r3, [r4, #12]
 8012ffe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013006:	d003      	beq.n	8013010 <__swsetup_r+0x7c>
 8013008:	4621      	mov	r1, r4
 801300a:	4628      	mov	r0, r5
 801300c:	f002 fe42 	bl	8015c94 <__smakebuf_r>
 8013010:	89a0      	ldrh	r0, [r4, #12]
 8013012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013016:	f010 0301 	ands.w	r3, r0, #1
 801301a:	d00a      	beq.n	8013032 <__swsetup_r+0x9e>
 801301c:	2300      	movs	r3, #0
 801301e:	60a3      	str	r3, [r4, #8]
 8013020:	6963      	ldr	r3, [r4, #20]
 8013022:	425b      	negs	r3, r3
 8013024:	61a3      	str	r3, [r4, #24]
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	b943      	cbnz	r3, 801303c <__swsetup_r+0xa8>
 801302a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801302e:	d1c4      	bne.n	8012fba <__swsetup_r+0x26>
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	0781      	lsls	r1, r0, #30
 8013034:	bf58      	it	pl
 8013036:	6963      	ldrpl	r3, [r4, #20]
 8013038:	60a3      	str	r3, [r4, #8]
 801303a:	e7f4      	b.n	8013026 <__swsetup_r+0x92>
 801303c:	2000      	movs	r0, #0
 801303e:	e7f7      	b.n	8013030 <__swsetup_r+0x9c>
 8013040:	20000a44 	.word	0x20000a44

08013044 <memset>:
 8013044:	4402      	add	r2, r0
 8013046:	4603      	mov	r3, r0
 8013048:	4293      	cmp	r3, r2
 801304a:	d100      	bne.n	801304e <memset+0xa>
 801304c:	4770      	bx	lr
 801304e:	f803 1b01 	strb.w	r1, [r3], #1
 8013052:	e7f9      	b.n	8013048 <memset+0x4>

08013054 <_localeconv_r>:
 8013054:	4800      	ldr	r0, [pc, #0]	; (8013058 <_localeconv_r+0x4>)
 8013056:	4770      	bx	lr
 8013058:	20000b38 	.word	0x20000b38

0801305c <_close_r>:
 801305c:	b538      	push	{r3, r4, r5, lr}
 801305e:	4d06      	ldr	r5, [pc, #24]	; (8013078 <_close_r+0x1c>)
 8013060:	2300      	movs	r3, #0
 8013062:	4604      	mov	r4, r0
 8013064:	4608      	mov	r0, r1
 8013066:	602b      	str	r3, [r5, #0]
 8013068:	f003 fbe2 	bl	8016830 <_close>
 801306c:	1c43      	adds	r3, r0, #1
 801306e:	d102      	bne.n	8013076 <_close_r+0x1a>
 8013070:	682b      	ldr	r3, [r5, #0]
 8013072:	b103      	cbz	r3, 8013076 <_close_r+0x1a>
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	bd38      	pop	{r3, r4, r5, pc}
 8013078:	20005cec 	.word	0x20005cec

0801307c <_lseek_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4d07      	ldr	r5, [pc, #28]	; (801309c <_lseek_r+0x20>)
 8013080:	4604      	mov	r4, r0
 8013082:	4608      	mov	r0, r1
 8013084:	4611      	mov	r1, r2
 8013086:	2200      	movs	r2, #0
 8013088:	602a      	str	r2, [r5, #0]
 801308a:	461a      	mov	r2, r3
 801308c:	f003 fbf8 	bl	8016880 <_lseek>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d102      	bne.n	801309a <_lseek_r+0x1e>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	b103      	cbz	r3, 801309a <_lseek_r+0x1e>
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	bd38      	pop	{r3, r4, r5, pc}
 801309c:	20005cec 	.word	0x20005cec

080130a0 <_read_r>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4d07      	ldr	r5, [pc, #28]	; (80130c0 <_read_r+0x20>)
 80130a4:	4604      	mov	r4, r0
 80130a6:	4608      	mov	r0, r1
 80130a8:	4611      	mov	r1, r2
 80130aa:	2200      	movs	r2, #0
 80130ac:	602a      	str	r2, [r5, #0]
 80130ae:	461a      	mov	r2, r3
 80130b0:	f003 fbee 	bl	8016890 <_read>
 80130b4:	1c43      	adds	r3, r0, #1
 80130b6:	d102      	bne.n	80130be <_read_r+0x1e>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	b103      	cbz	r3, 80130be <_read_r+0x1e>
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	bd38      	pop	{r3, r4, r5, pc}
 80130c0:	20005cec 	.word	0x20005cec

080130c4 <_sbrk_r>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4d06      	ldr	r5, [pc, #24]	; (80130e0 <_sbrk_r+0x1c>)
 80130c8:	2300      	movs	r3, #0
 80130ca:	4604      	mov	r4, r0
 80130cc:	4608      	mov	r0, r1
 80130ce:	602b      	str	r3, [r5, #0]
 80130d0:	f7ee fc7e 	bl	80019d0 <_sbrk>
 80130d4:	1c43      	adds	r3, r0, #1
 80130d6:	d102      	bne.n	80130de <_sbrk_r+0x1a>
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	b103      	cbz	r3, 80130de <_sbrk_r+0x1a>
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	bd38      	pop	{r3, r4, r5, pc}
 80130e0:	20005cec 	.word	0x20005cec

080130e4 <_write_r>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	4d07      	ldr	r5, [pc, #28]	; (8013104 <_write_r+0x20>)
 80130e8:	4604      	mov	r4, r0
 80130ea:	4608      	mov	r0, r1
 80130ec:	4611      	mov	r1, r2
 80130ee:	2200      	movs	r2, #0
 80130f0:	602a      	str	r2, [r5, #0]
 80130f2:	461a      	mov	r2, r3
 80130f4:	f7ee fa64 	bl	80015c0 <_write>
 80130f8:	1c43      	adds	r3, r0, #1
 80130fa:	d102      	bne.n	8013102 <_write_r+0x1e>
 80130fc:	682b      	ldr	r3, [r5, #0]
 80130fe:	b103      	cbz	r3, 8013102 <_write_r+0x1e>
 8013100:	6023      	str	r3, [r4, #0]
 8013102:	bd38      	pop	{r3, r4, r5, pc}
 8013104:	20005cec 	.word	0x20005cec

08013108 <__errno>:
 8013108:	4b01      	ldr	r3, [pc, #4]	; (8013110 <__errno+0x8>)
 801310a:	6818      	ldr	r0, [r3, #0]
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	20000a44 	.word	0x20000a44

08013114 <__libc_init_array>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	4d0d      	ldr	r5, [pc, #52]	; (801314c <__libc_init_array+0x38>)
 8013118:	4c0d      	ldr	r4, [pc, #52]	; (8013150 <__libc_init_array+0x3c>)
 801311a:	1b64      	subs	r4, r4, r5
 801311c:	10a4      	asrs	r4, r4, #2
 801311e:	2600      	movs	r6, #0
 8013120:	42a6      	cmp	r6, r4
 8013122:	d109      	bne.n	8013138 <__libc_init_array+0x24>
 8013124:	4d0b      	ldr	r5, [pc, #44]	; (8013154 <__libc_init_array+0x40>)
 8013126:	4c0c      	ldr	r4, [pc, #48]	; (8013158 <__libc_init_array+0x44>)
 8013128:	f003 fbbc 	bl	80168a4 <_init>
 801312c:	1b64      	subs	r4, r4, r5
 801312e:	10a4      	asrs	r4, r4, #2
 8013130:	2600      	movs	r6, #0
 8013132:	42a6      	cmp	r6, r4
 8013134:	d105      	bne.n	8013142 <__libc_init_array+0x2e>
 8013136:	bd70      	pop	{r4, r5, r6, pc}
 8013138:	f855 3b04 	ldr.w	r3, [r5], #4
 801313c:	4798      	blx	r3
 801313e:	3601      	adds	r6, #1
 8013140:	e7ee      	b.n	8013120 <__libc_init_array+0xc>
 8013142:	f855 3b04 	ldr.w	r3, [r5], #4
 8013146:	4798      	blx	r3
 8013148:	3601      	adds	r6, #1
 801314a:	e7f2      	b.n	8013132 <__libc_init_array+0x1e>
 801314c:	08046760 	.word	0x08046760
 8013150:	08046760 	.word	0x08046760
 8013154:	08046760 	.word	0x08046760
 8013158:	08046764 	.word	0x08046764

0801315c <__retarget_lock_init_recursive>:
 801315c:	4770      	bx	lr

0801315e <__retarget_lock_acquire_recursive>:
 801315e:	4770      	bx	lr

08013160 <__retarget_lock_release_recursive>:
 8013160:	4770      	bx	lr

08013162 <memcpy>:
 8013162:	440a      	add	r2, r1
 8013164:	4291      	cmp	r1, r2
 8013166:	f100 33ff 	add.w	r3, r0, #4294967295
 801316a:	d100      	bne.n	801316e <memcpy+0xc>
 801316c:	4770      	bx	lr
 801316e:	b510      	push	{r4, lr}
 8013170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013178:	4291      	cmp	r1, r2
 801317a:	d1f9      	bne.n	8013170 <memcpy+0xe>
 801317c:	bd10      	pop	{r4, pc}
	...

08013180 <nanf>:
 8013180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013188 <nanf+0x8>
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop
 8013188:	7fc00000 	.word	0x7fc00000

0801318c <quorem>:
 801318c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013190:	6903      	ldr	r3, [r0, #16]
 8013192:	690c      	ldr	r4, [r1, #16]
 8013194:	42a3      	cmp	r3, r4
 8013196:	4607      	mov	r7, r0
 8013198:	db7e      	blt.n	8013298 <quorem+0x10c>
 801319a:	3c01      	subs	r4, #1
 801319c:	f101 0814 	add.w	r8, r1, #20
 80131a0:	f100 0514 	add.w	r5, r0, #20
 80131a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131a8:	9301      	str	r3, [sp, #4]
 80131aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80131ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131b2:	3301      	adds	r3, #1
 80131b4:	429a      	cmp	r2, r3
 80131b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80131ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80131be:	fbb2 f6f3 	udiv	r6, r2, r3
 80131c2:	d331      	bcc.n	8013228 <quorem+0x9c>
 80131c4:	f04f 0e00 	mov.w	lr, #0
 80131c8:	4640      	mov	r0, r8
 80131ca:	46ac      	mov	ip, r5
 80131cc:	46f2      	mov	sl, lr
 80131ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80131d2:	b293      	uxth	r3, r2
 80131d4:	fb06 e303 	mla	r3, r6, r3, lr
 80131d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131dc:	0c1a      	lsrs	r2, r3, #16
 80131de:	b29b      	uxth	r3, r3
 80131e0:	ebaa 0303 	sub.w	r3, sl, r3
 80131e4:	f8dc a000 	ldr.w	sl, [ip]
 80131e8:	fa13 f38a 	uxtah	r3, r3, sl
 80131ec:	fb06 220e 	mla	r2, r6, lr, r2
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	9b00      	ldr	r3, [sp, #0]
 80131f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131f8:	b292      	uxth	r2, r2
 80131fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80131fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013202:	f8bd 3000 	ldrh.w	r3, [sp]
 8013206:	4581      	cmp	r9, r0
 8013208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801320c:	f84c 3b04 	str.w	r3, [ip], #4
 8013210:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013214:	d2db      	bcs.n	80131ce <quorem+0x42>
 8013216:	f855 300b 	ldr.w	r3, [r5, fp]
 801321a:	b92b      	cbnz	r3, 8013228 <quorem+0x9c>
 801321c:	9b01      	ldr	r3, [sp, #4]
 801321e:	3b04      	subs	r3, #4
 8013220:	429d      	cmp	r5, r3
 8013222:	461a      	mov	r2, r3
 8013224:	d32c      	bcc.n	8013280 <quorem+0xf4>
 8013226:	613c      	str	r4, [r7, #16]
 8013228:	4638      	mov	r0, r7
 801322a:	f001 f93d 	bl	80144a8 <__mcmp>
 801322e:	2800      	cmp	r0, #0
 8013230:	db22      	blt.n	8013278 <quorem+0xec>
 8013232:	3601      	adds	r6, #1
 8013234:	4629      	mov	r1, r5
 8013236:	2000      	movs	r0, #0
 8013238:	f858 2b04 	ldr.w	r2, [r8], #4
 801323c:	f8d1 c000 	ldr.w	ip, [r1]
 8013240:	b293      	uxth	r3, r2
 8013242:	1ac3      	subs	r3, r0, r3
 8013244:	0c12      	lsrs	r2, r2, #16
 8013246:	fa13 f38c 	uxtah	r3, r3, ip
 801324a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801324e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013252:	b29b      	uxth	r3, r3
 8013254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013258:	45c1      	cmp	r9, r8
 801325a:	f841 3b04 	str.w	r3, [r1], #4
 801325e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013262:	d2e9      	bcs.n	8013238 <quorem+0xac>
 8013264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013268:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801326c:	b922      	cbnz	r2, 8013278 <quorem+0xec>
 801326e:	3b04      	subs	r3, #4
 8013270:	429d      	cmp	r5, r3
 8013272:	461a      	mov	r2, r3
 8013274:	d30a      	bcc.n	801328c <quorem+0x100>
 8013276:	613c      	str	r4, [r7, #16]
 8013278:	4630      	mov	r0, r6
 801327a:	b003      	add	sp, #12
 801327c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013280:	6812      	ldr	r2, [r2, #0]
 8013282:	3b04      	subs	r3, #4
 8013284:	2a00      	cmp	r2, #0
 8013286:	d1ce      	bne.n	8013226 <quorem+0x9a>
 8013288:	3c01      	subs	r4, #1
 801328a:	e7c9      	b.n	8013220 <quorem+0x94>
 801328c:	6812      	ldr	r2, [r2, #0]
 801328e:	3b04      	subs	r3, #4
 8013290:	2a00      	cmp	r2, #0
 8013292:	d1f0      	bne.n	8013276 <quorem+0xea>
 8013294:	3c01      	subs	r4, #1
 8013296:	e7eb      	b.n	8013270 <quorem+0xe4>
 8013298:	2000      	movs	r0, #0
 801329a:	e7ee      	b.n	801327a <quorem+0xee>
 801329c:	0000      	movs	r0, r0
	...

080132a0 <_dtoa_r>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	ed2d 8b04 	vpush	{d8-d9}
 80132a8:	69c5      	ldr	r5, [r0, #28]
 80132aa:	b093      	sub	sp, #76	; 0x4c
 80132ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80132b0:	ec57 6b10 	vmov	r6, r7, d0
 80132b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80132b8:	9107      	str	r1, [sp, #28]
 80132ba:	4604      	mov	r4, r0
 80132bc:	920a      	str	r2, [sp, #40]	; 0x28
 80132be:	930d      	str	r3, [sp, #52]	; 0x34
 80132c0:	b975      	cbnz	r5, 80132e0 <_dtoa_r+0x40>
 80132c2:	2010      	movs	r0, #16
 80132c4:	f7fe fd00 	bl	8011cc8 <malloc>
 80132c8:	4602      	mov	r2, r0
 80132ca:	61e0      	str	r0, [r4, #28]
 80132cc:	b920      	cbnz	r0, 80132d8 <_dtoa_r+0x38>
 80132ce:	4bae      	ldr	r3, [pc, #696]	; (8013588 <_dtoa_r+0x2e8>)
 80132d0:	21ef      	movs	r1, #239	; 0xef
 80132d2:	48ae      	ldr	r0, [pc, #696]	; (801358c <_dtoa_r+0x2ec>)
 80132d4:	f002 fd70 	bl	8015db8 <__assert_func>
 80132d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80132dc:	6005      	str	r5, [r0, #0]
 80132de:	60c5      	str	r5, [r0, #12]
 80132e0:	69e3      	ldr	r3, [r4, #28]
 80132e2:	6819      	ldr	r1, [r3, #0]
 80132e4:	b151      	cbz	r1, 80132fc <_dtoa_r+0x5c>
 80132e6:	685a      	ldr	r2, [r3, #4]
 80132e8:	604a      	str	r2, [r1, #4]
 80132ea:	2301      	movs	r3, #1
 80132ec:	4093      	lsls	r3, r2
 80132ee:	608b      	str	r3, [r1, #8]
 80132f0:	4620      	mov	r0, r4
 80132f2:	f000 fe53 	bl	8013f9c <_Bfree>
 80132f6:	69e3      	ldr	r3, [r4, #28]
 80132f8:	2200      	movs	r2, #0
 80132fa:	601a      	str	r2, [r3, #0]
 80132fc:	1e3b      	subs	r3, r7, #0
 80132fe:	bfbb      	ittet	lt
 8013300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013304:	9303      	strlt	r3, [sp, #12]
 8013306:	2300      	movge	r3, #0
 8013308:	2201      	movlt	r2, #1
 801330a:	bfac      	ite	ge
 801330c:	f8c8 3000 	strge.w	r3, [r8]
 8013310:	f8c8 2000 	strlt.w	r2, [r8]
 8013314:	4b9e      	ldr	r3, [pc, #632]	; (8013590 <_dtoa_r+0x2f0>)
 8013316:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801331a:	ea33 0308 	bics.w	r3, r3, r8
 801331e:	d11b      	bne.n	8013358 <_dtoa_r+0xb8>
 8013320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013322:	f242 730f 	movw	r3, #9999	; 0x270f
 8013326:	6013      	str	r3, [r2, #0]
 8013328:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801332c:	4333      	orrs	r3, r6
 801332e:	f000 8593 	beq.w	8013e58 <_dtoa_r+0xbb8>
 8013332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013334:	b963      	cbnz	r3, 8013350 <_dtoa_r+0xb0>
 8013336:	4b97      	ldr	r3, [pc, #604]	; (8013594 <_dtoa_r+0x2f4>)
 8013338:	e027      	b.n	801338a <_dtoa_r+0xea>
 801333a:	4b97      	ldr	r3, [pc, #604]	; (8013598 <_dtoa_r+0x2f8>)
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	3308      	adds	r3, #8
 8013340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	9800      	ldr	r0, [sp, #0]
 8013346:	b013      	add	sp, #76	; 0x4c
 8013348:	ecbd 8b04 	vpop	{d8-d9}
 801334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013350:	4b90      	ldr	r3, [pc, #576]	; (8013594 <_dtoa_r+0x2f4>)
 8013352:	9300      	str	r3, [sp, #0]
 8013354:	3303      	adds	r3, #3
 8013356:	e7f3      	b.n	8013340 <_dtoa_r+0xa0>
 8013358:	ed9d 7b02 	vldr	d7, [sp, #8]
 801335c:	2200      	movs	r2, #0
 801335e:	ec51 0b17 	vmov	r0, r1, d7
 8013362:	eeb0 8a47 	vmov.f32	s16, s14
 8013366:	eef0 8a67 	vmov.f32	s17, s15
 801336a:	2300      	movs	r3, #0
 801336c:	f7ed fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8013370:	4681      	mov	r9, r0
 8013372:	b160      	cbz	r0, 801338e <_dtoa_r+0xee>
 8013374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013376:	2301      	movs	r3, #1
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 8568 	beq.w	8013e52 <_dtoa_r+0xbb2>
 8013382:	4b86      	ldr	r3, [pc, #536]	; (801359c <_dtoa_r+0x2fc>)
 8013384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013386:	6013      	str	r3, [r2, #0]
 8013388:	3b01      	subs	r3, #1
 801338a:	9300      	str	r3, [sp, #0]
 801338c:	e7da      	b.n	8013344 <_dtoa_r+0xa4>
 801338e:	aa10      	add	r2, sp, #64	; 0x40
 8013390:	a911      	add	r1, sp, #68	; 0x44
 8013392:	4620      	mov	r0, r4
 8013394:	eeb0 0a48 	vmov.f32	s0, s16
 8013398:	eef0 0a68 	vmov.f32	s1, s17
 801339c:	f001 f99a 	bl	80146d4 <__d2b>
 80133a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80133a4:	4682      	mov	sl, r0
 80133a6:	2d00      	cmp	r5, #0
 80133a8:	d07f      	beq.n	80134aa <_dtoa_r+0x20a>
 80133aa:	ee18 3a90 	vmov	r3, s17
 80133ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80133b6:	ec51 0b18 	vmov	r0, r1, d8
 80133ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80133be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80133c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80133c6:	4619      	mov	r1, r3
 80133c8:	2200      	movs	r2, #0
 80133ca:	4b75      	ldr	r3, [pc, #468]	; (80135a0 <_dtoa_r+0x300>)
 80133cc:	f7ec ff5c 	bl	8000288 <__aeabi_dsub>
 80133d0:	a367      	add	r3, pc, #412	; (adr r3, 8013570 <_dtoa_r+0x2d0>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	f7ed f90f 	bl	80005f8 <__aeabi_dmul>
 80133da:	a367      	add	r3, pc, #412	; (adr r3, 8013578 <_dtoa_r+0x2d8>)
 80133dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e0:	f7ec ff54 	bl	800028c <__adddf3>
 80133e4:	4606      	mov	r6, r0
 80133e6:	4628      	mov	r0, r5
 80133e8:	460f      	mov	r7, r1
 80133ea:	f7ed f89b 	bl	8000524 <__aeabi_i2d>
 80133ee:	a364      	add	r3, pc, #400	; (adr r3, 8013580 <_dtoa_r+0x2e0>)
 80133f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f4:	f7ed f900 	bl	80005f8 <__aeabi_dmul>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	4630      	mov	r0, r6
 80133fe:	4639      	mov	r1, r7
 8013400:	f7ec ff44 	bl	800028c <__adddf3>
 8013404:	4606      	mov	r6, r0
 8013406:	460f      	mov	r7, r1
 8013408:	f7ed fba6 	bl	8000b58 <__aeabi_d2iz>
 801340c:	2200      	movs	r2, #0
 801340e:	4683      	mov	fp, r0
 8013410:	2300      	movs	r3, #0
 8013412:	4630      	mov	r0, r6
 8013414:	4639      	mov	r1, r7
 8013416:	f7ed fb61 	bl	8000adc <__aeabi_dcmplt>
 801341a:	b148      	cbz	r0, 8013430 <_dtoa_r+0x190>
 801341c:	4658      	mov	r0, fp
 801341e:	f7ed f881 	bl	8000524 <__aeabi_i2d>
 8013422:	4632      	mov	r2, r6
 8013424:	463b      	mov	r3, r7
 8013426:	f7ed fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801342a:	b908      	cbnz	r0, 8013430 <_dtoa_r+0x190>
 801342c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013430:	f1bb 0f16 	cmp.w	fp, #22
 8013434:	d857      	bhi.n	80134e6 <_dtoa_r+0x246>
 8013436:	4b5b      	ldr	r3, [pc, #364]	; (80135a4 <_dtoa_r+0x304>)
 8013438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	ec51 0b18 	vmov	r0, r1, d8
 8013444:	f7ed fb4a 	bl	8000adc <__aeabi_dcmplt>
 8013448:	2800      	cmp	r0, #0
 801344a:	d04e      	beq.n	80134ea <_dtoa_r+0x24a>
 801344c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013450:	2300      	movs	r3, #0
 8013452:	930c      	str	r3, [sp, #48]	; 0x30
 8013454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013456:	1b5b      	subs	r3, r3, r5
 8013458:	1e5a      	subs	r2, r3, #1
 801345a:	bf45      	ittet	mi
 801345c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013460:	9305      	strmi	r3, [sp, #20]
 8013462:	2300      	movpl	r3, #0
 8013464:	2300      	movmi	r3, #0
 8013466:	9206      	str	r2, [sp, #24]
 8013468:	bf54      	ite	pl
 801346a:	9305      	strpl	r3, [sp, #20]
 801346c:	9306      	strmi	r3, [sp, #24]
 801346e:	f1bb 0f00 	cmp.w	fp, #0
 8013472:	db3c      	blt.n	80134ee <_dtoa_r+0x24e>
 8013474:	9b06      	ldr	r3, [sp, #24]
 8013476:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801347a:	445b      	add	r3, fp
 801347c:	9306      	str	r3, [sp, #24]
 801347e:	2300      	movs	r3, #0
 8013480:	9308      	str	r3, [sp, #32]
 8013482:	9b07      	ldr	r3, [sp, #28]
 8013484:	2b09      	cmp	r3, #9
 8013486:	d868      	bhi.n	801355a <_dtoa_r+0x2ba>
 8013488:	2b05      	cmp	r3, #5
 801348a:	bfc4      	itt	gt
 801348c:	3b04      	subgt	r3, #4
 801348e:	9307      	strgt	r3, [sp, #28]
 8013490:	9b07      	ldr	r3, [sp, #28]
 8013492:	f1a3 0302 	sub.w	r3, r3, #2
 8013496:	bfcc      	ite	gt
 8013498:	2500      	movgt	r5, #0
 801349a:	2501      	movle	r5, #1
 801349c:	2b03      	cmp	r3, #3
 801349e:	f200 8085 	bhi.w	80135ac <_dtoa_r+0x30c>
 80134a2:	e8df f003 	tbb	[pc, r3]
 80134a6:	3b2e      	.short	0x3b2e
 80134a8:	5839      	.short	0x5839
 80134aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80134ae:	441d      	add	r5, r3
 80134b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80134b4:	2b20      	cmp	r3, #32
 80134b6:	bfc1      	itttt	gt
 80134b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80134bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80134c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80134c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80134c8:	bfd6      	itet	le
 80134ca:	f1c3 0320 	rsble	r3, r3, #32
 80134ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80134d2:	fa06 f003 	lslle.w	r0, r6, r3
 80134d6:	f7ed f815 	bl	8000504 <__aeabi_ui2d>
 80134da:	2201      	movs	r2, #1
 80134dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80134e0:	3d01      	subs	r5, #1
 80134e2:	920e      	str	r2, [sp, #56]	; 0x38
 80134e4:	e76f      	b.n	80133c6 <_dtoa_r+0x126>
 80134e6:	2301      	movs	r3, #1
 80134e8:	e7b3      	b.n	8013452 <_dtoa_r+0x1b2>
 80134ea:	900c      	str	r0, [sp, #48]	; 0x30
 80134ec:	e7b2      	b.n	8013454 <_dtoa_r+0x1b4>
 80134ee:	9b05      	ldr	r3, [sp, #20]
 80134f0:	eba3 030b 	sub.w	r3, r3, fp
 80134f4:	9305      	str	r3, [sp, #20]
 80134f6:	f1cb 0300 	rsb	r3, fp, #0
 80134fa:	9308      	str	r3, [sp, #32]
 80134fc:	2300      	movs	r3, #0
 80134fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013500:	e7bf      	b.n	8013482 <_dtoa_r+0x1e2>
 8013502:	2300      	movs	r3, #0
 8013504:	9309      	str	r3, [sp, #36]	; 0x24
 8013506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013508:	2b00      	cmp	r3, #0
 801350a:	dc52      	bgt.n	80135b2 <_dtoa_r+0x312>
 801350c:	2301      	movs	r3, #1
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	461a      	mov	r2, r3
 8013514:	920a      	str	r2, [sp, #40]	; 0x28
 8013516:	e00b      	b.n	8013530 <_dtoa_r+0x290>
 8013518:	2301      	movs	r3, #1
 801351a:	e7f3      	b.n	8013504 <_dtoa_r+0x264>
 801351c:	2300      	movs	r3, #0
 801351e:	9309      	str	r3, [sp, #36]	; 0x24
 8013520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013522:	445b      	add	r3, fp
 8013524:	9301      	str	r3, [sp, #4]
 8013526:	3301      	adds	r3, #1
 8013528:	2b01      	cmp	r3, #1
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	bfb8      	it	lt
 801352e:	2301      	movlt	r3, #1
 8013530:	69e0      	ldr	r0, [r4, #28]
 8013532:	2100      	movs	r1, #0
 8013534:	2204      	movs	r2, #4
 8013536:	f102 0614 	add.w	r6, r2, #20
 801353a:	429e      	cmp	r6, r3
 801353c:	d93d      	bls.n	80135ba <_dtoa_r+0x31a>
 801353e:	6041      	str	r1, [r0, #4]
 8013540:	4620      	mov	r0, r4
 8013542:	f000 fceb 	bl	8013f1c <_Balloc>
 8013546:	9000      	str	r0, [sp, #0]
 8013548:	2800      	cmp	r0, #0
 801354a:	d139      	bne.n	80135c0 <_dtoa_r+0x320>
 801354c:	4b16      	ldr	r3, [pc, #88]	; (80135a8 <_dtoa_r+0x308>)
 801354e:	4602      	mov	r2, r0
 8013550:	f240 11af 	movw	r1, #431	; 0x1af
 8013554:	e6bd      	b.n	80132d2 <_dtoa_r+0x32>
 8013556:	2301      	movs	r3, #1
 8013558:	e7e1      	b.n	801351e <_dtoa_r+0x27e>
 801355a:	2501      	movs	r5, #1
 801355c:	2300      	movs	r3, #0
 801355e:	9307      	str	r3, [sp, #28]
 8013560:	9509      	str	r5, [sp, #36]	; 0x24
 8013562:	f04f 33ff 	mov.w	r3, #4294967295
 8013566:	9301      	str	r3, [sp, #4]
 8013568:	9304      	str	r3, [sp, #16]
 801356a:	2200      	movs	r2, #0
 801356c:	2312      	movs	r3, #18
 801356e:	e7d1      	b.n	8013514 <_dtoa_r+0x274>
 8013570:	636f4361 	.word	0x636f4361
 8013574:	3fd287a7 	.word	0x3fd287a7
 8013578:	8b60c8b3 	.word	0x8b60c8b3
 801357c:	3fc68a28 	.word	0x3fc68a28
 8013580:	509f79fb 	.word	0x509f79fb
 8013584:	3fd34413 	.word	0x3fd34413
 8013588:	0804635e 	.word	0x0804635e
 801358c:	08046375 	.word	0x08046375
 8013590:	7ff00000 	.word	0x7ff00000
 8013594:	0804635a 	.word	0x0804635a
 8013598:	08046351 	.word	0x08046351
 801359c:	08046329 	.word	0x08046329
 80135a0:	3ff80000 	.word	0x3ff80000
 80135a4:	08046460 	.word	0x08046460
 80135a8:	080463cd 	.word	0x080463cd
 80135ac:	2301      	movs	r3, #1
 80135ae:	9309      	str	r3, [sp, #36]	; 0x24
 80135b0:	e7d7      	b.n	8013562 <_dtoa_r+0x2c2>
 80135b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	9304      	str	r3, [sp, #16]
 80135b8:	e7ba      	b.n	8013530 <_dtoa_r+0x290>
 80135ba:	3101      	adds	r1, #1
 80135bc:	0052      	lsls	r2, r2, #1
 80135be:	e7ba      	b.n	8013536 <_dtoa_r+0x296>
 80135c0:	69e3      	ldr	r3, [r4, #28]
 80135c2:	9a00      	ldr	r2, [sp, #0]
 80135c4:	601a      	str	r2, [r3, #0]
 80135c6:	9b04      	ldr	r3, [sp, #16]
 80135c8:	2b0e      	cmp	r3, #14
 80135ca:	f200 80a8 	bhi.w	801371e <_dtoa_r+0x47e>
 80135ce:	2d00      	cmp	r5, #0
 80135d0:	f000 80a5 	beq.w	801371e <_dtoa_r+0x47e>
 80135d4:	f1bb 0f00 	cmp.w	fp, #0
 80135d8:	dd38      	ble.n	801364c <_dtoa_r+0x3ac>
 80135da:	4bc0      	ldr	r3, [pc, #768]	; (80138dc <_dtoa_r+0x63c>)
 80135dc:	f00b 020f 	and.w	r2, fp, #15
 80135e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80135e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80135ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80135f0:	d019      	beq.n	8013626 <_dtoa_r+0x386>
 80135f2:	4bbb      	ldr	r3, [pc, #748]	; (80138e0 <_dtoa_r+0x640>)
 80135f4:	ec51 0b18 	vmov	r0, r1, d8
 80135f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80135fc:	f7ed f926 	bl	800084c <__aeabi_ddiv>
 8013600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013604:	f008 080f 	and.w	r8, r8, #15
 8013608:	2503      	movs	r5, #3
 801360a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80138e0 <_dtoa_r+0x640>
 801360e:	f1b8 0f00 	cmp.w	r8, #0
 8013612:	d10a      	bne.n	801362a <_dtoa_r+0x38a>
 8013614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013618:	4632      	mov	r2, r6
 801361a:	463b      	mov	r3, r7
 801361c:	f7ed f916 	bl	800084c <__aeabi_ddiv>
 8013620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013624:	e02b      	b.n	801367e <_dtoa_r+0x3de>
 8013626:	2502      	movs	r5, #2
 8013628:	e7ef      	b.n	801360a <_dtoa_r+0x36a>
 801362a:	f018 0f01 	tst.w	r8, #1
 801362e:	d008      	beq.n	8013642 <_dtoa_r+0x3a2>
 8013630:	4630      	mov	r0, r6
 8013632:	4639      	mov	r1, r7
 8013634:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013638:	f7ec ffde 	bl	80005f8 <__aeabi_dmul>
 801363c:	3501      	adds	r5, #1
 801363e:	4606      	mov	r6, r0
 8013640:	460f      	mov	r7, r1
 8013642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013646:	f109 0908 	add.w	r9, r9, #8
 801364a:	e7e0      	b.n	801360e <_dtoa_r+0x36e>
 801364c:	f000 809f 	beq.w	801378e <_dtoa_r+0x4ee>
 8013650:	f1cb 0600 	rsb	r6, fp, #0
 8013654:	4ba1      	ldr	r3, [pc, #644]	; (80138dc <_dtoa_r+0x63c>)
 8013656:	4fa2      	ldr	r7, [pc, #648]	; (80138e0 <_dtoa_r+0x640>)
 8013658:	f006 020f 	and.w	r2, r6, #15
 801365c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013664:	ec51 0b18 	vmov	r0, r1, d8
 8013668:	f7ec ffc6 	bl	80005f8 <__aeabi_dmul>
 801366c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013670:	1136      	asrs	r6, r6, #4
 8013672:	2300      	movs	r3, #0
 8013674:	2502      	movs	r5, #2
 8013676:	2e00      	cmp	r6, #0
 8013678:	d17e      	bne.n	8013778 <_dtoa_r+0x4d8>
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1d0      	bne.n	8013620 <_dtoa_r+0x380>
 801367e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013680:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	f000 8084 	beq.w	8013792 <_dtoa_r+0x4f2>
 801368a:	4b96      	ldr	r3, [pc, #600]	; (80138e4 <_dtoa_r+0x644>)
 801368c:	2200      	movs	r2, #0
 801368e:	4640      	mov	r0, r8
 8013690:	4649      	mov	r1, r9
 8013692:	f7ed fa23 	bl	8000adc <__aeabi_dcmplt>
 8013696:	2800      	cmp	r0, #0
 8013698:	d07b      	beq.n	8013792 <_dtoa_r+0x4f2>
 801369a:	9b04      	ldr	r3, [sp, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d078      	beq.n	8013792 <_dtoa_r+0x4f2>
 80136a0:	9b01      	ldr	r3, [sp, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	dd39      	ble.n	801371a <_dtoa_r+0x47a>
 80136a6:	4b90      	ldr	r3, [pc, #576]	; (80138e8 <_dtoa_r+0x648>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	4640      	mov	r0, r8
 80136ac:	4649      	mov	r1, r9
 80136ae:	f7ec ffa3 	bl	80005f8 <__aeabi_dmul>
 80136b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136b6:	9e01      	ldr	r6, [sp, #4]
 80136b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80136bc:	3501      	adds	r5, #1
 80136be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80136c2:	4628      	mov	r0, r5
 80136c4:	f7ec ff2e 	bl	8000524 <__aeabi_i2d>
 80136c8:	4642      	mov	r2, r8
 80136ca:	464b      	mov	r3, r9
 80136cc:	f7ec ff94 	bl	80005f8 <__aeabi_dmul>
 80136d0:	4b86      	ldr	r3, [pc, #536]	; (80138ec <_dtoa_r+0x64c>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	f7ec fdda 	bl	800028c <__adddf3>
 80136d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80136dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	2e00      	cmp	r6, #0
 80136e4:	d158      	bne.n	8013798 <_dtoa_r+0x4f8>
 80136e6:	4b82      	ldr	r3, [pc, #520]	; (80138f0 <_dtoa_r+0x650>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	4640      	mov	r0, r8
 80136ec:	4649      	mov	r1, r9
 80136ee:	f7ec fdcb 	bl	8000288 <__aeabi_dsub>
 80136f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136f6:	4680      	mov	r8, r0
 80136f8:	4689      	mov	r9, r1
 80136fa:	f7ed fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80136fe:	2800      	cmp	r0, #0
 8013700:	f040 8296 	bne.w	8013c30 <_dtoa_r+0x990>
 8013704:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013708:	4640      	mov	r0, r8
 801370a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801370e:	4649      	mov	r1, r9
 8013710:	f7ed f9e4 	bl	8000adc <__aeabi_dcmplt>
 8013714:	2800      	cmp	r0, #0
 8013716:	f040 8289 	bne.w	8013c2c <_dtoa_r+0x98c>
 801371a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801371e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013720:	2b00      	cmp	r3, #0
 8013722:	f2c0 814e 	blt.w	80139c2 <_dtoa_r+0x722>
 8013726:	f1bb 0f0e 	cmp.w	fp, #14
 801372a:	f300 814a 	bgt.w	80139c2 <_dtoa_r+0x722>
 801372e:	4b6b      	ldr	r3, [pc, #428]	; (80138dc <_dtoa_r+0x63c>)
 8013730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801373a:	2b00      	cmp	r3, #0
 801373c:	f280 80dc 	bge.w	80138f8 <_dtoa_r+0x658>
 8013740:	9b04      	ldr	r3, [sp, #16]
 8013742:	2b00      	cmp	r3, #0
 8013744:	f300 80d8 	bgt.w	80138f8 <_dtoa_r+0x658>
 8013748:	f040 826f 	bne.w	8013c2a <_dtoa_r+0x98a>
 801374c:	4b68      	ldr	r3, [pc, #416]	; (80138f0 <_dtoa_r+0x650>)
 801374e:	2200      	movs	r2, #0
 8013750:	4640      	mov	r0, r8
 8013752:	4649      	mov	r1, r9
 8013754:	f7ec ff50 	bl	80005f8 <__aeabi_dmul>
 8013758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801375c:	f7ed f9d2 	bl	8000b04 <__aeabi_dcmpge>
 8013760:	9e04      	ldr	r6, [sp, #16]
 8013762:	4637      	mov	r7, r6
 8013764:	2800      	cmp	r0, #0
 8013766:	f040 8245 	bne.w	8013bf4 <_dtoa_r+0x954>
 801376a:	9d00      	ldr	r5, [sp, #0]
 801376c:	2331      	movs	r3, #49	; 0x31
 801376e:	f805 3b01 	strb.w	r3, [r5], #1
 8013772:	f10b 0b01 	add.w	fp, fp, #1
 8013776:	e241      	b.n	8013bfc <_dtoa_r+0x95c>
 8013778:	07f2      	lsls	r2, r6, #31
 801377a:	d505      	bpl.n	8013788 <_dtoa_r+0x4e8>
 801377c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013780:	f7ec ff3a 	bl	80005f8 <__aeabi_dmul>
 8013784:	3501      	adds	r5, #1
 8013786:	2301      	movs	r3, #1
 8013788:	1076      	asrs	r6, r6, #1
 801378a:	3708      	adds	r7, #8
 801378c:	e773      	b.n	8013676 <_dtoa_r+0x3d6>
 801378e:	2502      	movs	r5, #2
 8013790:	e775      	b.n	801367e <_dtoa_r+0x3de>
 8013792:	9e04      	ldr	r6, [sp, #16]
 8013794:	465f      	mov	r7, fp
 8013796:	e792      	b.n	80136be <_dtoa_r+0x41e>
 8013798:	9900      	ldr	r1, [sp, #0]
 801379a:	4b50      	ldr	r3, [pc, #320]	; (80138dc <_dtoa_r+0x63c>)
 801379c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137a0:	4431      	add	r1, r6
 80137a2:	9102      	str	r1, [sp, #8]
 80137a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137a6:	eeb0 9a47 	vmov.f32	s18, s14
 80137aa:	eef0 9a67 	vmov.f32	s19, s15
 80137ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80137b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80137b6:	2900      	cmp	r1, #0
 80137b8:	d044      	beq.n	8013844 <_dtoa_r+0x5a4>
 80137ba:	494e      	ldr	r1, [pc, #312]	; (80138f4 <_dtoa_r+0x654>)
 80137bc:	2000      	movs	r0, #0
 80137be:	f7ed f845 	bl	800084c <__aeabi_ddiv>
 80137c2:	ec53 2b19 	vmov	r2, r3, d9
 80137c6:	f7ec fd5f 	bl	8000288 <__aeabi_dsub>
 80137ca:	9d00      	ldr	r5, [sp, #0]
 80137cc:	ec41 0b19 	vmov	d9, r0, r1
 80137d0:	4649      	mov	r1, r9
 80137d2:	4640      	mov	r0, r8
 80137d4:	f7ed f9c0 	bl	8000b58 <__aeabi_d2iz>
 80137d8:	4606      	mov	r6, r0
 80137da:	f7ec fea3 	bl	8000524 <__aeabi_i2d>
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fd4f 	bl	8000288 <__aeabi_dsub>
 80137ea:	3630      	adds	r6, #48	; 0x30
 80137ec:	f805 6b01 	strb.w	r6, [r5], #1
 80137f0:	ec53 2b19 	vmov	r2, r3, d9
 80137f4:	4680      	mov	r8, r0
 80137f6:	4689      	mov	r9, r1
 80137f8:	f7ed f970 	bl	8000adc <__aeabi_dcmplt>
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d164      	bne.n	80138ca <_dtoa_r+0x62a>
 8013800:	4642      	mov	r2, r8
 8013802:	464b      	mov	r3, r9
 8013804:	4937      	ldr	r1, [pc, #220]	; (80138e4 <_dtoa_r+0x644>)
 8013806:	2000      	movs	r0, #0
 8013808:	f7ec fd3e 	bl	8000288 <__aeabi_dsub>
 801380c:	ec53 2b19 	vmov	r2, r3, d9
 8013810:	f7ed f964 	bl	8000adc <__aeabi_dcmplt>
 8013814:	2800      	cmp	r0, #0
 8013816:	f040 80b6 	bne.w	8013986 <_dtoa_r+0x6e6>
 801381a:	9b02      	ldr	r3, [sp, #8]
 801381c:	429d      	cmp	r5, r3
 801381e:	f43f af7c 	beq.w	801371a <_dtoa_r+0x47a>
 8013822:	4b31      	ldr	r3, [pc, #196]	; (80138e8 <_dtoa_r+0x648>)
 8013824:	ec51 0b19 	vmov	r0, r1, d9
 8013828:	2200      	movs	r2, #0
 801382a:	f7ec fee5 	bl	80005f8 <__aeabi_dmul>
 801382e:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <_dtoa_r+0x648>)
 8013830:	ec41 0b19 	vmov	d9, r0, r1
 8013834:	2200      	movs	r2, #0
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ec fedd 	bl	80005f8 <__aeabi_dmul>
 801383e:	4680      	mov	r8, r0
 8013840:	4689      	mov	r9, r1
 8013842:	e7c5      	b.n	80137d0 <_dtoa_r+0x530>
 8013844:	ec51 0b17 	vmov	r0, r1, d7
 8013848:	f7ec fed6 	bl	80005f8 <__aeabi_dmul>
 801384c:	9b02      	ldr	r3, [sp, #8]
 801384e:	9d00      	ldr	r5, [sp, #0]
 8013850:	930f      	str	r3, [sp, #60]	; 0x3c
 8013852:	ec41 0b19 	vmov	d9, r0, r1
 8013856:	4649      	mov	r1, r9
 8013858:	4640      	mov	r0, r8
 801385a:	f7ed f97d 	bl	8000b58 <__aeabi_d2iz>
 801385e:	4606      	mov	r6, r0
 8013860:	f7ec fe60 	bl	8000524 <__aeabi_i2d>
 8013864:	3630      	adds	r6, #48	; 0x30
 8013866:	4602      	mov	r2, r0
 8013868:	460b      	mov	r3, r1
 801386a:	4640      	mov	r0, r8
 801386c:	4649      	mov	r1, r9
 801386e:	f7ec fd0b 	bl	8000288 <__aeabi_dsub>
 8013872:	f805 6b01 	strb.w	r6, [r5], #1
 8013876:	9b02      	ldr	r3, [sp, #8]
 8013878:	429d      	cmp	r5, r3
 801387a:	4680      	mov	r8, r0
 801387c:	4689      	mov	r9, r1
 801387e:	f04f 0200 	mov.w	r2, #0
 8013882:	d124      	bne.n	80138ce <_dtoa_r+0x62e>
 8013884:	4b1b      	ldr	r3, [pc, #108]	; (80138f4 <_dtoa_r+0x654>)
 8013886:	ec51 0b19 	vmov	r0, r1, d9
 801388a:	f7ec fcff 	bl	800028c <__adddf3>
 801388e:	4602      	mov	r2, r0
 8013890:	460b      	mov	r3, r1
 8013892:	4640      	mov	r0, r8
 8013894:	4649      	mov	r1, r9
 8013896:	f7ed f93f 	bl	8000b18 <__aeabi_dcmpgt>
 801389a:	2800      	cmp	r0, #0
 801389c:	d173      	bne.n	8013986 <_dtoa_r+0x6e6>
 801389e:	ec53 2b19 	vmov	r2, r3, d9
 80138a2:	4914      	ldr	r1, [pc, #80]	; (80138f4 <_dtoa_r+0x654>)
 80138a4:	2000      	movs	r0, #0
 80138a6:	f7ec fcef 	bl	8000288 <__aeabi_dsub>
 80138aa:	4602      	mov	r2, r0
 80138ac:	460b      	mov	r3, r1
 80138ae:	4640      	mov	r0, r8
 80138b0:	4649      	mov	r1, r9
 80138b2:	f7ed f913 	bl	8000adc <__aeabi_dcmplt>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	f43f af2f 	beq.w	801371a <_dtoa_r+0x47a>
 80138bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80138be:	1e6b      	subs	r3, r5, #1
 80138c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80138c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80138c6:	2b30      	cmp	r3, #48	; 0x30
 80138c8:	d0f8      	beq.n	80138bc <_dtoa_r+0x61c>
 80138ca:	46bb      	mov	fp, r7
 80138cc:	e04a      	b.n	8013964 <_dtoa_r+0x6c4>
 80138ce:	4b06      	ldr	r3, [pc, #24]	; (80138e8 <_dtoa_r+0x648>)
 80138d0:	f7ec fe92 	bl	80005f8 <__aeabi_dmul>
 80138d4:	4680      	mov	r8, r0
 80138d6:	4689      	mov	r9, r1
 80138d8:	e7bd      	b.n	8013856 <_dtoa_r+0x5b6>
 80138da:	bf00      	nop
 80138dc:	08046460 	.word	0x08046460
 80138e0:	08046438 	.word	0x08046438
 80138e4:	3ff00000 	.word	0x3ff00000
 80138e8:	40240000 	.word	0x40240000
 80138ec:	401c0000 	.word	0x401c0000
 80138f0:	40140000 	.word	0x40140000
 80138f4:	3fe00000 	.word	0x3fe00000
 80138f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80138fc:	9d00      	ldr	r5, [sp, #0]
 80138fe:	4642      	mov	r2, r8
 8013900:	464b      	mov	r3, r9
 8013902:	4630      	mov	r0, r6
 8013904:	4639      	mov	r1, r7
 8013906:	f7ec ffa1 	bl	800084c <__aeabi_ddiv>
 801390a:	f7ed f925 	bl	8000b58 <__aeabi_d2iz>
 801390e:	9001      	str	r0, [sp, #4]
 8013910:	f7ec fe08 	bl	8000524 <__aeabi_i2d>
 8013914:	4642      	mov	r2, r8
 8013916:	464b      	mov	r3, r9
 8013918:	f7ec fe6e 	bl	80005f8 <__aeabi_dmul>
 801391c:	4602      	mov	r2, r0
 801391e:	460b      	mov	r3, r1
 8013920:	4630      	mov	r0, r6
 8013922:	4639      	mov	r1, r7
 8013924:	f7ec fcb0 	bl	8000288 <__aeabi_dsub>
 8013928:	9e01      	ldr	r6, [sp, #4]
 801392a:	9f04      	ldr	r7, [sp, #16]
 801392c:	3630      	adds	r6, #48	; 0x30
 801392e:	f805 6b01 	strb.w	r6, [r5], #1
 8013932:	9e00      	ldr	r6, [sp, #0]
 8013934:	1bae      	subs	r6, r5, r6
 8013936:	42b7      	cmp	r7, r6
 8013938:	4602      	mov	r2, r0
 801393a:	460b      	mov	r3, r1
 801393c:	d134      	bne.n	80139a8 <_dtoa_r+0x708>
 801393e:	f7ec fca5 	bl	800028c <__adddf3>
 8013942:	4642      	mov	r2, r8
 8013944:	464b      	mov	r3, r9
 8013946:	4606      	mov	r6, r0
 8013948:	460f      	mov	r7, r1
 801394a:	f7ed f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 801394e:	b9c8      	cbnz	r0, 8013984 <_dtoa_r+0x6e4>
 8013950:	4642      	mov	r2, r8
 8013952:	464b      	mov	r3, r9
 8013954:	4630      	mov	r0, r6
 8013956:	4639      	mov	r1, r7
 8013958:	f7ed f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 801395c:	b110      	cbz	r0, 8013964 <_dtoa_r+0x6c4>
 801395e:	9b01      	ldr	r3, [sp, #4]
 8013960:	07db      	lsls	r3, r3, #31
 8013962:	d40f      	bmi.n	8013984 <_dtoa_r+0x6e4>
 8013964:	4651      	mov	r1, sl
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fb18 	bl	8013f9c <_Bfree>
 801396c:	2300      	movs	r3, #0
 801396e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013970:	702b      	strb	r3, [r5, #0]
 8013972:	f10b 0301 	add.w	r3, fp, #1
 8013976:	6013      	str	r3, [r2, #0]
 8013978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801397a:	2b00      	cmp	r3, #0
 801397c:	f43f ace2 	beq.w	8013344 <_dtoa_r+0xa4>
 8013980:	601d      	str	r5, [r3, #0]
 8013982:	e4df      	b.n	8013344 <_dtoa_r+0xa4>
 8013984:	465f      	mov	r7, fp
 8013986:	462b      	mov	r3, r5
 8013988:	461d      	mov	r5, r3
 801398a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801398e:	2a39      	cmp	r2, #57	; 0x39
 8013990:	d106      	bne.n	80139a0 <_dtoa_r+0x700>
 8013992:	9a00      	ldr	r2, [sp, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d1f7      	bne.n	8013988 <_dtoa_r+0x6e8>
 8013998:	9900      	ldr	r1, [sp, #0]
 801399a:	2230      	movs	r2, #48	; 0x30
 801399c:	3701      	adds	r7, #1
 801399e:	700a      	strb	r2, [r1, #0]
 80139a0:	781a      	ldrb	r2, [r3, #0]
 80139a2:	3201      	adds	r2, #1
 80139a4:	701a      	strb	r2, [r3, #0]
 80139a6:	e790      	b.n	80138ca <_dtoa_r+0x62a>
 80139a8:	4ba3      	ldr	r3, [pc, #652]	; (8013c38 <_dtoa_r+0x998>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	f7ec fe24 	bl	80005f8 <__aeabi_dmul>
 80139b0:	2200      	movs	r2, #0
 80139b2:	2300      	movs	r3, #0
 80139b4:	4606      	mov	r6, r0
 80139b6:	460f      	mov	r7, r1
 80139b8:	f7ed f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d09e      	beq.n	80138fe <_dtoa_r+0x65e>
 80139c0:	e7d0      	b.n	8013964 <_dtoa_r+0x6c4>
 80139c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c4:	2a00      	cmp	r2, #0
 80139c6:	f000 80ca 	beq.w	8013b5e <_dtoa_r+0x8be>
 80139ca:	9a07      	ldr	r2, [sp, #28]
 80139cc:	2a01      	cmp	r2, #1
 80139ce:	f300 80ad 	bgt.w	8013b2c <_dtoa_r+0x88c>
 80139d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139d4:	2a00      	cmp	r2, #0
 80139d6:	f000 80a5 	beq.w	8013b24 <_dtoa_r+0x884>
 80139da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80139de:	9e08      	ldr	r6, [sp, #32]
 80139e0:	9d05      	ldr	r5, [sp, #20]
 80139e2:	9a05      	ldr	r2, [sp, #20]
 80139e4:	441a      	add	r2, r3
 80139e6:	9205      	str	r2, [sp, #20]
 80139e8:	9a06      	ldr	r2, [sp, #24]
 80139ea:	2101      	movs	r1, #1
 80139ec:	441a      	add	r2, r3
 80139ee:	4620      	mov	r0, r4
 80139f0:	9206      	str	r2, [sp, #24]
 80139f2:	f000 fbd3 	bl	801419c <__i2b>
 80139f6:	4607      	mov	r7, r0
 80139f8:	b165      	cbz	r5, 8013a14 <_dtoa_r+0x774>
 80139fa:	9b06      	ldr	r3, [sp, #24]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	dd09      	ble.n	8013a14 <_dtoa_r+0x774>
 8013a00:	42ab      	cmp	r3, r5
 8013a02:	9a05      	ldr	r2, [sp, #20]
 8013a04:	bfa8      	it	ge
 8013a06:	462b      	movge	r3, r5
 8013a08:	1ad2      	subs	r2, r2, r3
 8013a0a:	9205      	str	r2, [sp, #20]
 8013a0c:	9a06      	ldr	r2, [sp, #24]
 8013a0e:	1aed      	subs	r5, r5, r3
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	9306      	str	r3, [sp, #24]
 8013a14:	9b08      	ldr	r3, [sp, #32]
 8013a16:	b1f3      	cbz	r3, 8013a56 <_dtoa_r+0x7b6>
 8013a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f000 80a3 	beq.w	8013b66 <_dtoa_r+0x8c6>
 8013a20:	2e00      	cmp	r6, #0
 8013a22:	dd10      	ble.n	8013a46 <_dtoa_r+0x7a6>
 8013a24:	4639      	mov	r1, r7
 8013a26:	4632      	mov	r2, r6
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 fc77 	bl	801431c <__pow5mult>
 8013a2e:	4652      	mov	r2, sl
 8013a30:	4601      	mov	r1, r0
 8013a32:	4607      	mov	r7, r0
 8013a34:	4620      	mov	r0, r4
 8013a36:	f000 fbc7 	bl	80141c8 <__multiply>
 8013a3a:	4651      	mov	r1, sl
 8013a3c:	4680      	mov	r8, r0
 8013a3e:	4620      	mov	r0, r4
 8013a40:	f000 faac 	bl	8013f9c <_Bfree>
 8013a44:	46c2      	mov	sl, r8
 8013a46:	9b08      	ldr	r3, [sp, #32]
 8013a48:	1b9a      	subs	r2, r3, r6
 8013a4a:	d004      	beq.n	8013a56 <_dtoa_r+0x7b6>
 8013a4c:	4651      	mov	r1, sl
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f000 fc64 	bl	801431c <__pow5mult>
 8013a54:	4682      	mov	sl, r0
 8013a56:	2101      	movs	r1, #1
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f000 fb9f 	bl	801419c <__i2b>
 8013a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	4606      	mov	r6, r0
 8013a64:	f340 8081 	ble.w	8013b6a <_dtoa_r+0x8ca>
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4601      	mov	r1, r0
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f000 fc55 	bl	801431c <__pow5mult>
 8013a72:	9b07      	ldr	r3, [sp, #28]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	4606      	mov	r6, r0
 8013a78:	dd7a      	ble.n	8013b70 <_dtoa_r+0x8d0>
 8013a7a:	f04f 0800 	mov.w	r8, #0
 8013a7e:	6933      	ldr	r3, [r6, #16]
 8013a80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013a84:	6918      	ldr	r0, [r3, #16]
 8013a86:	f000 fb3b 	bl	8014100 <__hi0bits>
 8013a8a:	f1c0 0020 	rsb	r0, r0, #32
 8013a8e:	9b06      	ldr	r3, [sp, #24]
 8013a90:	4418      	add	r0, r3
 8013a92:	f010 001f 	ands.w	r0, r0, #31
 8013a96:	f000 8094 	beq.w	8013bc2 <_dtoa_r+0x922>
 8013a9a:	f1c0 0320 	rsb	r3, r0, #32
 8013a9e:	2b04      	cmp	r3, #4
 8013aa0:	f340 8085 	ble.w	8013bae <_dtoa_r+0x90e>
 8013aa4:	9b05      	ldr	r3, [sp, #20]
 8013aa6:	f1c0 001c 	rsb	r0, r0, #28
 8013aaa:	4403      	add	r3, r0
 8013aac:	9305      	str	r3, [sp, #20]
 8013aae:	9b06      	ldr	r3, [sp, #24]
 8013ab0:	4403      	add	r3, r0
 8013ab2:	4405      	add	r5, r0
 8013ab4:	9306      	str	r3, [sp, #24]
 8013ab6:	9b05      	ldr	r3, [sp, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	dd05      	ble.n	8013ac8 <_dtoa_r+0x828>
 8013abc:	4651      	mov	r1, sl
 8013abe:	461a      	mov	r2, r3
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f000 fc85 	bl	80143d0 <__lshift>
 8013ac6:	4682      	mov	sl, r0
 8013ac8:	9b06      	ldr	r3, [sp, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	dd05      	ble.n	8013ada <_dtoa_r+0x83a>
 8013ace:	4631      	mov	r1, r6
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f000 fc7c 	bl	80143d0 <__lshift>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d072      	beq.n	8013bc6 <_dtoa_r+0x926>
 8013ae0:	4631      	mov	r1, r6
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	f000 fce0 	bl	80144a8 <__mcmp>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	da6c      	bge.n	8013bc6 <_dtoa_r+0x926>
 8013aec:	2300      	movs	r3, #0
 8013aee:	4651      	mov	r1, sl
 8013af0:	220a      	movs	r2, #10
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 fa74 	bl	8013fe0 <__multadd>
 8013af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013afe:	4682      	mov	sl, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 81b0 	beq.w	8013e66 <_dtoa_r+0xbc6>
 8013b06:	2300      	movs	r3, #0
 8013b08:	4639      	mov	r1, r7
 8013b0a:	220a      	movs	r2, #10
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f000 fa67 	bl	8013fe0 <__multadd>
 8013b12:	9b01      	ldr	r3, [sp, #4]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	4607      	mov	r7, r0
 8013b18:	f300 8096 	bgt.w	8013c48 <_dtoa_r+0x9a8>
 8013b1c:	9b07      	ldr	r3, [sp, #28]
 8013b1e:	2b02      	cmp	r3, #2
 8013b20:	dc59      	bgt.n	8013bd6 <_dtoa_r+0x936>
 8013b22:	e091      	b.n	8013c48 <_dtoa_r+0x9a8>
 8013b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013b2a:	e758      	b.n	80139de <_dtoa_r+0x73e>
 8013b2c:	9b04      	ldr	r3, [sp, #16]
 8013b2e:	1e5e      	subs	r6, r3, #1
 8013b30:	9b08      	ldr	r3, [sp, #32]
 8013b32:	42b3      	cmp	r3, r6
 8013b34:	bfbf      	itttt	lt
 8013b36:	9b08      	ldrlt	r3, [sp, #32]
 8013b38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013b3a:	9608      	strlt	r6, [sp, #32]
 8013b3c:	1af3      	sublt	r3, r6, r3
 8013b3e:	bfb4      	ite	lt
 8013b40:	18d2      	addlt	r2, r2, r3
 8013b42:	1b9e      	subge	r6, r3, r6
 8013b44:	9b04      	ldr	r3, [sp, #16]
 8013b46:	bfbc      	itt	lt
 8013b48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013b4a:	2600      	movlt	r6, #0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	bfb7      	itett	lt
 8013b50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013b54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013b58:	1a9d      	sublt	r5, r3, r2
 8013b5a:	2300      	movlt	r3, #0
 8013b5c:	e741      	b.n	80139e2 <_dtoa_r+0x742>
 8013b5e:	9e08      	ldr	r6, [sp, #32]
 8013b60:	9d05      	ldr	r5, [sp, #20]
 8013b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013b64:	e748      	b.n	80139f8 <_dtoa_r+0x758>
 8013b66:	9a08      	ldr	r2, [sp, #32]
 8013b68:	e770      	b.n	8013a4c <_dtoa_r+0x7ac>
 8013b6a:	9b07      	ldr	r3, [sp, #28]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	dc19      	bgt.n	8013ba4 <_dtoa_r+0x904>
 8013b70:	9b02      	ldr	r3, [sp, #8]
 8013b72:	b9bb      	cbnz	r3, 8013ba4 <_dtoa_r+0x904>
 8013b74:	9b03      	ldr	r3, [sp, #12]
 8013b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b7a:	b99b      	cbnz	r3, 8013ba4 <_dtoa_r+0x904>
 8013b7c:	9b03      	ldr	r3, [sp, #12]
 8013b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b82:	0d1b      	lsrs	r3, r3, #20
 8013b84:	051b      	lsls	r3, r3, #20
 8013b86:	b183      	cbz	r3, 8013baa <_dtoa_r+0x90a>
 8013b88:	9b05      	ldr	r3, [sp, #20]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	9305      	str	r3, [sp, #20]
 8013b8e:	9b06      	ldr	r3, [sp, #24]
 8013b90:	3301      	adds	r3, #1
 8013b92:	9306      	str	r3, [sp, #24]
 8013b94:	f04f 0801 	mov.w	r8, #1
 8013b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f47f af6f 	bne.w	8013a7e <_dtoa_r+0x7de>
 8013ba0:	2001      	movs	r0, #1
 8013ba2:	e774      	b.n	8013a8e <_dtoa_r+0x7ee>
 8013ba4:	f04f 0800 	mov.w	r8, #0
 8013ba8:	e7f6      	b.n	8013b98 <_dtoa_r+0x8f8>
 8013baa:	4698      	mov	r8, r3
 8013bac:	e7f4      	b.n	8013b98 <_dtoa_r+0x8f8>
 8013bae:	d082      	beq.n	8013ab6 <_dtoa_r+0x816>
 8013bb0:	9a05      	ldr	r2, [sp, #20]
 8013bb2:	331c      	adds	r3, #28
 8013bb4:	441a      	add	r2, r3
 8013bb6:	9205      	str	r2, [sp, #20]
 8013bb8:	9a06      	ldr	r2, [sp, #24]
 8013bba:	441a      	add	r2, r3
 8013bbc:	441d      	add	r5, r3
 8013bbe:	9206      	str	r2, [sp, #24]
 8013bc0:	e779      	b.n	8013ab6 <_dtoa_r+0x816>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	e7f4      	b.n	8013bb0 <_dtoa_r+0x910>
 8013bc6:	9b04      	ldr	r3, [sp, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	dc37      	bgt.n	8013c3c <_dtoa_r+0x99c>
 8013bcc:	9b07      	ldr	r3, [sp, #28]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	dd34      	ble.n	8013c3c <_dtoa_r+0x99c>
 8013bd2:	9b04      	ldr	r3, [sp, #16]
 8013bd4:	9301      	str	r3, [sp, #4]
 8013bd6:	9b01      	ldr	r3, [sp, #4]
 8013bd8:	b963      	cbnz	r3, 8013bf4 <_dtoa_r+0x954>
 8013bda:	4631      	mov	r1, r6
 8013bdc:	2205      	movs	r2, #5
 8013bde:	4620      	mov	r0, r4
 8013be0:	f000 f9fe 	bl	8013fe0 <__multadd>
 8013be4:	4601      	mov	r1, r0
 8013be6:	4606      	mov	r6, r0
 8013be8:	4650      	mov	r0, sl
 8013bea:	f000 fc5d 	bl	80144a8 <__mcmp>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f73f adbb 	bgt.w	801376a <_dtoa_r+0x4ca>
 8013bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bf6:	9d00      	ldr	r5, [sp, #0]
 8013bf8:	ea6f 0b03 	mvn.w	fp, r3
 8013bfc:	f04f 0800 	mov.w	r8, #0
 8013c00:	4631      	mov	r1, r6
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 f9ca 	bl	8013f9c <_Bfree>
 8013c08:	2f00      	cmp	r7, #0
 8013c0a:	f43f aeab 	beq.w	8013964 <_dtoa_r+0x6c4>
 8013c0e:	f1b8 0f00 	cmp.w	r8, #0
 8013c12:	d005      	beq.n	8013c20 <_dtoa_r+0x980>
 8013c14:	45b8      	cmp	r8, r7
 8013c16:	d003      	beq.n	8013c20 <_dtoa_r+0x980>
 8013c18:	4641      	mov	r1, r8
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 f9be 	bl	8013f9c <_Bfree>
 8013c20:	4639      	mov	r1, r7
 8013c22:	4620      	mov	r0, r4
 8013c24:	f000 f9ba 	bl	8013f9c <_Bfree>
 8013c28:	e69c      	b.n	8013964 <_dtoa_r+0x6c4>
 8013c2a:	2600      	movs	r6, #0
 8013c2c:	4637      	mov	r7, r6
 8013c2e:	e7e1      	b.n	8013bf4 <_dtoa_r+0x954>
 8013c30:	46bb      	mov	fp, r7
 8013c32:	4637      	mov	r7, r6
 8013c34:	e599      	b.n	801376a <_dtoa_r+0x4ca>
 8013c36:	bf00      	nop
 8013c38:	40240000 	.word	0x40240000
 8013c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 80c8 	beq.w	8013dd4 <_dtoa_r+0xb34>
 8013c44:	9b04      	ldr	r3, [sp, #16]
 8013c46:	9301      	str	r3, [sp, #4]
 8013c48:	2d00      	cmp	r5, #0
 8013c4a:	dd05      	ble.n	8013c58 <_dtoa_r+0x9b8>
 8013c4c:	4639      	mov	r1, r7
 8013c4e:	462a      	mov	r2, r5
 8013c50:	4620      	mov	r0, r4
 8013c52:	f000 fbbd 	bl	80143d0 <__lshift>
 8013c56:	4607      	mov	r7, r0
 8013c58:	f1b8 0f00 	cmp.w	r8, #0
 8013c5c:	d05b      	beq.n	8013d16 <_dtoa_r+0xa76>
 8013c5e:	6879      	ldr	r1, [r7, #4]
 8013c60:	4620      	mov	r0, r4
 8013c62:	f000 f95b 	bl	8013f1c <_Balloc>
 8013c66:	4605      	mov	r5, r0
 8013c68:	b928      	cbnz	r0, 8013c76 <_dtoa_r+0x9d6>
 8013c6a:	4b83      	ldr	r3, [pc, #524]	; (8013e78 <_dtoa_r+0xbd8>)
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013c72:	f7ff bb2e 	b.w	80132d2 <_dtoa_r+0x32>
 8013c76:	693a      	ldr	r2, [r7, #16]
 8013c78:	3202      	adds	r2, #2
 8013c7a:	0092      	lsls	r2, r2, #2
 8013c7c:	f107 010c 	add.w	r1, r7, #12
 8013c80:	300c      	adds	r0, #12
 8013c82:	f7ff fa6e 	bl	8013162 <memcpy>
 8013c86:	2201      	movs	r2, #1
 8013c88:	4629      	mov	r1, r5
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f000 fba0 	bl	80143d0 <__lshift>
 8013c90:	9b00      	ldr	r3, [sp, #0]
 8013c92:	3301      	adds	r3, #1
 8013c94:	9304      	str	r3, [sp, #16]
 8013c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	9308      	str	r3, [sp, #32]
 8013c9e:	9b02      	ldr	r3, [sp, #8]
 8013ca0:	f003 0301 	and.w	r3, r3, #1
 8013ca4:	46b8      	mov	r8, r7
 8013ca6:	9306      	str	r3, [sp, #24]
 8013ca8:	4607      	mov	r7, r0
 8013caa:	9b04      	ldr	r3, [sp, #16]
 8013cac:	4631      	mov	r1, r6
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	4650      	mov	r0, sl
 8013cb2:	9301      	str	r3, [sp, #4]
 8013cb4:	f7ff fa6a 	bl	801318c <quorem>
 8013cb8:	4641      	mov	r1, r8
 8013cba:	9002      	str	r0, [sp, #8]
 8013cbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013cc0:	4650      	mov	r0, sl
 8013cc2:	f000 fbf1 	bl	80144a8 <__mcmp>
 8013cc6:	463a      	mov	r2, r7
 8013cc8:	9005      	str	r0, [sp, #20]
 8013cca:	4631      	mov	r1, r6
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f000 fc07 	bl	80144e0 <__mdiff>
 8013cd2:	68c2      	ldr	r2, [r0, #12]
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	bb02      	cbnz	r2, 8013d1a <_dtoa_r+0xa7a>
 8013cd8:	4601      	mov	r1, r0
 8013cda:	4650      	mov	r0, sl
 8013cdc:	f000 fbe4 	bl	80144a8 <__mcmp>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	4629      	mov	r1, r5
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8013ce8:	f000 f958 	bl	8013f9c <_Bfree>
 8013cec:	9b07      	ldr	r3, [sp, #28]
 8013cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cf0:	9d04      	ldr	r5, [sp, #16]
 8013cf2:	ea43 0102 	orr.w	r1, r3, r2
 8013cf6:	9b06      	ldr	r3, [sp, #24]
 8013cf8:	4319      	orrs	r1, r3
 8013cfa:	d110      	bne.n	8013d1e <_dtoa_r+0xa7e>
 8013cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d00:	d029      	beq.n	8013d56 <_dtoa_r+0xab6>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dd02      	ble.n	8013d0e <_dtoa_r+0xa6e>
 8013d08:	9b02      	ldr	r3, [sp, #8]
 8013d0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	f883 9000 	strb.w	r9, [r3]
 8013d14:	e774      	b.n	8013c00 <_dtoa_r+0x960>
 8013d16:	4638      	mov	r0, r7
 8013d18:	e7ba      	b.n	8013c90 <_dtoa_r+0x9f0>
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	e7e1      	b.n	8013ce2 <_dtoa_r+0xa42>
 8013d1e:	9b05      	ldr	r3, [sp, #20]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	db04      	blt.n	8013d2e <_dtoa_r+0xa8e>
 8013d24:	9907      	ldr	r1, [sp, #28]
 8013d26:	430b      	orrs	r3, r1
 8013d28:	9906      	ldr	r1, [sp, #24]
 8013d2a:	430b      	orrs	r3, r1
 8013d2c:	d120      	bne.n	8013d70 <_dtoa_r+0xad0>
 8013d2e:	2a00      	cmp	r2, #0
 8013d30:	dded      	ble.n	8013d0e <_dtoa_r+0xa6e>
 8013d32:	4651      	mov	r1, sl
 8013d34:	2201      	movs	r2, #1
 8013d36:	4620      	mov	r0, r4
 8013d38:	f000 fb4a 	bl	80143d0 <__lshift>
 8013d3c:	4631      	mov	r1, r6
 8013d3e:	4682      	mov	sl, r0
 8013d40:	f000 fbb2 	bl	80144a8 <__mcmp>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	dc03      	bgt.n	8013d50 <_dtoa_r+0xab0>
 8013d48:	d1e1      	bne.n	8013d0e <_dtoa_r+0xa6e>
 8013d4a:	f019 0f01 	tst.w	r9, #1
 8013d4e:	d0de      	beq.n	8013d0e <_dtoa_r+0xa6e>
 8013d50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d54:	d1d8      	bne.n	8013d08 <_dtoa_r+0xa68>
 8013d56:	9a01      	ldr	r2, [sp, #4]
 8013d58:	2339      	movs	r3, #57	; 0x39
 8013d5a:	7013      	strb	r3, [r2, #0]
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	461d      	mov	r5, r3
 8013d60:	3b01      	subs	r3, #1
 8013d62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013d66:	2a39      	cmp	r2, #57	; 0x39
 8013d68:	d06c      	beq.n	8013e44 <_dtoa_r+0xba4>
 8013d6a:	3201      	adds	r2, #1
 8013d6c:	701a      	strb	r2, [r3, #0]
 8013d6e:	e747      	b.n	8013c00 <_dtoa_r+0x960>
 8013d70:	2a00      	cmp	r2, #0
 8013d72:	dd07      	ble.n	8013d84 <_dtoa_r+0xae4>
 8013d74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d78:	d0ed      	beq.n	8013d56 <_dtoa_r+0xab6>
 8013d7a:	9a01      	ldr	r2, [sp, #4]
 8013d7c:	f109 0301 	add.w	r3, r9, #1
 8013d80:	7013      	strb	r3, [r2, #0]
 8013d82:	e73d      	b.n	8013c00 <_dtoa_r+0x960>
 8013d84:	9b04      	ldr	r3, [sp, #16]
 8013d86:	9a08      	ldr	r2, [sp, #32]
 8013d88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d043      	beq.n	8013e18 <_dtoa_r+0xb78>
 8013d90:	4651      	mov	r1, sl
 8013d92:	2300      	movs	r3, #0
 8013d94:	220a      	movs	r2, #10
 8013d96:	4620      	mov	r0, r4
 8013d98:	f000 f922 	bl	8013fe0 <__multadd>
 8013d9c:	45b8      	cmp	r8, r7
 8013d9e:	4682      	mov	sl, r0
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	f04f 020a 	mov.w	r2, #10
 8013da8:	4641      	mov	r1, r8
 8013daa:	4620      	mov	r0, r4
 8013dac:	d107      	bne.n	8013dbe <_dtoa_r+0xb1e>
 8013dae:	f000 f917 	bl	8013fe0 <__multadd>
 8013db2:	4680      	mov	r8, r0
 8013db4:	4607      	mov	r7, r0
 8013db6:	9b04      	ldr	r3, [sp, #16]
 8013db8:	3301      	adds	r3, #1
 8013dba:	9304      	str	r3, [sp, #16]
 8013dbc:	e775      	b.n	8013caa <_dtoa_r+0xa0a>
 8013dbe:	f000 f90f 	bl	8013fe0 <__multadd>
 8013dc2:	4639      	mov	r1, r7
 8013dc4:	4680      	mov	r8, r0
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	220a      	movs	r2, #10
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f000 f908 	bl	8013fe0 <__multadd>
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	e7f0      	b.n	8013db6 <_dtoa_r+0xb16>
 8013dd4:	9b04      	ldr	r3, [sp, #16]
 8013dd6:	9301      	str	r3, [sp, #4]
 8013dd8:	9d00      	ldr	r5, [sp, #0]
 8013dda:	4631      	mov	r1, r6
 8013ddc:	4650      	mov	r0, sl
 8013dde:	f7ff f9d5 	bl	801318c <quorem>
 8013de2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013de6:	9b00      	ldr	r3, [sp, #0]
 8013de8:	f805 9b01 	strb.w	r9, [r5], #1
 8013dec:	1aea      	subs	r2, r5, r3
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	4293      	cmp	r3, r2
 8013df2:	dd07      	ble.n	8013e04 <_dtoa_r+0xb64>
 8013df4:	4651      	mov	r1, sl
 8013df6:	2300      	movs	r3, #0
 8013df8:	220a      	movs	r2, #10
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f000 f8f0 	bl	8013fe0 <__multadd>
 8013e00:	4682      	mov	sl, r0
 8013e02:	e7ea      	b.n	8013dda <_dtoa_r+0xb3a>
 8013e04:	9b01      	ldr	r3, [sp, #4]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	bfc8      	it	gt
 8013e0a:	461d      	movgt	r5, r3
 8013e0c:	9b00      	ldr	r3, [sp, #0]
 8013e0e:	bfd8      	it	le
 8013e10:	2501      	movle	r5, #1
 8013e12:	441d      	add	r5, r3
 8013e14:	f04f 0800 	mov.w	r8, #0
 8013e18:	4651      	mov	r1, sl
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f000 fad7 	bl	80143d0 <__lshift>
 8013e22:	4631      	mov	r1, r6
 8013e24:	4682      	mov	sl, r0
 8013e26:	f000 fb3f 	bl	80144a8 <__mcmp>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	dc96      	bgt.n	8013d5c <_dtoa_r+0xabc>
 8013e2e:	d102      	bne.n	8013e36 <_dtoa_r+0xb96>
 8013e30:	f019 0f01 	tst.w	r9, #1
 8013e34:	d192      	bne.n	8013d5c <_dtoa_r+0xabc>
 8013e36:	462b      	mov	r3, r5
 8013e38:	461d      	mov	r5, r3
 8013e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e3e:	2a30      	cmp	r2, #48	; 0x30
 8013e40:	d0fa      	beq.n	8013e38 <_dtoa_r+0xb98>
 8013e42:	e6dd      	b.n	8013c00 <_dtoa_r+0x960>
 8013e44:	9a00      	ldr	r2, [sp, #0]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d189      	bne.n	8013d5e <_dtoa_r+0xabe>
 8013e4a:	f10b 0b01 	add.w	fp, fp, #1
 8013e4e:	2331      	movs	r3, #49	; 0x31
 8013e50:	e796      	b.n	8013d80 <_dtoa_r+0xae0>
 8013e52:	4b0a      	ldr	r3, [pc, #40]	; (8013e7c <_dtoa_r+0xbdc>)
 8013e54:	f7ff ba99 	b.w	801338a <_dtoa_r+0xea>
 8013e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f47f aa6d 	bne.w	801333a <_dtoa_r+0x9a>
 8013e60:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <_dtoa_r+0xbe0>)
 8013e62:	f7ff ba92 	b.w	801338a <_dtoa_r+0xea>
 8013e66:	9b01      	ldr	r3, [sp, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	dcb5      	bgt.n	8013dd8 <_dtoa_r+0xb38>
 8013e6c:	9b07      	ldr	r3, [sp, #28]
 8013e6e:	2b02      	cmp	r3, #2
 8013e70:	f73f aeb1 	bgt.w	8013bd6 <_dtoa_r+0x936>
 8013e74:	e7b0      	b.n	8013dd8 <_dtoa_r+0xb38>
 8013e76:	bf00      	nop
 8013e78:	080463cd 	.word	0x080463cd
 8013e7c:	08046328 	.word	0x08046328
 8013e80:	08046351 	.word	0x08046351

08013e84 <_free_r>:
 8013e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e86:	2900      	cmp	r1, #0
 8013e88:	d044      	beq.n	8013f14 <_free_r+0x90>
 8013e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e8e:	9001      	str	r0, [sp, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	f1a1 0404 	sub.w	r4, r1, #4
 8013e96:	bfb8      	it	lt
 8013e98:	18e4      	addlt	r4, r4, r3
 8013e9a:	f7fd ffc5 	bl	8011e28 <__malloc_lock>
 8013e9e:	4a1e      	ldr	r2, [pc, #120]	; (8013f18 <_free_r+0x94>)
 8013ea0:	9801      	ldr	r0, [sp, #4]
 8013ea2:	6813      	ldr	r3, [r2, #0]
 8013ea4:	b933      	cbnz	r3, 8013eb4 <_free_r+0x30>
 8013ea6:	6063      	str	r3, [r4, #4]
 8013ea8:	6014      	str	r4, [r2, #0]
 8013eaa:	b003      	add	sp, #12
 8013eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013eb0:	f7fd bfc0 	b.w	8011e34 <__malloc_unlock>
 8013eb4:	42a3      	cmp	r3, r4
 8013eb6:	d908      	bls.n	8013eca <_free_r+0x46>
 8013eb8:	6825      	ldr	r5, [r4, #0]
 8013eba:	1961      	adds	r1, r4, r5
 8013ebc:	428b      	cmp	r3, r1
 8013ebe:	bf01      	itttt	eq
 8013ec0:	6819      	ldreq	r1, [r3, #0]
 8013ec2:	685b      	ldreq	r3, [r3, #4]
 8013ec4:	1949      	addeq	r1, r1, r5
 8013ec6:	6021      	streq	r1, [r4, #0]
 8013ec8:	e7ed      	b.n	8013ea6 <_free_r+0x22>
 8013eca:	461a      	mov	r2, r3
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	b10b      	cbz	r3, 8013ed4 <_free_r+0x50>
 8013ed0:	42a3      	cmp	r3, r4
 8013ed2:	d9fa      	bls.n	8013eca <_free_r+0x46>
 8013ed4:	6811      	ldr	r1, [r2, #0]
 8013ed6:	1855      	adds	r5, r2, r1
 8013ed8:	42a5      	cmp	r5, r4
 8013eda:	d10b      	bne.n	8013ef4 <_free_r+0x70>
 8013edc:	6824      	ldr	r4, [r4, #0]
 8013ede:	4421      	add	r1, r4
 8013ee0:	1854      	adds	r4, r2, r1
 8013ee2:	42a3      	cmp	r3, r4
 8013ee4:	6011      	str	r1, [r2, #0]
 8013ee6:	d1e0      	bne.n	8013eaa <_free_r+0x26>
 8013ee8:	681c      	ldr	r4, [r3, #0]
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	6053      	str	r3, [r2, #4]
 8013eee:	440c      	add	r4, r1
 8013ef0:	6014      	str	r4, [r2, #0]
 8013ef2:	e7da      	b.n	8013eaa <_free_r+0x26>
 8013ef4:	d902      	bls.n	8013efc <_free_r+0x78>
 8013ef6:	230c      	movs	r3, #12
 8013ef8:	6003      	str	r3, [r0, #0]
 8013efa:	e7d6      	b.n	8013eaa <_free_r+0x26>
 8013efc:	6825      	ldr	r5, [r4, #0]
 8013efe:	1961      	adds	r1, r4, r5
 8013f00:	428b      	cmp	r3, r1
 8013f02:	bf04      	itt	eq
 8013f04:	6819      	ldreq	r1, [r3, #0]
 8013f06:	685b      	ldreq	r3, [r3, #4]
 8013f08:	6063      	str	r3, [r4, #4]
 8013f0a:	bf04      	itt	eq
 8013f0c:	1949      	addeq	r1, r1, r5
 8013f0e:	6021      	streq	r1, [r4, #0]
 8013f10:	6054      	str	r4, [r2, #4]
 8013f12:	e7ca      	b.n	8013eaa <_free_r+0x26>
 8013f14:	b003      	add	sp, #12
 8013f16:	bd30      	pop	{r4, r5, pc}
 8013f18:	20005ba8 	.word	0x20005ba8

08013f1c <_Balloc>:
 8013f1c:	b570      	push	{r4, r5, r6, lr}
 8013f1e:	69c6      	ldr	r6, [r0, #28]
 8013f20:	4604      	mov	r4, r0
 8013f22:	460d      	mov	r5, r1
 8013f24:	b976      	cbnz	r6, 8013f44 <_Balloc+0x28>
 8013f26:	2010      	movs	r0, #16
 8013f28:	f7fd fece 	bl	8011cc8 <malloc>
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	61e0      	str	r0, [r4, #28]
 8013f30:	b920      	cbnz	r0, 8013f3c <_Balloc+0x20>
 8013f32:	4b18      	ldr	r3, [pc, #96]	; (8013f94 <_Balloc+0x78>)
 8013f34:	4818      	ldr	r0, [pc, #96]	; (8013f98 <_Balloc+0x7c>)
 8013f36:	216b      	movs	r1, #107	; 0x6b
 8013f38:	f001 ff3e 	bl	8015db8 <__assert_func>
 8013f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f40:	6006      	str	r6, [r0, #0]
 8013f42:	60c6      	str	r6, [r0, #12]
 8013f44:	69e6      	ldr	r6, [r4, #28]
 8013f46:	68f3      	ldr	r3, [r6, #12]
 8013f48:	b183      	cbz	r3, 8013f6c <_Balloc+0x50>
 8013f4a:	69e3      	ldr	r3, [r4, #28]
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013f52:	b9b8      	cbnz	r0, 8013f84 <_Balloc+0x68>
 8013f54:	2101      	movs	r1, #1
 8013f56:	fa01 f605 	lsl.w	r6, r1, r5
 8013f5a:	1d72      	adds	r2, r6, #5
 8013f5c:	0092      	lsls	r2, r2, #2
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f001 ff48 	bl	8015df4 <_calloc_r>
 8013f64:	b160      	cbz	r0, 8013f80 <_Balloc+0x64>
 8013f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013f6a:	e00e      	b.n	8013f8a <_Balloc+0x6e>
 8013f6c:	2221      	movs	r2, #33	; 0x21
 8013f6e:	2104      	movs	r1, #4
 8013f70:	4620      	mov	r0, r4
 8013f72:	f001 ff3f 	bl	8015df4 <_calloc_r>
 8013f76:	69e3      	ldr	r3, [r4, #28]
 8013f78:	60f0      	str	r0, [r6, #12]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1e4      	bne.n	8013f4a <_Balloc+0x2e>
 8013f80:	2000      	movs	r0, #0
 8013f82:	bd70      	pop	{r4, r5, r6, pc}
 8013f84:	6802      	ldr	r2, [r0, #0]
 8013f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f90:	e7f7      	b.n	8013f82 <_Balloc+0x66>
 8013f92:	bf00      	nop
 8013f94:	0804635e 	.word	0x0804635e
 8013f98:	080463de 	.word	0x080463de

08013f9c <_Bfree>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	69c6      	ldr	r6, [r0, #28]
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	b976      	cbnz	r6, 8013fc4 <_Bfree+0x28>
 8013fa6:	2010      	movs	r0, #16
 8013fa8:	f7fd fe8e 	bl	8011cc8 <malloc>
 8013fac:	4602      	mov	r2, r0
 8013fae:	61e8      	str	r0, [r5, #28]
 8013fb0:	b920      	cbnz	r0, 8013fbc <_Bfree+0x20>
 8013fb2:	4b09      	ldr	r3, [pc, #36]	; (8013fd8 <_Bfree+0x3c>)
 8013fb4:	4809      	ldr	r0, [pc, #36]	; (8013fdc <_Bfree+0x40>)
 8013fb6:	218f      	movs	r1, #143	; 0x8f
 8013fb8:	f001 fefe 	bl	8015db8 <__assert_func>
 8013fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013fc0:	6006      	str	r6, [r0, #0]
 8013fc2:	60c6      	str	r6, [r0, #12]
 8013fc4:	b13c      	cbz	r4, 8013fd6 <_Bfree+0x3a>
 8013fc6:	69eb      	ldr	r3, [r5, #28]
 8013fc8:	6862      	ldr	r2, [r4, #4]
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013fd0:	6021      	str	r1, [r4, #0]
 8013fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013fd6:	bd70      	pop	{r4, r5, r6, pc}
 8013fd8:	0804635e 	.word	0x0804635e
 8013fdc:	080463de 	.word	0x080463de

08013fe0 <__multadd>:
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	690d      	ldr	r5, [r1, #16]
 8013fe6:	4607      	mov	r7, r0
 8013fe8:	460c      	mov	r4, r1
 8013fea:	461e      	mov	r6, r3
 8013fec:	f101 0c14 	add.w	ip, r1, #20
 8013ff0:	2000      	movs	r0, #0
 8013ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ff6:	b299      	uxth	r1, r3
 8013ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8013ffc:	0c1e      	lsrs	r6, r3, #16
 8013ffe:	0c0b      	lsrs	r3, r1, #16
 8014000:	fb02 3306 	mla	r3, r2, r6, r3
 8014004:	b289      	uxth	r1, r1
 8014006:	3001      	adds	r0, #1
 8014008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801400c:	4285      	cmp	r5, r0
 801400e:	f84c 1b04 	str.w	r1, [ip], #4
 8014012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014016:	dcec      	bgt.n	8013ff2 <__multadd+0x12>
 8014018:	b30e      	cbz	r6, 801405e <__multadd+0x7e>
 801401a:	68a3      	ldr	r3, [r4, #8]
 801401c:	42ab      	cmp	r3, r5
 801401e:	dc19      	bgt.n	8014054 <__multadd+0x74>
 8014020:	6861      	ldr	r1, [r4, #4]
 8014022:	4638      	mov	r0, r7
 8014024:	3101      	adds	r1, #1
 8014026:	f7ff ff79 	bl	8013f1c <_Balloc>
 801402a:	4680      	mov	r8, r0
 801402c:	b928      	cbnz	r0, 801403a <__multadd+0x5a>
 801402e:	4602      	mov	r2, r0
 8014030:	4b0c      	ldr	r3, [pc, #48]	; (8014064 <__multadd+0x84>)
 8014032:	480d      	ldr	r0, [pc, #52]	; (8014068 <__multadd+0x88>)
 8014034:	21ba      	movs	r1, #186	; 0xba
 8014036:	f001 febf 	bl	8015db8 <__assert_func>
 801403a:	6922      	ldr	r2, [r4, #16]
 801403c:	3202      	adds	r2, #2
 801403e:	f104 010c 	add.w	r1, r4, #12
 8014042:	0092      	lsls	r2, r2, #2
 8014044:	300c      	adds	r0, #12
 8014046:	f7ff f88c 	bl	8013162 <memcpy>
 801404a:	4621      	mov	r1, r4
 801404c:	4638      	mov	r0, r7
 801404e:	f7ff ffa5 	bl	8013f9c <_Bfree>
 8014052:	4644      	mov	r4, r8
 8014054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014058:	3501      	adds	r5, #1
 801405a:	615e      	str	r6, [r3, #20]
 801405c:	6125      	str	r5, [r4, #16]
 801405e:	4620      	mov	r0, r4
 8014060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014064:	080463cd 	.word	0x080463cd
 8014068:	080463de 	.word	0x080463de

0801406c <__s2b>:
 801406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014070:	460c      	mov	r4, r1
 8014072:	4615      	mov	r5, r2
 8014074:	461f      	mov	r7, r3
 8014076:	2209      	movs	r2, #9
 8014078:	3308      	adds	r3, #8
 801407a:	4606      	mov	r6, r0
 801407c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014080:	2100      	movs	r1, #0
 8014082:	2201      	movs	r2, #1
 8014084:	429a      	cmp	r2, r3
 8014086:	db09      	blt.n	801409c <__s2b+0x30>
 8014088:	4630      	mov	r0, r6
 801408a:	f7ff ff47 	bl	8013f1c <_Balloc>
 801408e:	b940      	cbnz	r0, 80140a2 <__s2b+0x36>
 8014090:	4602      	mov	r2, r0
 8014092:	4b19      	ldr	r3, [pc, #100]	; (80140f8 <__s2b+0x8c>)
 8014094:	4819      	ldr	r0, [pc, #100]	; (80140fc <__s2b+0x90>)
 8014096:	21d3      	movs	r1, #211	; 0xd3
 8014098:	f001 fe8e 	bl	8015db8 <__assert_func>
 801409c:	0052      	lsls	r2, r2, #1
 801409e:	3101      	adds	r1, #1
 80140a0:	e7f0      	b.n	8014084 <__s2b+0x18>
 80140a2:	9b08      	ldr	r3, [sp, #32]
 80140a4:	6143      	str	r3, [r0, #20]
 80140a6:	2d09      	cmp	r5, #9
 80140a8:	f04f 0301 	mov.w	r3, #1
 80140ac:	6103      	str	r3, [r0, #16]
 80140ae:	dd16      	ble.n	80140de <__s2b+0x72>
 80140b0:	f104 0909 	add.w	r9, r4, #9
 80140b4:	46c8      	mov	r8, r9
 80140b6:	442c      	add	r4, r5
 80140b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80140bc:	4601      	mov	r1, r0
 80140be:	3b30      	subs	r3, #48	; 0x30
 80140c0:	220a      	movs	r2, #10
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7ff ff8c 	bl	8013fe0 <__multadd>
 80140c8:	45a0      	cmp	r8, r4
 80140ca:	d1f5      	bne.n	80140b8 <__s2b+0x4c>
 80140cc:	f1a5 0408 	sub.w	r4, r5, #8
 80140d0:	444c      	add	r4, r9
 80140d2:	1b2d      	subs	r5, r5, r4
 80140d4:	1963      	adds	r3, r4, r5
 80140d6:	42bb      	cmp	r3, r7
 80140d8:	db04      	blt.n	80140e4 <__s2b+0x78>
 80140da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140de:	340a      	adds	r4, #10
 80140e0:	2509      	movs	r5, #9
 80140e2:	e7f6      	b.n	80140d2 <__s2b+0x66>
 80140e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80140e8:	4601      	mov	r1, r0
 80140ea:	3b30      	subs	r3, #48	; 0x30
 80140ec:	220a      	movs	r2, #10
 80140ee:	4630      	mov	r0, r6
 80140f0:	f7ff ff76 	bl	8013fe0 <__multadd>
 80140f4:	e7ee      	b.n	80140d4 <__s2b+0x68>
 80140f6:	bf00      	nop
 80140f8:	080463cd 	.word	0x080463cd
 80140fc:	080463de 	.word	0x080463de

08014100 <__hi0bits>:
 8014100:	0c03      	lsrs	r3, r0, #16
 8014102:	041b      	lsls	r3, r3, #16
 8014104:	b9d3      	cbnz	r3, 801413c <__hi0bits+0x3c>
 8014106:	0400      	lsls	r0, r0, #16
 8014108:	2310      	movs	r3, #16
 801410a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801410e:	bf04      	itt	eq
 8014110:	0200      	lsleq	r0, r0, #8
 8014112:	3308      	addeq	r3, #8
 8014114:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014118:	bf04      	itt	eq
 801411a:	0100      	lsleq	r0, r0, #4
 801411c:	3304      	addeq	r3, #4
 801411e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014122:	bf04      	itt	eq
 8014124:	0080      	lsleq	r0, r0, #2
 8014126:	3302      	addeq	r3, #2
 8014128:	2800      	cmp	r0, #0
 801412a:	db05      	blt.n	8014138 <__hi0bits+0x38>
 801412c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014130:	f103 0301 	add.w	r3, r3, #1
 8014134:	bf08      	it	eq
 8014136:	2320      	moveq	r3, #32
 8014138:	4618      	mov	r0, r3
 801413a:	4770      	bx	lr
 801413c:	2300      	movs	r3, #0
 801413e:	e7e4      	b.n	801410a <__hi0bits+0xa>

08014140 <__lo0bits>:
 8014140:	6803      	ldr	r3, [r0, #0]
 8014142:	f013 0207 	ands.w	r2, r3, #7
 8014146:	d00c      	beq.n	8014162 <__lo0bits+0x22>
 8014148:	07d9      	lsls	r1, r3, #31
 801414a:	d422      	bmi.n	8014192 <__lo0bits+0x52>
 801414c:	079a      	lsls	r2, r3, #30
 801414e:	bf49      	itett	mi
 8014150:	085b      	lsrmi	r3, r3, #1
 8014152:	089b      	lsrpl	r3, r3, #2
 8014154:	6003      	strmi	r3, [r0, #0]
 8014156:	2201      	movmi	r2, #1
 8014158:	bf5c      	itt	pl
 801415a:	6003      	strpl	r3, [r0, #0]
 801415c:	2202      	movpl	r2, #2
 801415e:	4610      	mov	r0, r2
 8014160:	4770      	bx	lr
 8014162:	b299      	uxth	r1, r3
 8014164:	b909      	cbnz	r1, 801416a <__lo0bits+0x2a>
 8014166:	0c1b      	lsrs	r3, r3, #16
 8014168:	2210      	movs	r2, #16
 801416a:	b2d9      	uxtb	r1, r3
 801416c:	b909      	cbnz	r1, 8014172 <__lo0bits+0x32>
 801416e:	3208      	adds	r2, #8
 8014170:	0a1b      	lsrs	r3, r3, #8
 8014172:	0719      	lsls	r1, r3, #28
 8014174:	bf04      	itt	eq
 8014176:	091b      	lsreq	r3, r3, #4
 8014178:	3204      	addeq	r2, #4
 801417a:	0799      	lsls	r1, r3, #30
 801417c:	bf04      	itt	eq
 801417e:	089b      	lsreq	r3, r3, #2
 8014180:	3202      	addeq	r2, #2
 8014182:	07d9      	lsls	r1, r3, #31
 8014184:	d403      	bmi.n	801418e <__lo0bits+0x4e>
 8014186:	085b      	lsrs	r3, r3, #1
 8014188:	f102 0201 	add.w	r2, r2, #1
 801418c:	d003      	beq.n	8014196 <__lo0bits+0x56>
 801418e:	6003      	str	r3, [r0, #0]
 8014190:	e7e5      	b.n	801415e <__lo0bits+0x1e>
 8014192:	2200      	movs	r2, #0
 8014194:	e7e3      	b.n	801415e <__lo0bits+0x1e>
 8014196:	2220      	movs	r2, #32
 8014198:	e7e1      	b.n	801415e <__lo0bits+0x1e>
	...

0801419c <__i2b>:
 801419c:	b510      	push	{r4, lr}
 801419e:	460c      	mov	r4, r1
 80141a0:	2101      	movs	r1, #1
 80141a2:	f7ff febb 	bl	8013f1c <_Balloc>
 80141a6:	4602      	mov	r2, r0
 80141a8:	b928      	cbnz	r0, 80141b6 <__i2b+0x1a>
 80141aa:	4b05      	ldr	r3, [pc, #20]	; (80141c0 <__i2b+0x24>)
 80141ac:	4805      	ldr	r0, [pc, #20]	; (80141c4 <__i2b+0x28>)
 80141ae:	f240 1145 	movw	r1, #325	; 0x145
 80141b2:	f001 fe01 	bl	8015db8 <__assert_func>
 80141b6:	2301      	movs	r3, #1
 80141b8:	6144      	str	r4, [r0, #20]
 80141ba:	6103      	str	r3, [r0, #16]
 80141bc:	bd10      	pop	{r4, pc}
 80141be:	bf00      	nop
 80141c0:	080463cd 	.word	0x080463cd
 80141c4:	080463de 	.word	0x080463de

080141c8 <__multiply>:
 80141c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141cc:	4691      	mov	r9, r2
 80141ce:	690a      	ldr	r2, [r1, #16]
 80141d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	bfb8      	it	lt
 80141d8:	460b      	movlt	r3, r1
 80141da:	460c      	mov	r4, r1
 80141dc:	bfbc      	itt	lt
 80141de:	464c      	movlt	r4, r9
 80141e0:	4699      	movlt	r9, r3
 80141e2:	6927      	ldr	r7, [r4, #16]
 80141e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80141e8:	68a3      	ldr	r3, [r4, #8]
 80141ea:	6861      	ldr	r1, [r4, #4]
 80141ec:	eb07 060a 	add.w	r6, r7, sl
 80141f0:	42b3      	cmp	r3, r6
 80141f2:	b085      	sub	sp, #20
 80141f4:	bfb8      	it	lt
 80141f6:	3101      	addlt	r1, #1
 80141f8:	f7ff fe90 	bl	8013f1c <_Balloc>
 80141fc:	b930      	cbnz	r0, 801420c <__multiply+0x44>
 80141fe:	4602      	mov	r2, r0
 8014200:	4b44      	ldr	r3, [pc, #272]	; (8014314 <__multiply+0x14c>)
 8014202:	4845      	ldr	r0, [pc, #276]	; (8014318 <__multiply+0x150>)
 8014204:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014208:	f001 fdd6 	bl	8015db8 <__assert_func>
 801420c:	f100 0514 	add.w	r5, r0, #20
 8014210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014214:	462b      	mov	r3, r5
 8014216:	2200      	movs	r2, #0
 8014218:	4543      	cmp	r3, r8
 801421a:	d321      	bcc.n	8014260 <__multiply+0x98>
 801421c:	f104 0314 	add.w	r3, r4, #20
 8014220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014224:	f109 0314 	add.w	r3, r9, #20
 8014228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801422c:	9202      	str	r2, [sp, #8]
 801422e:	1b3a      	subs	r2, r7, r4
 8014230:	3a15      	subs	r2, #21
 8014232:	f022 0203 	bic.w	r2, r2, #3
 8014236:	3204      	adds	r2, #4
 8014238:	f104 0115 	add.w	r1, r4, #21
 801423c:	428f      	cmp	r7, r1
 801423e:	bf38      	it	cc
 8014240:	2204      	movcc	r2, #4
 8014242:	9201      	str	r2, [sp, #4]
 8014244:	9a02      	ldr	r2, [sp, #8]
 8014246:	9303      	str	r3, [sp, #12]
 8014248:	429a      	cmp	r2, r3
 801424a:	d80c      	bhi.n	8014266 <__multiply+0x9e>
 801424c:	2e00      	cmp	r6, #0
 801424e:	dd03      	ble.n	8014258 <__multiply+0x90>
 8014250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014254:	2b00      	cmp	r3, #0
 8014256:	d05b      	beq.n	8014310 <__multiply+0x148>
 8014258:	6106      	str	r6, [r0, #16]
 801425a:	b005      	add	sp, #20
 801425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014260:	f843 2b04 	str.w	r2, [r3], #4
 8014264:	e7d8      	b.n	8014218 <__multiply+0x50>
 8014266:	f8b3 a000 	ldrh.w	sl, [r3]
 801426a:	f1ba 0f00 	cmp.w	sl, #0
 801426e:	d024      	beq.n	80142ba <__multiply+0xf2>
 8014270:	f104 0e14 	add.w	lr, r4, #20
 8014274:	46a9      	mov	r9, r5
 8014276:	f04f 0c00 	mov.w	ip, #0
 801427a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801427e:	f8d9 1000 	ldr.w	r1, [r9]
 8014282:	fa1f fb82 	uxth.w	fp, r2
 8014286:	b289      	uxth	r1, r1
 8014288:	fb0a 110b 	mla	r1, sl, fp, r1
 801428c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014290:	f8d9 2000 	ldr.w	r2, [r9]
 8014294:	4461      	add	r1, ip
 8014296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801429a:	fb0a c20b 	mla	r2, sl, fp, ip
 801429e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80142a2:	b289      	uxth	r1, r1
 80142a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80142a8:	4577      	cmp	r7, lr
 80142aa:	f849 1b04 	str.w	r1, [r9], #4
 80142ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80142b2:	d8e2      	bhi.n	801427a <__multiply+0xb2>
 80142b4:	9a01      	ldr	r2, [sp, #4]
 80142b6:	f845 c002 	str.w	ip, [r5, r2]
 80142ba:	9a03      	ldr	r2, [sp, #12]
 80142bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80142c0:	3304      	adds	r3, #4
 80142c2:	f1b9 0f00 	cmp.w	r9, #0
 80142c6:	d021      	beq.n	801430c <__multiply+0x144>
 80142c8:	6829      	ldr	r1, [r5, #0]
 80142ca:	f104 0c14 	add.w	ip, r4, #20
 80142ce:	46ae      	mov	lr, r5
 80142d0:	f04f 0a00 	mov.w	sl, #0
 80142d4:	f8bc b000 	ldrh.w	fp, [ip]
 80142d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80142dc:	fb09 220b 	mla	r2, r9, fp, r2
 80142e0:	4452      	add	r2, sl
 80142e2:	b289      	uxth	r1, r1
 80142e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80142e8:	f84e 1b04 	str.w	r1, [lr], #4
 80142ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80142f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80142f4:	f8be 1000 	ldrh.w	r1, [lr]
 80142f8:	fb09 110a 	mla	r1, r9, sl, r1
 80142fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014300:	4567      	cmp	r7, ip
 8014302:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014306:	d8e5      	bhi.n	80142d4 <__multiply+0x10c>
 8014308:	9a01      	ldr	r2, [sp, #4]
 801430a:	50a9      	str	r1, [r5, r2]
 801430c:	3504      	adds	r5, #4
 801430e:	e799      	b.n	8014244 <__multiply+0x7c>
 8014310:	3e01      	subs	r6, #1
 8014312:	e79b      	b.n	801424c <__multiply+0x84>
 8014314:	080463cd 	.word	0x080463cd
 8014318:	080463de 	.word	0x080463de

0801431c <__pow5mult>:
 801431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014320:	4615      	mov	r5, r2
 8014322:	f012 0203 	ands.w	r2, r2, #3
 8014326:	4606      	mov	r6, r0
 8014328:	460f      	mov	r7, r1
 801432a:	d007      	beq.n	801433c <__pow5mult+0x20>
 801432c:	4c25      	ldr	r4, [pc, #148]	; (80143c4 <__pow5mult+0xa8>)
 801432e:	3a01      	subs	r2, #1
 8014330:	2300      	movs	r3, #0
 8014332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014336:	f7ff fe53 	bl	8013fe0 <__multadd>
 801433a:	4607      	mov	r7, r0
 801433c:	10ad      	asrs	r5, r5, #2
 801433e:	d03d      	beq.n	80143bc <__pow5mult+0xa0>
 8014340:	69f4      	ldr	r4, [r6, #28]
 8014342:	b97c      	cbnz	r4, 8014364 <__pow5mult+0x48>
 8014344:	2010      	movs	r0, #16
 8014346:	f7fd fcbf 	bl	8011cc8 <malloc>
 801434a:	4602      	mov	r2, r0
 801434c:	61f0      	str	r0, [r6, #28]
 801434e:	b928      	cbnz	r0, 801435c <__pow5mult+0x40>
 8014350:	4b1d      	ldr	r3, [pc, #116]	; (80143c8 <__pow5mult+0xac>)
 8014352:	481e      	ldr	r0, [pc, #120]	; (80143cc <__pow5mult+0xb0>)
 8014354:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014358:	f001 fd2e 	bl	8015db8 <__assert_func>
 801435c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014360:	6004      	str	r4, [r0, #0]
 8014362:	60c4      	str	r4, [r0, #12]
 8014364:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801436c:	b94c      	cbnz	r4, 8014382 <__pow5mult+0x66>
 801436e:	f240 2171 	movw	r1, #625	; 0x271
 8014372:	4630      	mov	r0, r6
 8014374:	f7ff ff12 	bl	801419c <__i2b>
 8014378:	2300      	movs	r3, #0
 801437a:	f8c8 0008 	str.w	r0, [r8, #8]
 801437e:	4604      	mov	r4, r0
 8014380:	6003      	str	r3, [r0, #0]
 8014382:	f04f 0900 	mov.w	r9, #0
 8014386:	07eb      	lsls	r3, r5, #31
 8014388:	d50a      	bpl.n	80143a0 <__pow5mult+0x84>
 801438a:	4639      	mov	r1, r7
 801438c:	4622      	mov	r2, r4
 801438e:	4630      	mov	r0, r6
 8014390:	f7ff ff1a 	bl	80141c8 <__multiply>
 8014394:	4639      	mov	r1, r7
 8014396:	4680      	mov	r8, r0
 8014398:	4630      	mov	r0, r6
 801439a:	f7ff fdff 	bl	8013f9c <_Bfree>
 801439e:	4647      	mov	r7, r8
 80143a0:	106d      	asrs	r5, r5, #1
 80143a2:	d00b      	beq.n	80143bc <__pow5mult+0xa0>
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	b938      	cbnz	r0, 80143b8 <__pow5mult+0x9c>
 80143a8:	4622      	mov	r2, r4
 80143aa:	4621      	mov	r1, r4
 80143ac:	4630      	mov	r0, r6
 80143ae:	f7ff ff0b 	bl	80141c8 <__multiply>
 80143b2:	6020      	str	r0, [r4, #0]
 80143b4:	f8c0 9000 	str.w	r9, [r0]
 80143b8:	4604      	mov	r4, r0
 80143ba:	e7e4      	b.n	8014386 <__pow5mult+0x6a>
 80143bc:	4638      	mov	r0, r7
 80143be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143c2:	bf00      	nop
 80143c4:	08046528 	.word	0x08046528
 80143c8:	0804635e 	.word	0x0804635e
 80143cc:	080463de 	.word	0x080463de

080143d0 <__lshift>:
 80143d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143d4:	460c      	mov	r4, r1
 80143d6:	6849      	ldr	r1, [r1, #4]
 80143d8:	6923      	ldr	r3, [r4, #16]
 80143da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80143de:	68a3      	ldr	r3, [r4, #8]
 80143e0:	4607      	mov	r7, r0
 80143e2:	4691      	mov	r9, r2
 80143e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80143e8:	f108 0601 	add.w	r6, r8, #1
 80143ec:	42b3      	cmp	r3, r6
 80143ee:	db0b      	blt.n	8014408 <__lshift+0x38>
 80143f0:	4638      	mov	r0, r7
 80143f2:	f7ff fd93 	bl	8013f1c <_Balloc>
 80143f6:	4605      	mov	r5, r0
 80143f8:	b948      	cbnz	r0, 801440e <__lshift+0x3e>
 80143fa:	4602      	mov	r2, r0
 80143fc:	4b28      	ldr	r3, [pc, #160]	; (80144a0 <__lshift+0xd0>)
 80143fe:	4829      	ldr	r0, [pc, #164]	; (80144a4 <__lshift+0xd4>)
 8014400:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014404:	f001 fcd8 	bl	8015db8 <__assert_func>
 8014408:	3101      	adds	r1, #1
 801440a:	005b      	lsls	r3, r3, #1
 801440c:	e7ee      	b.n	80143ec <__lshift+0x1c>
 801440e:	2300      	movs	r3, #0
 8014410:	f100 0114 	add.w	r1, r0, #20
 8014414:	f100 0210 	add.w	r2, r0, #16
 8014418:	4618      	mov	r0, r3
 801441a:	4553      	cmp	r3, sl
 801441c:	db33      	blt.n	8014486 <__lshift+0xb6>
 801441e:	6920      	ldr	r0, [r4, #16]
 8014420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014424:	f104 0314 	add.w	r3, r4, #20
 8014428:	f019 091f 	ands.w	r9, r9, #31
 801442c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014434:	d02b      	beq.n	801448e <__lshift+0xbe>
 8014436:	f1c9 0e20 	rsb	lr, r9, #32
 801443a:	468a      	mov	sl, r1
 801443c:	2200      	movs	r2, #0
 801443e:	6818      	ldr	r0, [r3, #0]
 8014440:	fa00 f009 	lsl.w	r0, r0, r9
 8014444:	4310      	orrs	r0, r2
 8014446:	f84a 0b04 	str.w	r0, [sl], #4
 801444a:	f853 2b04 	ldr.w	r2, [r3], #4
 801444e:	459c      	cmp	ip, r3
 8014450:	fa22 f20e 	lsr.w	r2, r2, lr
 8014454:	d8f3      	bhi.n	801443e <__lshift+0x6e>
 8014456:	ebac 0304 	sub.w	r3, ip, r4
 801445a:	3b15      	subs	r3, #21
 801445c:	f023 0303 	bic.w	r3, r3, #3
 8014460:	3304      	adds	r3, #4
 8014462:	f104 0015 	add.w	r0, r4, #21
 8014466:	4584      	cmp	ip, r0
 8014468:	bf38      	it	cc
 801446a:	2304      	movcc	r3, #4
 801446c:	50ca      	str	r2, [r1, r3]
 801446e:	b10a      	cbz	r2, 8014474 <__lshift+0xa4>
 8014470:	f108 0602 	add.w	r6, r8, #2
 8014474:	3e01      	subs	r6, #1
 8014476:	4638      	mov	r0, r7
 8014478:	612e      	str	r6, [r5, #16]
 801447a:	4621      	mov	r1, r4
 801447c:	f7ff fd8e 	bl	8013f9c <_Bfree>
 8014480:	4628      	mov	r0, r5
 8014482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014486:	f842 0f04 	str.w	r0, [r2, #4]!
 801448a:	3301      	adds	r3, #1
 801448c:	e7c5      	b.n	801441a <__lshift+0x4a>
 801448e:	3904      	subs	r1, #4
 8014490:	f853 2b04 	ldr.w	r2, [r3], #4
 8014494:	f841 2f04 	str.w	r2, [r1, #4]!
 8014498:	459c      	cmp	ip, r3
 801449a:	d8f9      	bhi.n	8014490 <__lshift+0xc0>
 801449c:	e7ea      	b.n	8014474 <__lshift+0xa4>
 801449e:	bf00      	nop
 80144a0:	080463cd 	.word	0x080463cd
 80144a4:	080463de 	.word	0x080463de

080144a8 <__mcmp>:
 80144a8:	b530      	push	{r4, r5, lr}
 80144aa:	6902      	ldr	r2, [r0, #16]
 80144ac:	690c      	ldr	r4, [r1, #16]
 80144ae:	1b12      	subs	r2, r2, r4
 80144b0:	d10e      	bne.n	80144d0 <__mcmp+0x28>
 80144b2:	f100 0314 	add.w	r3, r0, #20
 80144b6:	3114      	adds	r1, #20
 80144b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80144bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80144c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80144c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80144c8:	42a5      	cmp	r5, r4
 80144ca:	d003      	beq.n	80144d4 <__mcmp+0x2c>
 80144cc:	d305      	bcc.n	80144da <__mcmp+0x32>
 80144ce:	2201      	movs	r2, #1
 80144d0:	4610      	mov	r0, r2
 80144d2:	bd30      	pop	{r4, r5, pc}
 80144d4:	4283      	cmp	r3, r0
 80144d6:	d3f3      	bcc.n	80144c0 <__mcmp+0x18>
 80144d8:	e7fa      	b.n	80144d0 <__mcmp+0x28>
 80144da:	f04f 32ff 	mov.w	r2, #4294967295
 80144de:	e7f7      	b.n	80144d0 <__mcmp+0x28>

080144e0 <__mdiff>:
 80144e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	460c      	mov	r4, r1
 80144e6:	4606      	mov	r6, r0
 80144e8:	4611      	mov	r1, r2
 80144ea:	4620      	mov	r0, r4
 80144ec:	4690      	mov	r8, r2
 80144ee:	f7ff ffdb 	bl	80144a8 <__mcmp>
 80144f2:	1e05      	subs	r5, r0, #0
 80144f4:	d110      	bne.n	8014518 <__mdiff+0x38>
 80144f6:	4629      	mov	r1, r5
 80144f8:	4630      	mov	r0, r6
 80144fa:	f7ff fd0f 	bl	8013f1c <_Balloc>
 80144fe:	b930      	cbnz	r0, 801450e <__mdiff+0x2e>
 8014500:	4b3a      	ldr	r3, [pc, #232]	; (80145ec <__mdiff+0x10c>)
 8014502:	4602      	mov	r2, r0
 8014504:	f240 2137 	movw	r1, #567	; 0x237
 8014508:	4839      	ldr	r0, [pc, #228]	; (80145f0 <__mdiff+0x110>)
 801450a:	f001 fc55 	bl	8015db8 <__assert_func>
 801450e:	2301      	movs	r3, #1
 8014510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014518:	bfa4      	itt	ge
 801451a:	4643      	movge	r3, r8
 801451c:	46a0      	movge	r8, r4
 801451e:	4630      	mov	r0, r6
 8014520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014524:	bfa6      	itte	ge
 8014526:	461c      	movge	r4, r3
 8014528:	2500      	movge	r5, #0
 801452a:	2501      	movlt	r5, #1
 801452c:	f7ff fcf6 	bl	8013f1c <_Balloc>
 8014530:	b920      	cbnz	r0, 801453c <__mdiff+0x5c>
 8014532:	4b2e      	ldr	r3, [pc, #184]	; (80145ec <__mdiff+0x10c>)
 8014534:	4602      	mov	r2, r0
 8014536:	f240 2145 	movw	r1, #581	; 0x245
 801453a:	e7e5      	b.n	8014508 <__mdiff+0x28>
 801453c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014540:	6926      	ldr	r6, [r4, #16]
 8014542:	60c5      	str	r5, [r0, #12]
 8014544:	f104 0914 	add.w	r9, r4, #20
 8014548:	f108 0514 	add.w	r5, r8, #20
 801454c:	f100 0e14 	add.w	lr, r0, #20
 8014550:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014558:	f108 0210 	add.w	r2, r8, #16
 801455c:	46f2      	mov	sl, lr
 801455e:	2100      	movs	r1, #0
 8014560:	f859 3b04 	ldr.w	r3, [r9], #4
 8014564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014568:	fa11 f88b 	uxtah	r8, r1, fp
 801456c:	b299      	uxth	r1, r3
 801456e:	0c1b      	lsrs	r3, r3, #16
 8014570:	eba8 0801 	sub.w	r8, r8, r1
 8014574:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014578:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801457c:	fa1f f888 	uxth.w	r8, r8
 8014580:	1419      	asrs	r1, r3, #16
 8014582:	454e      	cmp	r6, r9
 8014584:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014588:	f84a 3b04 	str.w	r3, [sl], #4
 801458c:	d8e8      	bhi.n	8014560 <__mdiff+0x80>
 801458e:	1b33      	subs	r3, r6, r4
 8014590:	3b15      	subs	r3, #21
 8014592:	f023 0303 	bic.w	r3, r3, #3
 8014596:	3304      	adds	r3, #4
 8014598:	3415      	adds	r4, #21
 801459a:	42a6      	cmp	r6, r4
 801459c:	bf38      	it	cc
 801459e:	2304      	movcc	r3, #4
 80145a0:	441d      	add	r5, r3
 80145a2:	4473      	add	r3, lr
 80145a4:	469e      	mov	lr, r3
 80145a6:	462e      	mov	r6, r5
 80145a8:	4566      	cmp	r6, ip
 80145aa:	d30e      	bcc.n	80145ca <__mdiff+0xea>
 80145ac:	f10c 0203 	add.w	r2, ip, #3
 80145b0:	1b52      	subs	r2, r2, r5
 80145b2:	f022 0203 	bic.w	r2, r2, #3
 80145b6:	3d03      	subs	r5, #3
 80145b8:	45ac      	cmp	ip, r5
 80145ba:	bf38      	it	cc
 80145bc:	2200      	movcc	r2, #0
 80145be:	4413      	add	r3, r2
 80145c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80145c4:	b17a      	cbz	r2, 80145e6 <__mdiff+0x106>
 80145c6:	6107      	str	r7, [r0, #16]
 80145c8:	e7a4      	b.n	8014514 <__mdiff+0x34>
 80145ca:	f856 8b04 	ldr.w	r8, [r6], #4
 80145ce:	fa11 f288 	uxtah	r2, r1, r8
 80145d2:	1414      	asrs	r4, r2, #16
 80145d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80145d8:	b292      	uxth	r2, r2
 80145da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80145de:	f84e 2b04 	str.w	r2, [lr], #4
 80145e2:	1421      	asrs	r1, r4, #16
 80145e4:	e7e0      	b.n	80145a8 <__mdiff+0xc8>
 80145e6:	3f01      	subs	r7, #1
 80145e8:	e7ea      	b.n	80145c0 <__mdiff+0xe0>
 80145ea:	bf00      	nop
 80145ec:	080463cd 	.word	0x080463cd
 80145f0:	080463de 	.word	0x080463de

080145f4 <__ulp>:
 80145f4:	b082      	sub	sp, #8
 80145f6:	ed8d 0b00 	vstr	d0, [sp]
 80145fa:	9a01      	ldr	r2, [sp, #4]
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <__ulp+0x48>)
 80145fe:	4013      	ands	r3, r2
 8014600:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014604:	2b00      	cmp	r3, #0
 8014606:	dc08      	bgt.n	801461a <__ulp+0x26>
 8014608:	425b      	negs	r3, r3
 801460a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801460e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014612:	da04      	bge.n	801461e <__ulp+0x2a>
 8014614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014618:	4113      	asrs	r3, r2
 801461a:	2200      	movs	r2, #0
 801461c:	e008      	b.n	8014630 <__ulp+0x3c>
 801461e:	f1a2 0314 	sub.w	r3, r2, #20
 8014622:	2b1e      	cmp	r3, #30
 8014624:	bfda      	itte	le
 8014626:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801462a:	40da      	lsrle	r2, r3
 801462c:	2201      	movgt	r2, #1
 801462e:	2300      	movs	r3, #0
 8014630:	4619      	mov	r1, r3
 8014632:	4610      	mov	r0, r2
 8014634:	ec41 0b10 	vmov	d0, r0, r1
 8014638:	b002      	add	sp, #8
 801463a:	4770      	bx	lr
 801463c:	7ff00000 	.word	0x7ff00000

08014640 <__b2d>:
 8014640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014644:	6906      	ldr	r6, [r0, #16]
 8014646:	f100 0814 	add.w	r8, r0, #20
 801464a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801464e:	1f37      	subs	r7, r6, #4
 8014650:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014654:	4610      	mov	r0, r2
 8014656:	f7ff fd53 	bl	8014100 <__hi0bits>
 801465a:	f1c0 0320 	rsb	r3, r0, #32
 801465e:	280a      	cmp	r0, #10
 8014660:	600b      	str	r3, [r1, #0]
 8014662:	491b      	ldr	r1, [pc, #108]	; (80146d0 <__b2d+0x90>)
 8014664:	dc15      	bgt.n	8014692 <__b2d+0x52>
 8014666:	f1c0 0c0b 	rsb	ip, r0, #11
 801466a:	fa22 f30c 	lsr.w	r3, r2, ip
 801466e:	45b8      	cmp	r8, r7
 8014670:	ea43 0501 	orr.w	r5, r3, r1
 8014674:	bf34      	ite	cc
 8014676:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801467a:	2300      	movcs	r3, #0
 801467c:	3015      	adds	r0, #21
 801467e:	fa02 f000 	lsl.w	r0, r2, r0
 8014682:	fa23 f30c 	lsr.w	r3, r3, ip
 8014686:	4303      	orrs	r3, r0
 8014688:	461c      	mov	r4, r3
 801468a:	ec45 4b10 	vmov	d0, r4, r5
 801468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014692:	45b8      	cmp	r8, r7
 8014694:	bf3a      	itte	cc
 8014696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801469a:	f1a6 0708 	subcc.w	r7, r6, #8
 801469e:	2300      	movcs	r3, #0
 80146a0:	380b      	subs	r0, #11
 80146a2:	d012      	beq.n	80146ca <__b2d+0x8a>
 80146a4:	f1c0 0120 	rsb	r1, r0, #32
 80146a8:	fa23 f401 	lsr.w	r4, r3, r1
 80146ac:	4082      	lsls	r2, r0
 80146ae:	4322      	orrs	r2, r4
 80146b0:	4547      	cmp	r7, r8
 80146b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80146b6:	bf8c      	ite	hi
 80146b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80146bc:	2200      	movls	r2, #0
 80146be:	4083      	lsls	r3, r0
 80146c0:	40ca      	lsrs	r2, r1
 80146c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80146c6:	4313      	orrs	r3, r2
 80146c8:	e7de      	b.n	8014688 <__b2d+0x48>
 80146ca:	ea42 0501 	orr.w	r5, r2, r1
 80146ce:	e7db      	b.n	8014688 <__b2d+0x48>
 80146d0:	3ff00000 	.word	0x3ff00000

080146d4 <__d2b>:
 80146d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146d8:	460f      	mov	r7, r1
 80146da:	2101      	movs	r1, #1
 80146dc:	ec59 8b10 	vmov	r8, r9, d0
 80146e0:	4616      	mov	r6, r2
 80146e2:	f7ff fc1b 	bl	8013f1c <_Balloc>
 80146e6:	4604      	mov	r4, r0
 80146e8:	b930      	cbnz	r0, 80146f8 <__d2b+0x24>
 80146ea:	4602      	mov	r2, r0
 80146ec:	4b24      	ldr	r3, [pc, #144]	; (8014780 <__d2b+0xac>)
 80146ee:	4825      	ldr	r0, [pc, #148]	; (8014784 <__d2b+0xb0>)
 80146f0:	f240 310f 	movw	r1, #783	; 0x30f
 80146f4:	f001 fb60 	bl	8015db8 <__assert_func>
 80146f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80146fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014700:	bb2d      	cbnz	r5, 801474e <__d2b+0x7a>
 8014702:	9301      	str	r3, [sp, #4]
 8014704:	f1b8 0300 	subs.w	r3, r8, #0
 8014708:	d026      	beq.n	8014758 <__d2b+0x84>
 801470a:	4668      	mov	r0, sp
 801470c:	9300      	str	r3, [sp, #0]
 801470e:	f7ff fd17 	bl	8014140 <__lo0bits>
 8014712:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014716:	b1e8      	cbz	r0, 8014754 <__d2b+0x80>
 8014718:	f1c0 0320 	rsb	r3, r0, #32
 801471c:	fa02 f303 	lsl.w	r3, r2, r3
 8014720:	430b      	orrs	r3, r1
 8014722:	40c2      	lsrs	r2, r0
 8014724:	6163      	str	r3, [r4, #20]
 8014726:	9201      	str	r2, [sp, #4]
 8014728:	9b01      	ldr	r3, [sp, #4]
 801472a:	61a3      	str	r3, [r4, #24]
 801472c:	2b00      	cmp	r3, #0
 801472e:	bf14      	ite	ne
 8014730:	2202      	movne	r2, #2
 8014732:	2201      	moveq	r2, #1
 8014734:	6122      	str	r2, [r4, #16]
 8014736:	b1bd      	cbz	r5, 8014768 <__d2b+0x94>
 8014738:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801473c:	4405      	add	r5, r0
 801473e:	603d      	str	r5, [r7, #0]
 8014740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014744:	6030      	str	r0, [r6, #0]
 8014746:	4620      	mov	r0, r4
 8014748:	b003      	add	sp, #12
 801474a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801474e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014752:	e7d6      	b.n	8014702 <__d2b+0x2e>
 8014754:	6161      	str	r1, [r4, #20]
 8014756:	e7e7      	b.n	8014728 <__d2b+0x54>
 8014758:	a801      	add	r0, sp, #4
 801475a:	f7ff fcf1 	bl	8014140 <__lo0bits>
 801475e:	9b01      	ldr	r3, [sp, #4]
 8014760:	6163      	str	r3, [r4, #20]
 8014762:	3020      	adds	r0, #32
 8014764:	2201      	movs	r2, #1
 8014766:	e7e5      	b.n	8014734 <__d2b+0x60>
 8014768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801476c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014770:	6038      	str	r0, [r7, #0]
 8014772:	6918      	ldr	r0, [r3, #16]
 8014774:	f7ff fcc4 	bl	8014100 <__hi0bits>
 8014778:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801477c:	e7e2      	b.n	8014744 <__d2b+0x70>
 801477e:	bf00      	nop
 8014780:	080463cd 	.word	0x080463cd
 8014784:	080463de 	.word	0x080463de

08014788 <__ratio>:
 8014788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	4688      	mov	r8, r1
 801478e:	4669      	mov	r1, sp
 8014790:	4681      	mov	r9, r0
 8014792:	f7ff ff55 	bl	8014640 <__b2d>
 8014796:	a901      	add	r1, sp, #4
 8014798:	4640      	mov	r0, r8
 801479a:	ec55 4b10 	vmov	r4, r5, d0
 801479e:	f7ff ff4f 	bl	8014640 <__b2d>
 80147a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80147a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80147aa:	eba3 0c02 	sub.w	ip, r3, r2
 80147ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80147b2:	1a9b      	subs	r3, r3, r2
 80147b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80147b8:	ec51 0b10 	vmov	r0, r1, d0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	bfd6      	itet	le
 80147c0:	460a      	movle	r2, r1
 80147c2:	462a      	movgt	r2, r5
 80147c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80147c8:	468b      	mov	fp, r1
 80147ca:	462f      	mov	r7, r5
 80147cc:	bfd4      	ite	le
 80147ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80147d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80147d6:	4620      	mov	r0, r4
 80147d8:	ee10 2a10 	vmov	r2, s0
 80147dc:	465b      	mov	r3, fp
 80147de:	4639      	mov	r1, r7
 80147e0:	f7ec f834 	bl	800084c <__aeabi_ddiv>
 80147e4:	ec41 0b10 	vmov	d0, r0, r1
 80147e8:	b003      	add	sp, #12
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147ee <__copybits>:
 80147ee:	3901      	subs	r1, #1
 80147f0:	b570      	push	{r4, r5, r6, lr}
 80147f2:	1149      	asrs	r1, r1, #5
 80147f4:	6914      	ldr	r4, [r2, #16]
 80147f6:	3101      	adds	r1, #1
 80147f8:	f102 0314 	add.w	r3, r2, #20
 80147fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014800:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014804:	1f05      	subs	r5, r0, #4
 8014806:	42a3      	cmp	r3, r4
 8014808:	d30c      	bcc.n	8014824 <__copybits+0x36>
 801480a:	1aa3      	subs	r3, r4, r2
 801480c:	3b11      	subs	r3, #17
 801480e:	f023 0303 	bic.w	r3, r3, #3
 8014812:	3211      	adds	r2, #17
 8014814:	42a2      	cmp	r2, r4
 8014816:	bf88      	it	hi
 8014818:	2300      	movhi	r3, #0
 801481a:	4418      	add	r0, r3
 801481c:	2300      	movs	r3, #0
 801481e:	4288      	cmp	r0, r1
 8014820:	d305      	bcc.n	801482e <__copybits+0x40>
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	f853 6b04 	ldr.w	r6, [r3], #4
 8014828:	f845 6f04 	str.w	r6, [r5, #4]!
 801482c:	e7eb      	b.n	8014806 <__copybits+0x18>
 801482e:	f840 3b04 	str.w	r3, [r0], #4
 8014832:	e7f4      	b.n	801481e <__copybits+0x30>

08014834 <__any_on>:
 8014834:	f100 0214 	add.w	r2, r0, #20
 8014838:	6900      	ldr	r0, [r0, #16]
 801483a:	114b      	asrs	r3, r1, #5
 801483c:	4298      	cmp	r0, r3
 801483e:	b510      	push	{r4, lr}
 8014840:	db11      	blt.n	8014866 <__any_on+0x32>
 8014842:	dd0a      	ble.n	801485a <__any_on+0x26>
 8014844:	f011 011f 	ands.w	r1, r1, #31
 8014848:	d007      	beq.n	801485a <__any_on+0x26>
 801484a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801484e:	fa24 f001 	lsr.w	r0, r4, r1
 8014852:	fa00 f101 	lsl.w	r1, r0, r1
 8014856:	428c      	cmp	r4, r1
 8014858:	d10b      	bne.n	8014872 <__any_on+0x3e>
 801485a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801485e:	4293      	cmp	r3, r2
 8014860:	d803      	bhi.n	801486a <__any_on+0x36>
 8014862:	2000      	movs	r0, #0
 8014864:	bd10      	pop	{r4, pc}
 8014866:	4603      	mov	r3, r0
 8014868:	e7f7      	b.n	801485a <__any_on+0x26>
 801486a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801486e:	2900      	cmp	r1, #0
 8014870:	d0f5      	beq.n	801485e <__any_on+0x2a>
 8014872:	2001      	movs	r0, #1
 8014874:	e7f6      	b.n	8014864 <__any_on+0x30>

08014876 <_malloc_usable_size_r>:
 8014876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801487a:	1f18      	subs	r0, r3, #4
 801487c:	2b00      	cmp	r3, #0
 801487e:	bfbc      	itt	lt
 8014880:	580b      	ldrlt	r3, [r1, r0]
 8014882:	18c0      	addlt	r0, r0, r3
 8014884:	4770      	bx	lr

08014886 <sulp>:
 8014886:	b570      	push	{r4, r5, r6, lr}
 8014888:	4604      	mov	r4, r0
 801488a:	460d      	mov	r5, r1
 801488c:	ec45 4b10 	vmov	d0, r4, r5
 8014890:	4616      	mov	r6, r2
 8014892:	f7ff feaf 	bl	80145f4 <__ulp>
 8014896:	ec51 0b10 	vmov	r0, r1, d0
 801489a:	b17e      	cbz	r6, 80148bc <sulp+0x36>
 801489c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80148a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	dd09      	ble.n	80148bc <sulp+0x36>
 80148a8:	051b      	lsls	r3, r3, #20
 80148aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80148ae:	2400      	movs	r4, #0
 80148b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80148b4:	4622      	mov	r2, r4
 80148b6:	462b      	mov	r3, r5
 80148b8:	f7eb fe9e 	bl	80005f8 <__aeabi_dmul>
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080148c0 <_strtod_l>:
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	ed2d 8b02 	vpush	{d8}
 80148c8:	b09b      	sub	sp, #108	; 0x6c
 80148ca:	4604      	mov	r4, r0
 80148cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80148ce:	2200      	movs	r2, #0
 80148d0:	9216      	str	r2, [sp, #88]	; 0x58
 80148d2:	460d      	mov	r5, r1
 80148d4:	f04f 0800 	mov.w	r8, #0
 80148d8:	f04f 0900 	mov.w	r9, #0
 80148dc:	460a      	mov	r2, r1
 80148de:	9215      	str	r2, [sp, #84]	; 0x54
 80148e0:	7811      	ldrb	r1, [r2, #0]
 80148e2:	292b      	cmp	r1, #43	; 0x2b
 80148e4:	d04c      	beq.n	8014980 <_strtod_l+0xc0>
 80148e6:	d83a      	bhi.n	801495e <_strtod_l+0x9e>
 80148e8:	290d      	cmp	r1, #13
 80148ea:	d834      	bhi.n	8014956 <_strtod_l+0x96>
 80148ec:	2908      	cmp	r1, #8
 80148ee:	d834      	bhi.n	801495a <_strtod_l+0x9a>
 80148f0:	2900      	cmp	r1, #0
 80148f2:	d03d      	beq.n	8014970 <_strtod_l+0xb0>
 80148f4:	2200      	movs	r2, #0
 80148f6:	920a      	str	r2, [sp, #40]	; 0x28
 80148f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80148fa:	7832      	ldrb	r2, [r6, #0]
 80148fc:	2a30      	cmp	r2, #48	; 0x30
 80148fe:	f040 80b4 	bne.w	8014a6a <_strtod_l+0x1aa>
 8014902:	7872      	ldrb	r2, [r6, #1]
 8014904:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014908:	2a58      	cmp	r2, #88	; 0x58
 801490a:	d170      	bne.n	80149ee <_strtod_l+0x12e>
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014910:	9301      	str	r3, [sp, #4]
 8014912:	ab16      	add	r3, sp, #88	; 0x58
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	4a8e      	ldr	r2, [pc, #568]	; (8014b50 <_strtod_l+0x290>)
 8014918:	ab17      	add	r3, sp, #92	; 0x5c
 801491a:	a915      	add	r1, sp, #84	; 0x54
 801491c:	4620      	mov	r0, r4
 801491e:	f001 fae7 	bl	8015ef0 <__gethex>
 8014922:	f010 070f 	ands.w	r7, r0, #15
 8014926:	4605      	mov	r5, r0
 8014928:	d005      	beq.n	8014936 <_strtod_l+0x76>
 801492a:	2f06      	cmp	r7, #6
 801492c:	d12a      	bne.n	8014984 <_strtod_l+0xc4>
 801492e:	3601      	adds	r6, #1
 8014930:	2300      	movs	r3, #0
 8014932:	9615      	str	r6, [sp, #84]	; 0x54
 8014934:	930a      	str	r3, [sp, #40]	; 0x28
 8014936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014938:	2b00      	cmp	r3, #0
 801493a:	f040 857f 	bne.w	801543c <_strtod_l+0xb7c>
 801493e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014940:	b1db      	cbz	r3, 801497a <_strtod_l+0xba>
 8014942:	4642      	mov	r2, r8
 8014944:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014948:	ec43 2b10 	vmov	d0, r2, r3
 801494c:	b01b      	add	sp, #108	; 0x6c
 801494e:	ecbd 8b02 	vpop	{d8}
 8014952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014956:	2920      	cmp	r1, #32
 8014958:	d1cc      	bne.n	80148f4 <_strtod_l+0x34>
 801495a:	3201      	adds	r2, #1
 801495c:	e7bf      	b.n	80148de <_strtod_l+0x1e>
 801495e:	292d      	cmp	r1, #45	; 0x2d
 8014960:	d1c8      	bne.n	80148f4 <_strtod_l+0x34>
 8014962:	2101      	movs	r1, #1
 8014964:	910a      	str	r1, [sp, #40]	; 0x28
 8014966:	1c51      	adds	r1, r2, #1
 8014968:	9115      	str	r1, [sp, #84]	; 0x54
 801496a:	7852      	ldrb	r2, [r2, #1]
 801496c:	2a00      	cmp	r2, #0
 801496e:	d1c3      	bne.n	80148f8 <_strtod_l+0x38>
 8014970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014972:	9515      	str	r5, [sp, #84]	; 0x54
 8014974:	2b00      	cmp	r3, #0
 8014976:	f040 855f 	bne.w	8015438 <_strtod_l+0xb78>
 801497a:	4642      	mov	r2, r8
 801497c:	464b      	mov	r3, r9
 801497e:	e7e3      	b.n	8014948 <_strtod_l+0x88>
 8014980:	2100      	movs	r1, #0
 8014982:	e7ef      	b.n	8014964 <_strtod_l+0xa4>
 8014984:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014986:	b13a      	cbz	r2, 8014998 <_strtod_l+0xd8>
 8014988:	2135      	movs	r1, #53	; 0x35
 801498a:	a818      	add	r0, sp, #96	; 0x60
 801498c:	f7ff ff2f 	bl	80147ee <__copybits>
 8014990:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014992:	4620      	mov	r0, r4
 8014994:	f7ff fb02 	bl	8013f9c <_Bfree>
 8014998:	3f01      	subs	r7, #1
 801499a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801499c:	2f04      	cmp	r7, #4
 801499e:	d806      	bhi.n	80149ae <_strtod_l+0xee>
 80149a0:	e8df f007 	tbb	[pc, r7]
 80149a4:	201d0314 	.word	0x201d0314
 80149a8:	14          	.byte	0x14
 80149a9:	00          	.byte	0x00
 80149aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80149ae:	05e9      	lsls	r1, r5, #23
 80149b0:	bf48      	it	mi
 80149b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80149b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80149ba:	0d1b      	lsrs	r3, r3, #20
 80149bc:	051b      	lsls	r3, r3, #20
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1b9      	bne.n	8014936 <_strtod_l+0x76>
 80149c2:	f7fe fba1 	bl	8013108 <__errno>
 80149c6:	2322      	movs	r3, #34	; 0x22
 80149c8:	6003      	str	r3, [r0, #0]
 80149ca:	e7b4      	b.n	8014936 <_strtod_l+0x76>
 80149cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80149d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80149d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80149d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80149dc:	e7e7      	b.n	80149ae <_strtod_l+0xee>
 80149de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014b58 <_strtod_l+0x298>
 80149e2:	e7e4      	b.n	80149ae <_strtod_l+0xee>
 80149e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80149e8:	f04f 38ff 	mov.w	r8, #4294967295
 80149ec:	e7df      	b.n	80149ae <_strtod_l+0xee>
 80149ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149f0:	1c5a      	adds	r2, r3, #1
 80149f2:	9215      	str	r2, [sp, #84]	; 0x54
 80149f4:	785b      	ldrb	r3, [r3, #1]
 80149f6:	2b30      	cmp	r3, #48	; 0x30
 80149f8:	d0f9      	beq.n	80149ee <_strtod_l+0x12e>
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d09b      	beq.n	8014936 <_strtod_l+0x76>
 80149fe:	2301      	movs	r3, #1
 8014a00:	f04f 0a00 	mov.w	sl, #0
 8014a04:	9304      	str	r3, [sp, #16]
 8014a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014a0e:	46d3      	mov	fp, sl
 8014a10:	220a      	movs	r2, #10
 8014a12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014a14:	7806      	ldrb	r6, [r0, #0]
 8014a16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014a1a:	b2d9      	uxtb	r1, r3
 8014a1c:	2909      	cmp	r1, #9
 8014a1e:	d926      	bls.n	8014a6e <_strtod_l+0x1ae>
 8014a20:	494c      	ldr	r1, [pc, #304]	; (8014b54 <_strtod_l+0x294>)
 8014a22:	2201      	movs	r2, #1
 8014a24:	f001 f98c 	bl	8015d40 <strncmp>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d030      	beq.n	8014a8e <_strtod_l+0x1ce>
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	4632      	mov	r2, r6
 8014a30:	9005      	str	r0, [sp, #20]
 8014a32:	465e      	mov	r6, fp
 8014a34:	4603      	mov	r3, r0
 8014a36:	2a65      	cmp	r2, #101	; 0x65
 8014a38:	d001      	beq.n	8014a3e <_strtod_l+0x17e>
 8014a3a:	2a45      	cmp	r2, #69	; 0x45
 8014a3c:	d113      	bne.n	8014a66 <_strtod_l+0x1a6>
 8014a3e:	b91e      	cbnz	r6, 8014a48 <_strtod_l+0x188>
 8014a40:	9a04      	ldr	r2, [sp, #16]
 8014a42:	4302      	orrs	r2, r0
 8014a44:	d094      	beq.n	8014970 <_strtod_l+0xb0>
 8014a46:	2600      	movs	r6, #0
 8014a48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014a4a:	1c6a      	adds	r2, r5, #1
 8014a4c:	9215      	str	r2, [sp, #84]	; 0x54
 8014a4e:	786a      	ldrb	r2, [r5, #1]
 8014a50:	2a2b      	cmp	r2, #43	; 0x2b
 8014a52:	d074      	beq.n	8014b3e <_strtod_l+0x27e>
 8014a54:	2a2d      	cmp	r2, #45	; 0x2d
 8014a56:	d078      	beq.n	8014b4a <_strtod_l+0x28a>
 8014a58:	f04f 0c00 	mov.w	ip, #0
 8014a5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014a60:	2909      	cmp	r1, #9
 8014a62:	d97f      	bls.n	8014b64 <_strtod_l+0x2a4>
 8014a64:	9515      	str	r5, [sp, #84]	; 0x54
 8014a66:	2700      	movs	r7, #0
 8014a68:	e09e      	b.n	8014ba8 <_strtod_l+0x2e8>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	e7c8      	b.n	8014a00 <_strtod_l+0x140>
 8014a6e:	f1bb 0f08 	cmp.w	fp, #8
 8014a72:	bfd8      	it	le
 8014a74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014a76:	f100 0001 	add.w	r0, r0, #1
 8014a7a:	bfda      	itte	le
 8014a7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014a80:	9309      	strle	r3, [sp, #36]	; 0x24
 8014a82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014a86:	f10b 0b01 	add.w	fp, fp, #1
 8014a8a:	9015      	str	r0, [sp, #84]	; 0x54
 8014a8c:	e7c1      	b.n	8014a12 <_strtod_l+0x152>
 8014a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	9215      	str	r2, [sp, #84]	; 0x54
 8014a94:	785a      	ldrb	r2, [r3, #1]
 8014a96:	f1bb 0f00 	cmp.w	fp, #0
 8014a9a:	d037      	beq.n	8014b0c <_strtod_l+0x24c>
 8014a9c:	9005      	str	r0, [sp, #20]
 8014a9e:	465e      	mov	r6, fp
 8014aa0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014aa4:	2b09      	cmp	r3, #9
 8014aa6:	d912      	bls.n	8014ace <_strtod_l+0x20e>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e7c4      	b.n	8014a36 <_strtod_l+0x176>
 8014aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	9215      	str	r2, [sp, #84]	; 0x54
 8014ab2:	785a      	ldrb	r2, [r3, #1]
 8014ab4:	3001      	adds	r0, #1
 8014ab6:	2a30      	cmp	r2, #48	; 0x30
 8014ab8:	d0f8      	beq.n	8014aac <_strtod_l+0x1ec>
 8014aba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014abe:	2b08      	cmp	r3, #8
 8014ac0:	f200 84c1 	bhi.w	8015446 <_strtod_l+0xb86>
 8014ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ac6:	9005      	str	r0, [sp, #20]
 8014ac8:	2000      	movs	r0, #0
 8014aca:	930b      	str	r3, [sp, #44]	; 0x2c
 8014acc:	4606      	mov	r6, r0
 8014ace:	3a30      	subs	r2, #48	; 0x30
 8014ad0:	f100 0301 	add.w	r3, r0, #1
 8014ad4:	d014      	beq.n	8014b00 <_strtod_l+0x240>
 8014ad6:	9905      	ldr	r1, [sp, #20]
 8014ad8:	4419      	add	r1, r3
 8014ada:	9105      	str	r1, [sp, #20]
 8014adc:	4633      	mov	r3, r6
 8014ade:	eb00 0c06 	add.w	ip, r0, r6
 8014ae2:	210a      	movs	r1, #10
 8014ae4:	4563      	cmp	r3, ip
 8014ae6:	d113      	bne.n	8014b10 <_strtod_l+0x250>
 8014ae8:	1833      	adds	r3, r6, r0
 8014aea:	2b08      	cmp	r3, #8
 8014aec:	f106 0601 	add.w	r6, r6, #1
 8014af0:	4406      	add	r6, r0
 8014af2:	dc1a      	bgt.n	8014b2a <_strtod_l+0x26a>
 8014af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014af6:	230a      	movs	r3, #10
 8014af8:	fb03 2301 	mla	r3, r3, r1, r2
 8014afc:	9309      	str	r3, [sp, #36]	; 0x24
 8014afe:	2300      	movs	r3, #0
 8014b00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b02:	1c51      	adds	r1, r2, #1
 8014b04:	9115      	str	r1, [sp, #84]	; 0x54
 8014b06:	7852      	ldrb	r2, [r2, #1]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	e7c9      	b.n	8014aa0 <_strtod_l+0x1e0>
 8014b0c:	4658      	mov	r0, fp
 8014b0e:	e7d2      	b.n	8014ab6 <_strtod_l+0x1f6>
 8014b10:	2b08      	cmp	r3, #8
 8014b12:	f103 0301 	add.w	r3, r3, #1
 8014b16:	dc03      	bgt.n	8014b20 <_strtod_l+0x260>
 8014b18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014b1a:	434f      	muls	r7, r1
 8014b1c:	9709      	str	r7, [sp, #36]	; 0x24
 8014b1e:	e7e1      	b.n	8014ae4 <_strtod_l+0x224>
 8014b20:	2b10      	cmp	r3, #16
 8014b22:	bfd8      	it	le
 8014b24:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014b28:	e7dc      	b.n	8014ae4 <_strtod_l+0x224>
 8014b2a:	2e10      	cmp	r6, #16
 8014b2c:	bfdc      	itt	le
 8014b2e:	230a      	movle	r3, #10
 8014b30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014b34:	e7e3      	b.n	8014afe <_strtod_l+0x23e>
 8014b36:	2300      	movs	r3, #0
 8014b38:	9305      	str	r3, [sp, #20]
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	e780      	b.n	8014a40 <_strtod_l+0x180>
 8014b3e:	f04f 0c00 	mov.w	ip, #0
 8014b42:	1caa      	adds	r2, r5, #2
 8014b44:	9215      	str	r2, [sp, #84]	; 0x54
 8014b46:	78aa      	ldrb	r2, [r5, #2]
 8014b48:	e788      	b.n	8014a5c <_strtod_l+0x19c>
 8014b4a:	f04f 0c01 	mov.w	ip, #1
 8014b4e:	e7f8      	b.n	8014b42 <_strtod_l+0x282>
 8014b50:	08046538 	.word	0x08046538
 8014b54:	08046534 	.word	0x08046534
 8014b58:	7ff00000 	.word	0x7ff00000
 8014b5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b5e:	1c51      	adds	r1, r2, #1
 8014b60:	9115      	str	r1, [sp, #84]	; 0x54
 8014b62:	7852      	ldrb	r2, [r2, #1]
 8014b64:	2a30      	cmp	r2, #48	; 0x30
 8014b66:	d0f9      	beq.n	8014b5c <_strtod_l+0x29c>
 8014b68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014b6c:	2908      	cmp	r1, #8
 8014b6e:	f63f af7a 	bhi.w	8014a66 <_strtod_l+0x1a6>
 8014b72:	3a30      	subs	r2, #48	; 0x30
 8014b74:	9208      	str	r2, [sp, #32]
 8014b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b78:	920c      	str	r2, [sp, #48]	; 0x30
 8014b7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b7c:	1c57      	adds	r7, r2, #1
 8014b7e:	9715      	str	r7, [sp, #84]	; 0x54
 8014b80:	7852      	ldrb	r2, [r2, #1]
 8014b82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014b86:	f1be 0f09 	cmp.w	lr, #9
 8014b8a:	d938      	bls.n	8014bfe <_strtod_l+0x33e>
 8014b8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b8e:	1a7f      	subs	r7, r7, r1
 8014b90:	2f08      	cmp	r7, #8
 8014b92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014b96:	dc03      	bgt.n	8014ba0 <_strtod_l+0x2e0>
 8014b98:	9908      	ldr	r1, [sp, #32]
 8014b9a:	428f      	cmp	r7, r1
 8014b9c:	bfa8      	it	ge
 8014b9e:	460f      	movge	r7, r1
 8014ba0:	f1bc 0f00 	cmp.w	ip, #0
 8014ba4:	d000      	beq.n	8014ba8 <_strtod_l+0x2e8>
 8014ba6:	427f      	negs	r7, r7
 8014ba8:	2e00      	cmp	r6, #0
 8014baa:	d14f      	bne.n	8014c4c <_strtod_l+0x38c>
 8014bac:	9904      	ldr	r1, [sp, #16]
 8014bae:	4301      	orrs	r1, r0
 8014bb0:	f47f aec1 	bne.w	8014936 <_strtod_l+0x76>
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f47f aedb 	bne.w	8014970 <_strtod_l+0xb0>
 8014bba:	2a69      	cmp	r2, #105	; 0x69
 8014bbc:	d029      	beq.n	8014c12 <_strtod_l+0x352>
 8014bbe:	dc26      	bgt.n	8014c0e <_strtod_l+0x34e>
 8014bc0:	2a49      	cmp	r2, #73	; 0x49
 8014bc2:	d026      	beq.n	8014c12 <_strtod_l+0x352>
 8014bc4:	2a4e      	cmp	r2, #78	; 0x4e
 8014bc6:	f47f aed3 	bne.w	8014970 <_strtod_l+0xb0>
 8014bca:	499b      	ldr	r1, [pc, #620]	; (8014e38 <_strtod_l+0x578>)
 8014bcc:	a815      	add	r0, sp, #84	; 0x54
 8014bce:	f001 fbcf 	bl	8016370 <__match>
 8014bd2:	2800      	cmp	r0, #0
 8014bd4:	f43f aecc 	beq.w	8014970 <_strtod_l+0xb0>
 8014bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	2b28      	cmp	r3, #40	; 0x28
 8014bde:	d12f      	bne.n	8014c40 <_strtod_l+0x380>
 8014be0:	4996      	ldr	r1, [pc, #600]	; (8014e3c <_strtod_l+0x57c>)
 8014be2:	aa18      	add	r2, sp, #96	; 0x60
 8014be4:	a815      	add	r0, sp, #84	; 0x54
 8014be6:	f001 fbd7 	bl	8016398 <__hexnan>
 8014bea:	2805      	cmp	r0, #5
 8014bec:	d128      	bne.n	8014c40 <_strtod_l+0x380>
 8014bee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014bf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014bf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014bfc:	e69b      	b.n	8014936 <_strtod_l+0x76>
 8014bfe:	9f08      	ldr	r7, [sp, #32]
 8014c00:	210a      	movs	r1, #10
 8014c02:	fb01 2107 	mla	r1, r1, r7, r2
 8014c06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014c0a:	9208      	str	r2, [sp, #32]
 8014c0c:	e7b5      	b.n	8014b7a <_strtod_l+0x2ba>
 8014c0e:	2a6e      	cmp	r2, #110	; 0x6e
 8014c10:	e7d9      	b.n	8014bc6 <_strtod_l+0x306>
 8014c12:	498b      	ldr	r1, [pc, #556]	; (8014e40 <_strtod_l+0x580>)
 8014c14:	a815      	add	r0, sp, #84	; 0x54
 8014c16:	f001 fbab 	bl	8016370 <__match>
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	f43f aea8 	beq.w	8014970 <_strtod_l+0xb0>
 8014c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c22:	4988      	ldr	r1, [pc, #544]	; (8014e44 <_strtod_l+0x584>)
 8014c24:	3b01      	subs	r3, #1
 8014c26:	a815      	add	r0, sp, #84	; 0x54
 8014c28:	9315      	str	r3, [sp, #84]	; 0x54
 8014c2a:	f001 fba1 	bl	8016370 <__match>
 8014c2e:	b910      	cbnz	r0, 8014c36 <_strtod_l+0x376>
 8014c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c32:	3301      	adds	r3, #1
 8014c34:	9315      	str	r3, [sp, #84]	; 0x54
 8014c36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014e54 <_strtod_l+0x594>
 8014c3a:	f04f 0800 	mov.w	r8, #0
 8014c3e:	e67a      	b.n	8014936 <_strtod_l+0x76>
 8014c40:	4881      	ldr	r0, [pc, #516]	; (8014e48 <_strtod_l+0x588>)
 8014c42:	f001 f8b1 	bl	8015da8 <nan>
 8014c46:	ec59 8b10 	vmov	r8, r9, d0
 8014c4a:	e674      	b.n	8014936 <_strtod_l+0x76>
 8014c4c:	9b05      	ldr	r3, [sp, #20]
 8014c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c50:	1afb      	subs	r3, r7, r3
 8014c52:	f1bb 0f00 	cmp.w	fp, #0
 8014c56:	bf08      	it	eq
 8014c58:	46b3      	moveq	fp, r6
 8014c5a:	2e10      	cmp	r6, #16
 8014c5c:	9308      	str	r3, [sp, #32]
 8014c5e:	4635      	mov	r5, r6
 8014c60:	bfa8      	it	ge
 8014c62:	2510      	movge	r5, #16
 8014c64:	f7eb fc4e 	bl	8000504 <__aeabi_ui2d>
 8014c68:	2e09      	cmp	r6, #9
 8014c6a:	4680      	mov	r8, r0
 8014c6c:	4689      	mov	r9, r1
 8014c6e:	dd13      	ble.n	8014c98 <_strtod_l+0x3d8>
 8014c70:	4b76      	ldr	r3, [pc, #472]	; (8014e4c <_strtod_l+0x58c>)
 8014c72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014c76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014c7a:	f7eb fcbd 	bl	80005f8 <__aeabi_dmul>
 8014c7e:	4680      	mov	r8, r0
 8014c80:	4650      	mov	r0, sl
 8014c82:	4689      	mov	r9, r1
 8014c84:	f7eb fc3e 	bl	8000504 <__aeabi_ui2d>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4640      	mov	r0, r8
 8014c8e:	4649      	mov	r1, r9
 8014c90:	f7eb fafc 	bl	800028c <__adddf3>
 8014c94:	4680      	mov	r8, r0
 8014c96:	4689      	mov	r9, r1
 8014c98:	2e0f      	cmp	r6, #15
 8014c9a:	dc38      	bgt.n	8014d0e <_strtod_l+0x44e>
 8014c9c:	9b08      	ldr	r3, [sp, #32]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	f43f ae49 	beq.w	8014936 <_strtod_l+0x76>
 8014ca4:	dd24      	ble.n	8014cf0 <_strtod_l+0x430>
 8014ca6:	2b16      	cmp	r3, #22
 8014ca8:	dc0b      	bgt.n	8014cc2 <_strtod_l+0x402>
 8014caa:	4968      	ldr	r1, [pc, #416]	; (8014e4c <_strtod_l+0x58c>)
 8014cac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cb4:	4642      	mov	r2, r8
 8014cb6:	464b      	mov	r3, r9
 8014cb8:	f7eb fc9e 	bl	80005f8 <__aeabi_dmul>
 8014cbc:	4680      	mov	r8, r0
 8014cbe:	4689      	mov	r9, r1
 8014cc0:	e639      	b.n	8014936 <_strtod_l+0x76>
 8014cc2:	9a08      	ldr	r2, [sp, #32]
 8014cc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	db20      	blt.n	8014d0e <_strtod_l+0x44e>
 8014ccc:	4c5f      	ldr	r4, [pc, #380]	; (8014e4c <_strtod_l+0x58c>)
 8014cce:	f1c6 060f 	rsb	r6, r6, #15
 8014cd2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014cd6:	4642      	mov	r2, r8
 8014cd8:	464b      	mov	r3, r9
 8014cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cde:	f7eb fc8b 	bl	80005f8 <__aeabi_dmul>
 8014ce2:	9b08      	ldr	r3, [sp, #32]
 8014ce4:	1b9e      	subs	r6, r3, r6
 8014ce6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014cea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014cee:	e7e3      	b.n	8014cb8 <_strtod_l+0x3f8>
 8014cf0:	9b08      	ldr	r3, [sp, #32]
 8014cf2:	3316      	adds	r3, #22
 8014cf4:	db0b      	blt.n	8014d0e <_strtod_l+0x44e>
 8014cf6:	9b05      	ldr	r3, [sp, #20]
 8014cf8:	1bdf      	subs	r7, r3, r7
 8014cfa:	4b54      	ldr	r3, [pc, #336]	; (8014e4c <_strtod_l+0x58c>)
 8014cfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d04:	4640      	mov	r0, r8
 8014d06:	4649      	mov	r1, r9
 8014d08:	f7eb fda0 	bl	800084c <__aeabi_ddiv>
 8014d0c:	e7d6      	b.n	8014cbc <_strtod_l+0x3fc>
 8014d0e:	9b08      	ldr	r3, [sp, #32]
 8014d10:	1b75      	subs	r5, r6, r5
 8014d12:	441d      	add	r5, r3
 8014d14:	2d00      	cmp	r5, #0
 8014d16:	dd70      	ble.n	8014dfa <_strtod_l+0x53a>
 8014d18:	f015 030f 	ands.w	r3, r5, #15
 8014d1c:	d00a      	beq.n	8014d34 <_strtod_l+0x474>
 8014d1e:	494b      	ldr	r1, [pc, #300]	; (8014e4c <_strtod_l+0x58c>)
 8014d20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014d24:	4642      	mov	r2, r8
 8014d26:	464b      	mov	r3, r9
 8014d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d2c:	f7eb fc64 	bl	80005f8 <__aeabi_dmul>
 8014d30:	4680      	mov	r8, r0
 8014d32:	4689      	mov	r9, r1
 8014d34:	f035 050f 	bics.w	r5, r5, #15
 8014d38:	d04d      	beq.n	8014dd6 <_strtod_l+0x516>
 8014d3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014d3e:	dd22      	ble.n	8014d86 <_strtod_l+0x4c6>
 8014d40:	2500      	movs	r5, #0
 8014d42:	46ab      	mov	fp, r5
 8014d44:	9509      	str	r5, [sp, #36]	; 0x24
 8014d46:	9505      	str	r5, [sp, #20]
 8014d48:	2322      	movs	r3, #34	; 0x22
 8014d4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014e54 <_strtod_l+0x594>
 8014d4e:	6023      	str	r3, [r4, #0]
 8014d50:	f04f 0800 	mov.w	r8, #0
 8014d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	f43f aded 	beq.w	8014936 <_strtod_l+0x76>
 8014d5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f7ff f91c 	bl	8013f9c <_Bfree>
 8014d64:	9905      	ldr	r1, [sp, #20]
 8014d66:	4620      	mov	r0, r4
 8014d68:	f7ff f918 	bl	8013f9c <_Bfree>
 8014d6c:	4659      	mov	r1, fp
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7ff f914 	bl	8013f9c <_Bfree>
 8014d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d76:	4620      	mov	r0, r4
 8014d78:	f7ff f910 	bl	8013f9c <_Bfree>
 8014d7c:	4629      	mov	r1, r5
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f7ff f90c 	bl	8013f9c <_Bfree>
 8014d84:	e5d7      	b.n	8014936 <_strtod_l+0x76>
 8014d86:	4b32      	ldr	r3, [pc, #200]	; (8014e50 <_strtod_l+0x590>)
 8014d88:	9304      	str	r3, [sp, #16]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	112d      	asrs	r5, r5, #4
 8014d8e:	4640      	mov	r0, r8
 8014d90:	4649      	mov	r1, r9
 8014d92:	469a      	mov	sl, r3
 8014d94:	2d01      	cmp	r5, #1
 8014d96:	dc21      	bgt.n	8014ddc <_strtod_l+0x51c>
 8014d98:	b10b      	cbz	r3, 8014d9e <_strtod_l+0x4de>
 8014d9a:	4680      	mov	r8, r0
 8014d9c:	4689      	mov	r9, r1
 8014d9e:	492c      	ldr	r1, [pc, #176]	; (8014e50 <_strtod_l+0x590>)
 8014da0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014da4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014da8:	4642      	mov	r2, r8
 8014daa:	464b      	mov	r3, r9
 8014dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014db0:	f7eb fc22 	bl	80005f8 <__aeabi_dmul>
 8014db4:	4b27      	ldr	r3, [pc, #156]	; (8014e54 <_strtod_l+0x594>)
 8014db6:	460a      	mov	r2, r1
 8014db8:	400b      	ands	r3, r1
 8014dba:	4927      	ldr	r1, [pc, #156]	; (8014e58 <_strtod_l+0x598>)
 8014dbc:	428b      	cmp	r3, r1
 8014dbe:	4680      	mov	r8, r0
 8014dc0:	d8be      	bhi.n	8014d40 <_strtod_l+0x480>
 8014dc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014dc6:	428b      	cmp	r3, r1
 8014dc8:	bf86      	itte	hi
 8014dca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014e5c <_strtod_l+0x59c>
 8014dce:	f04f 38ff 	movhi.w	r8, #4294967295
 8014dd2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	9304      	str	r3, [sp, #16]
 8014dda:	e07b      	b.n	8014ed4 <_strtod_l+0x614>
 8014ddc:	07ea      	lsls	r2, r5, #31
 8014dde:	d505      	bpl.n	8014dec <_strtod_l+0x52c>
 8014de0:	9b04      	ldr	r3, [sp, #16]
 8014de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de6:	f7eb fc07 	bl	80005f8 <__aeabi_dmul>
 8014dea:	2301      	movs	r3, #1
 8014dec:	9a04      	ldr	r2, [sp, #16]
 8014dee:	3208      	adds	r2, #8
 8014df0:	f10a 0a01 	add.w	sl, sl, #1
 8014df4:	106d      	asrs	r5, r5, #1
 8014df6:	9204      	str	r2, [sp, #16]
 8014df8:	e7cc      	b.n	8014d94 <_strtod_l+0x4d4>
 8014dfa:	d0ec      	beq.n	8014dd6 <_strtod_l+0x516>
 8014dfc:	426d      	negs	r5, r5
 8014dfe:	f015 020f 	ands.w	r2, r5, #15
 8014e02:	d00a      	beq.n	8014e1a <_strtod_l+0x55a>
 8014e04:	4b11      	ldr	r3, [pc, #68]	; (8014e4c <_strtod_l+0x58c>)
 8014e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e0a:	4640      	mov	r0, r8
 8014e0c:	4649      	mov	r1, r9
 8014e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e12:	f7eb fd1b 	bl	800084c <__aeabi_ddiv>
 8014e16:	4680      	mov	r8, r0
 8014e18:	4689      	mov	r9, r1
 8014e1a:	112d      	asrs	r5, r5, #4
 8014e1c:	d0db      	beq.n	8014dd6 <_strtod_l+0x516>
 8014e1e:	2d1f      	cmp	r5, #31
 8014e20:	dd1e      	ble.n	8014e60 <_strtod_l+0x5a0>
 8014e22:	2500      	movs	r5, #0
 8014e24:	46ab      	mov	fp, r5
 8014e26:	9509      	str	r5, [sp, #36]	; 0x24
 8014e28:	9505      	str	r5, [sp, #20]
 8014e2a:	2322      	movs	r3, #34	; 0x22
 8014e2c:	f04f 0800 	mov.w	r8, #0
 8014e30:	f04f 0900 	mov.w	r9, #0
 8014e34:	6023      	str	r3, [r4, #0]
 8014e36:	e78d      	b.n	8014d54 <_strtod_l+0x494>
 8014e38:	08046325 	.word	0x08046325
 8014e3c:	0804654c 	.word	0x0804654c
 8014e40:	0804631d 	.word	0x0804631d
 8014e44:	08046354 	.word	0x08046354
 8014e48:	080466dd 	.word	0x080466dd
 8014e4c:	08046460 	.word	0x08046460
 8014e50:	08046438 	.word	0x08046438
 8014e54:	7ff00000 	.word	0x7ff00000
 8014e58:	7ca00000 	.word	0x7ca00000
 8014e5c:	7fefffff 	.word	0x7fefffff
 8014e60:	f015 0310 	ands.w	r3, r5, #16
 8014e64:	bf18      	it	ne
 8014e66:	236a      	movne	r3, #106	; 0x6a
 8014e68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801520c <_strtod_l+0x94c>
 8014e6c:	9304      	str	r3, [sp, #16]
 8014e6e:	4640      	mov	r0, r8
 8014e70:	4649      	mov	r1, r9
 8014e72:	2300      	movs	r3, #0
 8014e74:	07ea      	lsls	r2, r5, #31
 8014e76:	d504      	bpl.n	8014e82 <_strtod_l+0x5c2>
 8014e78:	e9da 2300 	ldrd	r2, r3, [sl]
 8014e7c:	f7eb fbbc 	bl	80005f8 <__aeabi_dmul>
 8014e80:	2301      	movs	r3, #1
 8014e82:	106d      	asrs	r5, r5, #1
 8014e84:	f10a 0a08 	add.w	sl, sl, #8
 8014e88:	d1f4      	bne.n	8014e74 <_strtod_l+0x5b4>
 8014e8a:	b10b      	cbz	r3, 8014e90 <_strtod_l+0x5d0>
 8014e8c:	4680      	mov	r8, r0
 8014e8e:	4689      	mov	r9, r1
 8014e90:	9b04      	ldr	r3, [sp, #16]
 8014e92:	b1bb      	cbz	r3, 8014ec4 <_strtod_l+0x604>
 8014e94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014e98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	4649      	mov	r1, r9
 8014ea0:	dd10      	ble.n	8014ec4 <_strtod_l+0x604>
 8014ea2:	2b1f      	cmp	r3, #31
 8014ea4:	f340 811e 	ble.w	80150e4 <_strtod_l+0x824>
 8014ea8:	2b34      	cmp	r3, #52	; 0x34
 8014eaa:	bfde      	ittt	le
 8014eac:	f04f 33ff 	movle.w	r3, #4294967295
 8014eb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014eb4:	4093      	lslle	r3, r2
 8014eb6:	f04f 0800 	mov.w	r8, #0
 8014eba:	bfcc      	ite	gt
 8014ebc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014ec0:	ea03 0901 	andle.w	r9, r3, r1
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4640      	mov	r0, r8
 8014eca:	4649      	mov	r1, r9
 8014ecc:	f7eb fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d1a6      	bne.n	8014e22 <_strtod_l+0x562>
 8014ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ed6:	9300      	str	r3, [sp, #0]
 8014ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eda:	4633      	mov	r3, r6
 8014edc:	465a      	mov	r2, fp
 8014ede:	4620      	mov	r0, r4
 8014ee0:	f7ff f8c4 	bl	801406c <__s2b>
 8014ee4:	9009      	str	r0, [sp, #36]	; 0x24
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	f43f af2a 	beq.w	8014d40 <_strtod_l+0x480>
 8014eec:	9a08      	ldr	r2, [sp, #32]
 8014eee:	9b05      	ldr	r3, [sp, #20]
 8014ef0:	2a00      	cmp	r2, #0
 8014ef2:	eba3 0307 	sub.w	r3, r3, r7
 8014ef6:	bfa8      	it	ge
 8014ef8:	2300      	movge	r3, #0
 8014efa:	930c      	str	r3, [sp, #48]	; 0x30
 8014efc:	2500      	movs	r5, #0
 8014efe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014f02:	9312      	str	r3, [sp, #72]	; 0x48
 8014f04:	46ab      	mov	fp, r5
 8014f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f08:	4620      	mov	r0, r4
 8014f0a:	6859      	ldr	r1, [r3, #4]
 8014f0c:	f7ff f806 	bl	8013f1c <_Balloc>
 8014f10:	9005      	str	r0, [sp, #20]
 8014f12:	2800      	cmp	r0, #0
 8014f14:	f43f af18 	beq.w	8014d48 <_strtod_l+0x488>
 8014f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f1a:	691a      	ldr	r2, [r3, #16]
 8014f1c:	3202      	adds	r2, #2
 8014f1e:	f103 010c 	add.w	r1, r3, #12
 8014f22:	0092      	lsls	r2, r2, #2
 8014f24:	300c      	adds	r0, #12
 8014f26:	f7fe f91c 	bl	8013162 <memcpy>
 8014f2a:	ec49 8b10 	vmov	d0, r8, r9
 8014f2e:	aa18      	add	r2, sp, #96	; 0x60
 8014f30:	a917      	add	r1, sp, #92	; 0x5c
 8014f32:	4620      	mov	r0, r4
 8014f34:	f7ff fbce 	bl	80146d4 <__d2b>
 8014f38:	ec49 8b18 	vmov	d8, r8, r9
 8014f3c:	9016      	str	r0, [sp, #88]	; 0x58
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	f43f af02 	beq.w	8014d48 <_strtod_l+0x488>
 8014f44:	2101      	movs	r1, #1
 8014f46:	4620      	mov	r0, r4
 8014f48:	f7ff f928 	bl	801419c <__i2b>
 8014f4c:	4683      	mov	fp, r0
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	f43f aefa 	beq.w	8014d48 <_strtod_l+0x488>
 8014f54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014f56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f58:	2e00      	cmp	r6, #0
 8014f5a:	bfab      	itete	ge
 8014f5c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014f5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014f60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014f62:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014f66:	bfac      	ite	ge
 8014f68:	eb06 0a03 	addge.w	sl, r6, r3
 8014f6c:	1b9f      	sublt	r7, r3, r6
 8014f6e:	9b04      	ldr	r3, [sp, #16]
 8014f70:	1af6      	subs	r6, r6, r3
 8014f72:	4416      	add	r6, r2
 8014f74:	4ba0      	ldr	r3, [pc, #640]	; (80151f8 <_strtod_l+0x938>)
 8014f76:	3e01      	subs	r6, #1
 8014f78:	429e      	cmp	r6, r3
 8014f7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014f7e:	f280 80c4 	bge.w	801510a <_strtod_l+0x84a>
 8014f82:	1b9b      	subs	r3, r3, r6
 8014f84:	2b1f      	cmp	r3, #31
 8014f86:	eba2 0203 	sub.w	r2, r2, r3
 8014f8a:	f04f 0101 	mov.w	r1, #1
 8014f8e:	f300 80b0 	bgt.w	80150f2 <_strtod_l+0x832>
 8014f92:	fa01 f303 	lsl.w	r3, r1, r3
 8014f96:	930e      	str	r3, [sp, #56]	; 0x38
 8014f98:	2300      	movs	r3, #0
 8014f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8014f9c:	eb0a 0602 	add.w	r6, sl, r2
 8014fa0:	9b04      	ldr	r3, [sp, #16]
 8014fa2:	45b2      	cmp	sl, r6
 8014fa4:	4417      	add	r7, r2
 8014fa6:	441f      	add	r7, r3
 8014fa8:	4653      	mov	r3, sl
 8014faa:	bfa8      	it	ge
 8014fac:	4633      	movge	r3, r6
 8014fae:	42bb      	cmp	r3, r7
 8014fb0:	bfa8      	it	ge
 8014fb2:	463b      	movge	r3, r7
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	bfc2      	ittt	gt
 8014fb8:	1af6      	subgt	r6, r6, r3
 8014fba:	1aff      	subgt	r7, r7, r3
 8014fbc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	dd17      	ble.n	8014ff6 <_strtod_l+0x736>
 8014fc6:	4659      	mov	r1, fp
 8014fc8:	461a      	mov	r2, r3
 8014fca:	4620      	mov	r0, r4
 8014fcc:	f7ff f9a6 	bl	801431c <__pow5mult>
 8014fd0:	4683      	mov	fp, r0
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f43f aeb8 	beq.w	8014d48 <_strtod_l+0x488>
 8014fd8:	4601      	mov	r1, r0
 8014fda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014fdc:	4620      	mov	r0, r4
 8014fde:	f7ff f8f3 	bl	80141c8 <__multiply>
 8014fe2:	900b      	str	r0, [sp, #44]	; 0x2c
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f43f aeaf 	beq.w	8014d48 <_strtod_l+0x488>
 8014fea:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014fec:	4620      	mov	r0, r4
 8014fee:	f7fe ffd5 	bl	8013f9c <_Bfree>
 8014ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ff4:	9316      	str	r3, [sp, #88]	; 0x58
 8014ff6:	2e00      	cmp	r6, #0
 8014ff8:	f300 808c 	bgt.w	8015114 <_strtod_l+0x854>
 8014ffc:	9b08      	ldr	r3, [sp, #32]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	dd08      	ble.n	8015014 <_strtod_l+0x754>
 8015002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015004:	9905      	ldr	r1, [sp, #20]
 8015006:	4620      	mov	r0, r4
 8015008:	f7ff f988 	bl	801431c <__pow5mult>
 801500c:	9005      	str	r0, [sp, #20]
 801500e:	2800      	cmp	r0, #0
 8015010:	f43f ae9a 	beq.w	8014d48 <_strtod_l+0x488>
 8015014:	2f00      	cmp	r7, #0
 8015016:	dd08      	ble.n	801502a <_strtod_l+0x76a>
 8015018:	9905      	ldr	r1, [sp, #20]
 801501a:	463a      	mov	r2, r7
 801501c:	4620      	mov	r0, r4
 801501e:	f7ff f9d7 	bl	80143d0 <__lshift>
 8015022:	9005      	str	r0, [sp, #20]
 8015024:	2800      	cmp	r0, #0
 8015026:	f43f ae8f 	beq.w	8014d48 <_strtod_l+0x488>
 801502a:	f1ba 0f00 	cmp.w	sl, #0
 801502e:	dd08      	ble.n	8015042 <_strtod_l+0x782>
 8015030:	4659      	mov	r1, fp
 8015032:	4652      	mov	r2, sl
 8015034:	4620      	mov	r0, r4
 8015036:	f7ff f9cb 	bl	80143d0 <__lshift>
 801503a:	4683      	mov	fp, r0
 801503c:	2800      	cmp	r0, #0
 801503e:	f43f ae83 	beq.w	8014d48 <_strtod_l+0x488>
 8015042:	9a05      	ldr	r2, [sp, #20]
 8015044:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015046:	4620      	mov	r0, r4
 8015048:	f7ff fa4a 	bl	80144e0 <__mdiff>
 801504c:	4605      	mov	r5, r0
 801504e:	2800      	cmp	r0, #0
 8015050:	f43f ae7a 	beq.w	8014d48 <_strtod_l+0x488>
 8015054:	68c3      	ldr	r3, [r0, #12]
 8015056:	930b      	str	r3, [sp, #44]	; 0x2c
 8015058:	2300      	movs	r3, #0
 801505a:	60c3      	str	r3, [r0, #12]
 801505c:	4659      	mov	r1, fp
 801505e:	f7ff fa23 	bl	80144a8 <__mcmp>
 8015062:	2800      	cmp	r0, #0
 8015064:	da60      	bge.n	8015128 <_strtod_l+0x868>
 8015066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015068:	ea53 0308 	orrs.w	r3, r3, r8
 801506c:	f040 8084 	bne.w	8015178 <_strtod_l+0x8b8>
 8015070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015074:	2b00      	cmp	r3, #0
 8015076:	d17f      	bne.n	8015178 <_strtod_l+0x8b8>
 8015078:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801507c:	0d1b      	lsrs	r3, r3, #20
 801507e:	051b      	lsls	r3, r3, #20
 8015080:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015084:	d978      	bls.n	8015178 <_strtod_l+0x8b8>
 8015086:	696b      	ldr	r3, [r5, #20]
 8015088:	b913      	cbnz	r3, 8015090 <_strtod_l+0x7d0>
 801508a:	692b      	ldr	r3, [r5, #16]
 801508c:	2b01      	cmp	r3, #1
 801508e:	dd73      	ble.n	8015178 <_strtod_l+0x8b8>
 8015090:	4629      	mov	r1, r5
 8015092:	2201      	movs	r2, #1
 8015094:	4620      	mov	r0, r4
 8015096:	f7ff f99b 	bl	80143d0 <__lshift>
 801509a:	4659      	mov	r1, fp
 801509c:	4605      	mov	r5, r0
 801509e:	f7ff fa03 	bl	80144a8 <__mcmp>
 80150a2:	2800      	cmp	r0, #0
 80150a4:	dd68      	ble.n	8015178 <_strtod_l+0x8b8>
 80150a6:	9904      	ldr	r1, [sp, #16]
 80150a8:	4a54      	ldr	r2, [pc, #336]	; (80151fc <_strtod_l+0x93c>)
 80150aa:	464b      	mov	r3, r9
 80150ac:	2900      	cmp	r1, #0
 80150ae:	f000 8084 	beq.w	80151ba <_strtod_l+0x8fa>
 80150b2:	ea02 0109 	and.w	r1, r2, r9
 80150b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80150ba:	dc7e      	bgt.n	80151ba <_strtod_l+0x8fa>
 80150bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80150c0:	f77f aeb3 	ble.w	8014e2a <_strtod_l+0x56a>
 80150c4:	4b4e      	ldr	r3, [pc, #312]	; (8015200 <_strtod_l+0x940>)
 80150c6:	4640      	mov	r0, r8
 80150c8:	4649      	mov	r1, r9
 80150ca:	2200      	movs	r2, #0
 80150cc:	f7eb fa94 	bl	80005f8 <__aeabi_dmul>
 80150d0:	4b4a      	ldr	r3, [pc, #296]	; (80151fc <_strtod_l+0x93c>)
 80150d2:	400b      	ands	r3, r1
 80150d4:	4680      	mov	r8, r0
 80150d6:	4689      	mov	r9, r1
 80150d8:	2b00      	cmp	r3, #0
 80150da:	f47f ae3f 	bne.w	8014d5c <_strtod_l+0x49c>
 80150de:	2322      	movs	r3, #34	; 0x22
 80150e0:	6023      	str	r3, [r4, #0]
 80150e2:	e63b      	b.n	8014d5c <_strtod_l+0x49c>
 80150e4:	f04f 32ff 	mov.w	r2, #4294967295
 80150e8:	fa02 f303 	lsl.w	r3, r2, r3
 80150ec:	ea03 0808 	and.w	r8, r3, r8
 80150f0:	e6e8      	b.n	8014ec4 <_strtod_l+0x604>
 80150f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80150f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80150fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80150fe:	36e2      	adds	r6, #226	; 0xe2
 8015100:	fa01 f306 	lsl.w	r3, r1, r6
 8015104:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015108:	e748      	b.n	8014f9c <_strtod_l+0x6dc>
 801510a:	2100      	movs	r1, #0
 801510c:	2301      	movs	r3, #1
 801510e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015112:	e743      	b.n	8014f9c <_strtod_l+0x6dc>
 8015114:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015116:	4632      	mov	r2, r6
 8015118:	4620      	mov	r0, r4
 801511a:	f7ff f959 	bl	80143d0 <__lshift>
 801511e:	9016      	str	r0, [sp, #88]	; 0x58
 8015120:	2800      	cmp	r0, #0
 8015122:	f47f af6b 	bne.w	8014ffc <_strtod_l+0x73c>
 8015126:	e60f      	b.n	8014d48 <_strtod_l+0x488>
 8015128:	46ca      	mov	sl, r9
 801512a:	d171      	bne.n	8015210 <_strtod_l+0x950>
 801512c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801512e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015132:	b352      	cbz	r2, 801518a <_strtod_l+0x8ca>
 8015134:	4a33      	ldr	r2, [pc, #204]	; (8015204 <_strtod_l+0x944>)
 8015136:	4293      	cmp	r3, r2
 8015138:	d12a      	bne.n	8015190 <_strtod_l+0x8d0>
 801513a:	9b04      	ldr	r3, [sp, #16]
 801513c:	4641      	mov	r1, r8
 801513e:	b1fb      	cbz	r3, 8015180 <_strtod_l+0x8c0>
 8015140:	4b2e      	ldr	r3, [pc, #184]	; (80151fc <_strtod_l+0x93c>)
 8015142:	ea09 0303 	and.w	r3, r9, r3
 8015146:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801514a:	f04f 32ff 	mov.w	r2, #4294967295
 801514e:	d81a      	bhi.n	8015186 <_strtod_l+0x8c6>
 8015150:	0d1b      	lsrs	r3, r3, #20
 8015152:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015156:	fa02 f303 	lsl.w	r3, r2, r3
 801515a:	4299      	cmp	r1, r3
 801515c:	d118      	bne.n	8015190 <_strtod_l+0x8d0>
 801515e:	4b2a      	ldr	r3, [pc, #168]	; (8015208 <_strtod_l+0x948>)
 8015160:	459a      	cmp	sl, r3
 8015162:	d102      	bne.n	801516a <_strtod_l+0x8aa>
 8015164:	3101      	adds	r1, #1
 8015166:	f43f adef 	beq.w	8014d48 <_strtod_l+0x488>
 801516a:	4b24      	ldr	r3, [pc, #144]	; (80151fc <_strtod_l+0x93c>)
 801516c:	ea0a 0303 	and.w	r3, sl, r3
 8015170:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015174:	f04f 0800 	mov.w	r8, #0
 8015178:	9b04      	ldr	r3, [sp, #16]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d1a2      	bne.n	80150c4 <_strtod_l+0x804>
 801517e:	e5ed      	b.n	8014d5c <_strtod_l+0x49c>
 8015180:	f04f 33ff 	mov.w	r3, #4294967295
 8015184:	e7e9      	b.n	801515a <_strtod_l+0x89a>
 8015186:	4613      	mov	r3, r2
 8015188:	e7e7      	b.n	801515a <_strtod_l+0x89a>
 801518a:	ea53 0308 	orrs.w	r3, r3, r8
 801518e:	d08a      	beq.n	80150a6 <_strtod_l+0x7e6>
 8015190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015192:	b1e3      	cbz	r3, 80151ce <_strtod_l+0x90e>
 8015194:	ea13 0f0a 	tst.w	r3, sl
 8015198:	d0ee      	beq.n	8015178 <_strtod_l+0x8b8>
 801519a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801519c:	9a04      	ldr	r2, [sp, #16]
 801519e:	4640      	mov	r0, r8
 80151a0:	4649      	mov	r1, r9
 80151a2:	b1c3      	cbz	r3, 80151d6 <_strtod_l+0x916>
 80151a4:	f7ff fb6f 	bl	8014886 <sulp>
 80151a8:	4602      	mov	r2, r0
 80151aa:	460b      	mov	r3, r1
 80151ac:	ec51 0b18 	vmov	r0, r1, d8
 80151b0:	f7eb f86c 	bl	800028c <__adddf3>
 80151b4:	4680      	mov	r8, r0
 80151b6:	4689      	mov	r9, r1
 80151b8:	e7de      	b.n	8015178 <_strtod_l+0x8b8>
 80151ba:	4013      	ands	r3, r2
 80151bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80151c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80151c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80151c8:	f04f 38ff 	mov.w	r8, #4294967295
 80151cc:	e7d4      	b.n	8015178 <_strtod_l+0x8b8>
 80151ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151d0:	ea13 0f08 	tst.w	r3, r8
 80151d4:	e7e0      	b.n	8015198 <_strtod_l+0x8d8>
 80151d6:	f7ff fb56 	bl	8014886 <sulp>
 80151da:	4602      	mov	r2, r0
 80151dc:	460b      	mov	r3, r1
 80151de:	ec51 0b18 	vmov	r0, r1, d8
 80151e2:	f7eb f851 	bl	8000288 <__aeabi_dsub>
 80151e6:	2200      	movs	r2, #0
 80151e8:	2300      	movs	r3, #0
 80151ea:	4680      	mov	r8, r0
 80151ec:	4689      	mov	r9, r1
 80151ee:	f7eb fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d0c0      	beq.n	8015178 <_strtod_l+0x8b8>
 80151f6:	e618      	b.n	8014e2a <_strtod_l+0x56a>
 80151f8:	fffffc02 	.word	0xfffffc02
 80151fc:	7ff00000 	.word	0x7ff00000
 8015200:	39500000 	.word	0x39500000
 8015204:	000fffff 	.word	0x000fffff
 8015208:	7fefffff 	.word	0x7fefffff
 801520c:	08046560 	.word	0x08046560
 8015210:	4659      	mov	r1, fp
 8015212:	4628      	mov	r0, r5
 8015214:	f7ff fab8 	bl	8014788 <__ratio>
 8015218:	ec57 6b10 	vmov	r6, r7, d0
 801521c:	ee10 0a10 	vmov	r0, s0
 8015220:	2200      	movs	r2, #0
 8015222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015226:	4639      	mov	r1, r7
 8015228:	f7eb fc62 	bl	8000af0 <__aeabi_dcmple>
 801522c:	2800      	cmp	r0, #0
 801522e:	d071      	beq.n	8015314 <_strtod_l+0xa54>
 8015230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015232:	2b00      	cmp	r3, #0
 8015234:	d17c      	bne.n	8015330 <_strtod_l+0xa70>
 8015236:	f1b8 0f00 	cmp.w	r8, #0
 801523a:	d15a      	bne.n	80152f2 <_strtod_l+0xa32>
 801523c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015240:	2b00      	cmp	r3, #0
 8015242:	d15d      	bne.n	8015300 <_strtod_l+0xa40>
 8015244:	4b90      	ldr	r3, [pc, #576]	; (8015488 <_strtod_l+0xbc8>)
 8015246:	2200      	movs	r2, #0
 8015248:	4630      	mov	r0, r6
 801524a:	4639      	mov	r1, r7
 801524c:	f7eb fc46 	bl	8000adc <__aeabi_dcmplt>
 8015250:	2800      	cmp	r0, #0
 8015252:	d15c      	bne.n	801530e <_strtod_l+0xa4e>
 8015254:	4630      	mov	r0, r6
 8015256:	4639      	mov	r1, r7
 8015258:	4b8c      	ldr	r3, [pc, #560]	; (801548c <_strtod_l+0xbcc>)
 801525a:	2200      	movs	r2, #0
 801525c:	f7eb f9cc 	bl	80005f8 <__aeabi_dmul>
 8015260:	4606      	mov	r6, r0
 8015262:	460f      	mov	r7, r1
 8015264:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015268:	9606      	str	r6, [sp, #24]
 801526a:	9307      	str	r3, [sp, #28]
 801526c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015270:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015274:	4b86      	ldr	r3, [pc, #536]	; (8015490 <_strtod_l+0xbd0>)
 8015276:	ea0a 0303 	and.w	r3, sl, r3
 801527a:	930d      	str	r3, [sp, #52]	; 0x34
 801527c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801527e:	4b85      	ldr	r3, [pc, #532]	; (8015494 <_strtod_l+0xbd4>)
 8015280:	429a      	cmp	r2, r3
 8015282:	f040 8090 	bne.w	80153a6 <_strtod_l+0xae6>
 8015286:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801528a:	ec49 8b10 	vmov	d0, r8, r9
 801528e:	f7ff f9b1 	bl	80145f4 <__ulp>
 8015292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015296:	ec51 0b10 	vmov	r0, r1, d0
 801529a:	f7eb f9ad 	bl	80005f8 <__aeabi_dmul>
 801529e:	4642      	mov	r2, r8
 80152a0:	464b      	mov	r3, r9
 80152a2:	f7ea fff3 	bl	800028c <__adddf3>
 80152a6:	460b      	mov	r3, r1
 80152a8:	4979      	ldr	r1, [pc, #484]	; (8015490 <_strtod_l+0xbd0>)
 80152aa:	4a7b      	ldr	r2, [pc, #492]	; (8015498 <_strtod_l+0xbd8>)
 80152ac:	4019      	ands	r1, r3
 80152ae:	4291      	cmp	r1, r2
 80152b0:	4680      	mov	r8, r0
 80152b2:	d944      	bls.n	801533e <_strtod_l+0xa7e>
 80152b4:	ee18 2a90 	vmov	r2, s17
 80152b8:	4b78      	ldr	r3, [pc, #480]	; (801549c <_strtod_l+0xbdc>)
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d104      	bne.n	80152c8 <_strtod_l+0xa08>
 80152be:	ee18 3a10 	vmov	r3, s16
 80152c2:	3301      	adds	r3, #1
 80152c4:	f43f ad40 	beq.w	8014d48 <_strtod_l+0x488>
 80152c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801549c <_strtod_l+0xbdc>
 80152cc:	f04f 38ff 	mov.w	r8, #4294967295
 80152d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80152d2:	4620      	mov	r0, r4
 80152d4:	f7fe fe62 	bl	8013f9c <_Bfree>
 80152d8:	9905      	ldr	r1, [sp, #20]
 80152da:	4620      	mov	r0, r4
 80152dc:	f7fe fe5e 	bl	8013f9c <_Bfree>
 80152e0:	4659      	mov	r1, fp
 80152e2:	4620      	mov	r0, r4
 80152e4:	f7fe fe5a 	bl	8013f9c <_Bfree>
 80152e8:	4629      	mov	r1, r5
 80152ea:	4620      	mov	r0, r4
 80152ec:	f7fe fe56 	bl	8013f9c <_Bfree>
 80152f0:	e609      	b.n	8014f06 <_strtod_l+0x646>
 80152f2:	f1b8 0f01 	cmp.w	r8, #1
 80152f6:	d103      	bne.n	8015300 <_strtod_l+0xa40>
 80152f8:	f1b9 0f00 	cmp.w	r9, #0
 80152fc:	f43f ad95 	beq.w	8014e2a <_strtod_l+0x56a>
 8015300:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015458 <_strtod_l+0xb98>
 8015304:	4f60      	ldr	r7, [pc, #384]	; (8015488 <_strtod_l+0xbc8>)
 8015306:	ed8d 7b06 	vstr	d7, [sp, #24]
 801530a:	2600      	movs	r6, #0
 801530c:	e7ae      	b.n	801526c <_strtod_l+0x9ac>
 801530e:	4f5f      	ldr	r7, [pc, #380]	; (801548c <_strtod_l+0xbcc>)
 8015310:	2600      	movs	r6, #0
 8015312:	e7a7      	b.n	8015264 <_strtod_l+0x9a4>
 8015314:	4b5d      	ldr	r3, [pc, #372]	; (801548c <_strtod_l+0xbcc>)
 8015316:	4630      	mov	r0, r6
 8015318:	4639      	mov	r1, r7
 801531a:	2200      	movs	r2, #0
 801531c:	f7eb f96c 	bl	80005f8 <__aeabi_dmul>
 8015320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015322:	4606      	mov	r6, r0
 8015324:	460f      	mov	r7, r1
 8015326:	2b00      	cmp	r3, #0
 8015328:	d09c      	beq.n	8015264 <_strtod_l+0x9a4>
 801532a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801532e:	e79d      	b.n	801526c <_strtod_l+0x9ac>
 8015330:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015460 <_strtod_l+0xba0>
 8015334:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015338:	ec57 6b17 	vmov	r6, r7, d7
 801533c:	e796      	b.n	801526c <_strtod_l+0x9ac>
 801533e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015342:	9b04      	ldr	r3, [sp, #16]
 8015344:	46ca      	mov	sl, r9
 8015346:	2b00      	cmp	r3, #0
 8015348:	d1c2      	bne.n	80152d0 <_strtod_l+0xa10>
 801534a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801534e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015350:	0d1b      	lsrs	r3, r3, #20
 8015352:	051b      	lsls	r3, r3, #20
 8015354:	429a      	cmp	r2, r3
 8015356:	d1bb      	bne.n	80152d0 <_strtod_l+0xa10>
 8015358:	4630      	mov	r0, r6
 801535a:	4639      	mov	r1, r7
 801535c:	f7eb fcac 	bl	8000cb8 <__aeabi_d2lz>
 8015360:	f7eb f91c 	bl	800059c <__aeabi_l2d>
 8015364:	4602      	mov	r2, r0
 8015366:	460b      	mov	r3, r1
 8015368:	4630      	mov	r0, r6
 801536a:	4639      	mov	r1, r7
 801536c:	f7ea ff8c 	bl	8000288 <__aeabi_dsub>
 8015370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015372:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015376:	ea43 0308 	orr.w	r3, r3, r8
 801537a:	4313      	orrs	r3, r2
 801537c:	4606      	mov	r6, r0
 801537e:	460f      	mov	r7, r1
 8015380:	d054      	beq.n	801542c <_strtod_l+0xb6c>
 8015382:	a339      	add	r3, pc, #228	; (adr r3, 8015468 <_strtod_l+0xba8>)
 8015384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015388:	f7eb fba8 	bl	8000adc <__aeabi_dcmplt>
 801538c:	2800      	cmp	r0, #0
 801538e:	f47f ace5 	bne.w	8014d5c <_strtod_l+0x49c>
 8015392:	a337      	add	r3, pc, #220	; (adr r3, 8015470 <_strtod_l+0xbb0>)
 8015394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015398:	4630      	mov	r0, r6
 801539a:	4639      	mov	r1, r7
 801539c:	f7eb fbbc 	bl	8000b18 <__aeabi_dcmpgt>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d095      	beq.n	80152d0 <_strtod_l+0xa10>
 80153a4:	e4da      	b.n	8014d5c <_strtod_l+0x49c>
 80153a6:	9b04      	ldr	r3, [sp, #16]
 80153a8:	b333      	cbz	r3, 80153f8 <_strtod_l+0xb38>
 80153aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80153b0:	d822      	bhi.n	80153f8 <_strtod_l+0xb38>
 80153b2:	a331      	add	r3, pc, #196	; (adr r3, 8015478 <_strtod_l+0xbb8>)
 80153b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b8:	4630      	mov	r0, r6
 80153ba:	4639      	mov	r1, r7
 80153bc:	f7eb fb98 	bl	8000af0 <__aeabi_dcmple>
 80153c0:	b1a0      	cbz	r0, 80153ec <_strtod_l+0xb2c>
 80153c2:	4639      	mov	r1, r7
 80153c4:	4630      	mov	r0, r6
 80153c6:	f7eb fbef 	bl	8000ba8 <__aeabi_d2uiz>
 80153ca:	2801      	cmp	r0, #1
 80153cc:	bf38      	it	cc
 80153ce:	2001      	movcc	r0, #1
 80153d0:	f7eb f898 	bl	8000504 <__aeabi_ui2d>
 80153d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	bb23      	cbnz	r3, 8015426 <_strtod_l+0xb66>
 80153dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153e0:	9010      	str	r0, [sp, #64]	; 0x40
 80153e2:	9311      	str	r3, [sp, #68]	; 0x44
 80153e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80153e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80153ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80153f4:	1a9b      	subs	r3, r3, r2
 80153f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80153f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80153fc:	eeb0 0a48 	vmov.f32	s0, s16
 8015400:	eef0 0a68 	vmov.f32	s1, s17
 8015404:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015408:	f7ff f8f4 	bl	80145f4 <__ulp>
 801540c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015410:	ec53 2b10 	vmov	r2, r3, d0
 8015414:	f7eb f8f0 	bl	80005f8 <__aeabi_dmul>
 8015418:	ec53 2b18 	vmov	r2, r3, d8
 801541c:	f7ea ff36 	bl	800028c <__adddf3>
 8015420:	4680      	mov	r8, r0
 8015422:	4689      	mov	r9, r1
 8015424:	e78d      	b.n	8015342 <_strtod_l+0xa82>
 8015426:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801542a:	e7db      	b.n	80153e4 <_strtod_l+0xb24>
 801542c:	a314      	add	r3, pc, #80	; (adr r3, 8015480 <_strtod_l+0xbc0>)
 801542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015432:	f7eb fb53 	bl	8000adc <__aeabi_dcmplt>
 8015436:	e7b3      	b.n	80153a0 <_strtod_l+0xae0>
 8015438:	2300      	movs	r3, #0
 801543a:	930a      	str	r3, [sp, #40]	; 0x28
 801543c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801543e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015440:	6013      	str	r3, [r2, #0]
 8015442:	f7ff ba7c 	b.w	801493e <_strtod_l+0x7e>
 8015446:	2a65      	cmp	r2, #101	; 0x65
 8015448:	f43f ab75 	beq.w	8014b36 <_strtod_l+0x276>
 801544c:	2a45      	cmp	r2, #69	; 0x45
 801544e:	f43f ab72 	beq.w	8014b36 <_strtod_l+0x276>
 8015452:	2301      	movs	r3, #1
 8015454:	f7ff bbaa 	b.w	8014bac <_strtod_l+0x2ec>
 8015458:	00000000 	.word	0x00000000
 801545c:	bff00000 	.word	0xbff00000
 8015460:	00000000 	.word	0x00000000
 8015464:	3ff00000 	.word	0x3ff00000
 8015468:	94a03595 	.word	0x94a03595
 801546c:	3fdfffff 	.word	0x3fdfffff
 8015470:	35afe535 	.word	0x35afe535
 8015474:	3fe00000 	.word	0x3fe00000
 8015478:	ffc00000 	.word	0xffc00000
 801547c:	41dfffff 	.word	0x41dfffff
 8015480:	94a03595 	.word	0x94a03595
 8015484:	3fcfffff 	.word	0x3fcfffff
 8015488:	3ff00000 	.word	0x3ff00000
 801548c:	3fe00000 	.word	0x3fe00000
 8015490:	7ff00000 	.word	0x7ff00000
 8015494:	7fe00000 	.word	0x7fe00000
 8015498:	7c9fffff 	.word	0x7c9fffff
 801549c:	7fefffff 	.word	0x7fefffff

080154a0 <_strtod_r>:
 80154a0:	4b01      	ldr	r3, [pc, #4]	; (80154a8 <_strtod_r+0x8>)
 80154a2:	f7ff ba0d 	b.w	80148c0 <_strtod_l>
 80154a6:	bf00      	nop
 80154a8:	20000a48 	.word	0x20000a48

080154ac <_strtol_l.constprop.0>:
 80154ac:	2b01      	cmp	r3, #1
 80154ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154b2:	d001      	beq.n	80154b8 <_strtol_l.constprop.0+0xc>
 80154b4:	2b24      	cmp	r3, #36	; 0x24
 80154b6:	d906      	bls.n	80154c6 <_strtol_l.constprop.0+0x1a>
 80154b8:	f7fd fe26 	bl	8013108 <__errno>
 80154bc:	2316      	movs	r3, #22
 80154be:	6003      	str	r3, [r0, #0]
 80154c0:	2000      	movs	r0, #0
 80154c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80155ac <_strtol_l.constprop.0+0x100>
 80154ca:	460d      	mov	r5, r1
 80154cc:	462e      	mov	r6, r5
 80154ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80154d6:	f017 0708 	ands.w	r7, r7, #8
 80154da:	d1f7      	bne.n	80154cc <_strtol_l.constprop.0+0x20>
 80154dc:	2c2d      	cmp	r4, #45	; 0x2d
 80154de:	d132      	bne.n	8015546 <_strtol_l.constprop.0+0x9a>
 80154e0:	782c      	ldrb	r4, [r5, #0]
 80154e2:	2701      	movs	r7, #1
 80154e4:	1cb5      	adds	r5, r6, #2
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d05b      	beq.n	80155a2 <_strtol_l.constprop.0+0xf6>
 80154ea:	2b10      	cmp	r3, #16
 80154ec:	d109      	bne.n	8015502 <_strtol_l.constprop.0+0x56>
 80154ee:	2c30      	cmp	r4, #48	; 0x30
 80154f0:	d107      	bne.n	8015502 <_strtol_l.constprop.0+0x56>
 80154f2:	782c      	ldrb	r4, [r5, #0]
 80154f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80154f8:	2c58      	cmp	r4, #88	; 0x58
 80154fa:	d14d      	bne.n	8015598 <_strtol_l.constprop.0+0xec>
 80154fc:	786c      	ldrb	r4, [r5, #1]
 80154fe:	2310      	movs	r3, #16
 8015500:	3502      	adds	r5, #2
 8015502:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015506:	f108 38ff 	add.w	r8, r8, #4294967295
 801550a:	f04f 0e00 	mov.w	lr, #0
 801550e:	fbb8 f9f3 	udiv	r9, r8, r3
 8015512:	4676      	mov	r6, lr
 8015514:	fb03 8a19 	mls	sl, r3, r9, r8
 8015518:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801551c:	f1bc 0f09 	cmp.w	ip, #9
 8015520:	d816      	bhi.n	8015550 <_strtol_l.constprop.0+0xa4>
 8015522:	4664      	mov	r4, ip
 8015524:	42a3      	cmp	r3, r4
 8015526:	dd24      	ble.n	8015572 <_strtol_l.constprop.0+0xc6>
 8015528:	f1be 3fff 	cmp.w	lr, #4294967295
 801552c:	d008      	beq.n	8015540 <_strtol_l.constprop.0+0x94>
 801552e:	45b1      	cmp	r9, r6
 8015530:	d31c      	bcc.n	801556c <_strtol_l.constprop.0+0xc0>
 8015532:	d101      	bne.n	8015538 <_strtol_l.constprop.0+0x8c>
 8015534:	45a2      	cmp	sl, r4
 8015536:	db19      	blt.n	801556c <_strtol_l.constprop.0+0xc0>
 8015538:	fb06 4603 	mla	r6, r6, r3, r4
 801553c:	f04f 0e01 	mov.w	lr, #1
 8015540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015544:	e7e8      	b.n	8015518 <_strtol_l.constprop.0+0x6c>
 8015546:	2c2b      	cmp	r4, #43	; 0x2b
 8015548:	bf04      	itt	eq
 801554a:	782c      	ldrbeq	r4, [r5, #0]
 801554c:	1cb5      	addeq	r5, r6, #2
 801554e:	e7ca      	b.n	80154e6 <_strtol_l.constprop.0+0x3a>
 8015550:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015554:	f1bc 0f19 	cmp.w	ip, #25
 8015558:	d801      	bhi.n	801555e <_strtol_l.constprop.0+0xb2>
 801555a:	3c37      	subs	r4, #55	; 0x37
 801555c:	e7e2      	b.n	8015524 <_strtol_l.constprop.0+0x78>
 801555e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015562:	f1bc 0f19 	cmp.w	ip, #25
 8015566:	d804      	bhi.n	8015572 <_strtol_l.constprop.0+0xc6>
 8015568:	3c57      	subs	r4, #87	; 0x57
 801556a:	e7db      	b.n	8015524 <_strtol_l.constprop.0+0x78>
 801556c:	f04f 3eff 	mov.w	lr, #4294967295
 8015570:	e7e6      	b.n	8015540 <_strtol_l.constprop.0+0x94>
 8015572:	f1be 3fff 	cmp.w	lr, #4294967295
 8015576:	d105      	bne.n	8015584 <_strtol_l.constprop.0+0xd8>
 8015578:	2322      	movs	r3, #34	; 0x22
 801557a:	6003      	str	r3, [r0, #0]
 801557c:	4646      	mov	r6, r8
 801557e:	b942      	cbnz	r2, 8015592 <_strtol_l.constprop.0+0xe6>
 8015580:	4630      	mov	r0, r6
 8015582:	e79e      	b.n	80154c2 <_strtol_l.constprop.0+0x16>
 8015584:	b107      	cbz	r7, 8015588 <_strtol_l.constprop.0+0xdc>
 8015586:	4276      	negs	r6, r6
 8015588:	2a00      	cmp	r2, #0
 801558a:	d0f9      	beq.n	8015580 <_strtol_l.constprop.0+0xd4>
 801558c:	f1be 0f00 	cmp.w	lr, #0
 8015590:	d000      	beq.n	8015594 <_strtol_l.constprop.0+0xe8>
 8015592:	1e69      	subs	r1, r5, #1
 8015594:	6011      	str	r1, [r2, #0]
 8015596:	e7f3      	b.n	8015580 <_strtol_l.constprop.0+0xd4>
 8015598:	2430      	movs	r4, #48	; 0x30
 801559a:	2b00      	cmp	r3, #0
 801559c:	d1b1      	bne.n	8015502 <_strtol_l.constprop.0+0x56>
 801559e:	2308      	movs	r3, #8
 80155a0:	e7af      	b.n	8015502 <_strtol_l.constprop.0+0x56>
 80155a2:	2c30      	cmp	r4, #48	; 0x30
 80155a4:	d0a5      	beq.n	80154f2 <_strtol_l.constprop.0+0x46>
 80155a6:	230a      	movs	r3, #10
 80155a8:	e7ab      	b.n	8015502 <_strtol_l.constprop.0+0x56>
 80155aa:	bf00      	nop
 80155ac:	08046589 	.word	0x08046589

080155b0 <_strtol_r>:
 80155b0:	f7ff bf7c 	b.w	80154ac <_strtol_l.constprop.0>

080155b4 <__ssputs_r>:
 80155b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155b8:	688e      	ldr	r6, [r1, #8]
 80155ba:	461f      	mov	r7, r3
 80155bc:	42be      	cmp	r6, r7
 80155be:	680b      	ldr	r3, [r1, #0]
 80155c0:	4682      	mov	sl, r0
 80155c2:	460c      	mov	r4, r1
 80155c4:	4690      	mov	r8, r2
 80155c6:	d82c      	bhi.n	8015622 <__ssputs_r+0x6e>
 80155c8:	898a      	ldrh	r2, [r1, #12]
 80155ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80155ce:	d026      	beq.n	801561e <__ssputs_r+0x6a>
 80155d0:	6965      	ldr	r5, [r4, #20]
 80155d2:	6909      	ldr	r1, [r1, #16]
 80155d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80155d8:	eba3 0901 	sub.w	r9, r3, r1
 80155dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80155e0:	1c7b      	adds	r3, r7, #1
 80155e2:	444b      	add	r3, r9
 80155e4:	106d      	asrs	r5, r5, #1
 80155e6:	429d      	cmp	r5, r3
 80155e8:	bf38      	it	cc
 80155ea:	461d      	movcc	r5, r3
 80155ec:	0553      	lsls	r3, r2, #21
 80155ee:	d527      	bpl.n	8015640 <__ssputs_r+0x8c>
 80155f0:	4629      	mov	r1, r5
 80155f2:	f7fc fb99 	bl	8011d28 <_malloc_r>
 80155f6:	4606      	mov	r6, r0
 80155f8:	b360      	cbz	r0, 8015654 <__ssputs_r+0xa0>
 80155fa:	6921      	ldr	r1, [r4, #16]
 80155fc:	464a      	mov	r2, r9
 80155fe:	f7fd fdb0 	bl	8013162 <memcpy>
 8015602:	89a3      	ldrh	r3, [r4, #12]
 8015604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801560c:	81a3      	strh	r3, [r4, #12]
 801560e:	6126      	str	r6, [r4, #16]
 8015610:	6165      	str	r5, [r4, #20]
 8015612:	444e      	add	r6, r9
 8015614:	eba5 0509 	sub.w	r5, r5, r9
 8015618:	6026      	str	r6, [r4, #0]
 801561a:	60a5      	str	r5, [r4, #8]
 801561c:	463e      	mov	r6, r7
 801561e:	42be      	cmp	r6, r7
 8015620:	d900      	bls.n	8015624 <__ssputs_r+0x70>
 8015622:	463e      	mov	r6, r7
 8015624:	6820      	ldr	r0, [r4, #0]
 8015626:	4632      	mov	r2, r6
 8015628:	4641      	mov	r1, r8
 801562a:	f000 fb6f 	bl	8015d0c <memmove>
 801562e:	68a3      	ldr	r3, [r4, #8]
 8015630:	1b9b      	subs	r3, r3, r6
 8015632:	60a3      	str	r3, [r4, #8]
 8015634:	6823      	ldr	r3, [r4, #0]
 8015636:	4433      	add	r3, r6
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	2000      	movs	r0, #0
 801563c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015640:	462a      	mov	r2, r5
 8015642:	f7fc fbfd 	bl	8011e40 <_realloc_r>
 8015646:	4606      	mov	r6, r0
 8015648:	2800      	cmp	r0, #0
 801564a:	d1e0      	bne.n	801560e <__ssputs_r+0x5a>
 801564c:	6921      	ldr	r1, [r4, #16]
 801564e:	4650      	mov	r0, sl
 8015650:	f7fe fc18 	bl	8013e84 <_free_r>
 8015654:	230c      	movs	r3, #12
 8015656:	f8ca 3000 	str.w	r3, [sl]
 801565a:	89a3      	ldrh	r3, [r4, #12]
 801565c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015660:	81a3      	strh	r3, [r4, #12]
 8015662:	f04f 30ff 	mov.w	r0, #4294967295
 8015666:	e7e9      	b.n	801563c <__ssputs_r+0x88>

08015668 <_svfiprintf_r>:
 8015668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801566c:	4698      	mov	r8, r3
 801566e:	898b      	ldrh	r3, [r1, #12]
 8015670:	061b      	lsls	r3, r3, #24
 8015672:	b09d      	sub	sp, #116	; 0x74
 8015674:	4607      	mov	r7, r0
 8015676:	460d      	mov	r5, r1
 8015678:	4614      	mov	r4, r2
 801567a:	d50e      	bpl.n	801569a <_svfiprintf_r+0x32>
 801567c:	690b      	ldr	r3, [r1, #16]
 801567e:	b963      	cbnz	r3, 801569a <_svfiprintf_r+0x32>
 8015680:	2140      	movs	r1, #64	; 0x40
 8015682:	f7fc fb51 	bl	8011d28 <_malloc_r>
 8015686:	6028      	str	r0, [r5, #0]
 8015688:	6128      	str	r0, [r5, #16]
 801568a:	b920      	cbnz	r0, 8015696 <_svfiprintf_r+0x2e>
 801568c:	230c      	movs	r3, #12
 801568e:	603b      	str	r3, [r7, #0]
 8015690:	f04f 30ff 	mov.w	r0, #4294967295
 8015694:	e0d0      	b.n	8015838 <_svfiprintf_r+0x1d0>
 8015696:	2340      	movs	r3, #64	; 0x40
 8015698:	616b      	str	r3, [r5, #20]
 801569a:	2300      	movs	r3, #0
 801569c:	9309      	str	r3, [sp, #36]	; 0x24
 801569e:	2320      	movs	r3, #32
 80156a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80156a8:	2330      	movs	r3, #48	; 0x30
 80156aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015850 <_svfiprintf_r+0x1e8>
 80156ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156b2:	f04f 0901 	mov.w	r9, #1
 80156b6:	4623      	mov	r3, r4
 80156b8:	469a      	mov	sl, r3
 80156ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156be:	b10a      	cbz	r2, 80156c4 <_svfiprintf_r+0x5c>
 80156c0:	2a25      	cmp	r2, #37	; 0x25
 80156c2:	d1f9      	bne.n	80156b8 <_svfiprintf_r+0x50>
 80156c4:	ebba 0b04 	subs.w	fp, sl, r4
 80156c8:	d00b      	beq.n	80156e2 <_svfiprintf_r+0x7a>
 80156ca:	465b      	mov	r3, fp
 80156cc:	4622      	mov	r2, r4
 80156ce:	4629      	mov	r1, r5
 80156d0:	4638      	mov	r0, r7
 80156d2:	f7ff ff6f 	bl	80155b4 <__ssputs_r>
 80156d6:	3001      	adds	r0, #1
 80156d8:	f000 80a9 	beq.w	801582e <_svfiprintf_r+0x1c6>
 80156dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156de:	445a      	add	r2, fp
 80156e0:	9209      	str	r2, [sp, #36]	; 0x24
 80156e2:	f89a 3000 	ldrb.w	r3, [sl]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	f000 80a1 	beq.w	801582e <_svfiprintf_r+0x1c6>
 80156ec:	2300      	movs	r3, #0
 80156ee:	f04f 32ff 	mov.w	r2, #4294967295
 80156f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156f6:	f10a 0a01 	add.w	sl, sl, #1
 80156fa:	9304      	str	r3, [sp, #16]
 80156fc:	9307      	str	r3, [sp, #28]
 80156fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015702:	931a      	str	r3, [sp, #104]	; 0x68
 8015704:	4654      	mov	r4, sl
 8015706:	2205      	movs	r2, #5
 8015708:	f814 1b01 	ldrb.w	r1, [r4], #1
 801570c:	4850      	ldr	r0, [pc, #320]	; (8015850 <_svfiprintf_r+0x1e8>)
 801570e:	f7ea fd5f 	bl	80001d0 <memchr>
 8015712:	9a04      	ldr	r2, [sp, #16]
 8015714:	b9d8      	cbnz	r0, 801574e <_svfiprintf_r+0xe6>
 8015716:	06d0      	lsls	r0, r2, #27
 8015718:	bf44      	itt	mi
 801571a:	2320      	movmi	r3, #32
 801571c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015720:	0711      	lsls	r1, r2, #28
 8015722:	bf44      	itt	mi
 8015724:	232b      	movmi	r3, #43	; 0x2b
 8015726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801572a:	f89a 3000 	ldrb.w	r3, [sl]
 801572e:	2b2a      	cmp	r3, #42	; 0x2a
 8015730:	d015      	beq.n	801575e <_svfiprintf_r+0xf6>
 8015732:	9a07      	ldr	r2, [sp, #28]
 8015734:	4654      	mov	r4, sl
 8015736:	2000      	movs	r0, #0
 8015738:	f04f 0c0a 	mov.w	ip, #10
 801573c:	4621      	mov	r1, r4
 801573e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015742:	3b30      	subs	r3, #48	; 0x30
 8015744:	2b09      	cmp	r3, #9
 8015746:	d94d      	bls.n	80157e4 <_svfiprintf_r+0x17c>
 8015748:	b1b0      	cbz	r0, 8015778 <_svfiprintf_r+0x110>
 801574a:	9207      	str	r2, [sp, #28]
 801574c:	e014      	b.n	8015778 <_svfiprintf_r+0x110>
 801574e:	eba0 0308 	sub.w	r3, r0, r8
 8015752:	fa09 f303 	lsl.w	r3, r9, r3
 8015756:	4313      	orrs	r3, r2
 8015758:	9304      	str	r3, [sp, #16]
 801575a:	46a2      	mov	sl, r4
 801575c:	e7d2      	b.n	8015704 <_svfiprintf_r+0x9c>
 801575e:	9b03      	ldr	r3, [sp, #12]
 8015760:	1d19      	adds	r1, r3, #4
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	9103      	str	r1, [sp, #12]
 8015766:	2b00      	cmp	r3, #0
 8015768:	bfbb      	ittet	lt
 801576a:	425b      	neglt	r3, r3
 801576c:	f042 0202 	orrlt.w	r2, r2, #2
 8015770:	9307      	strge	r3, [sp, #28]
 8015772:	9307      	strlt	r3, [sp, #28]
 8015774:	bfb8      	it	lt
 8015776:	9204      	strlt	r2, [sp, #16]
 8015778:	7823      	ldrb	r3, [r4, #0]
 801577a:	2b2e      	cmp	r3, #46	; 0x2e
 801577c:	d10c      	bne.n	8015798 <_svfiprintf_r+0x130>
 801577e:	7863      	ldrb	r3, [r4, #1]
 8015780:	2b2a      	cmp	r3, #42	; 0x2a
 8015782:	d134      	bne.n	80157ee <_svfiprintf_r+0x186>
 8015784:	9b03      	ldr	r3, [sp, #12]
 8015786:	1d1a      	adds	r2, r3, #4
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	9203      	str	r2, [sp, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	bfb8      	it	lt
 8015790:	f04f 33ff 	movlt.w	r3, #4294967295
 8015794:	3402      	adds	r4, #2
 8015796:	9305      	str	r3, [sp, #20]
 8015798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015860 <_svfiprintf_r+0x1f8>
 801579c:	7821      	ldrb	r1, [r4, #0]
 801579e:	2203      	movs	r2, #3
 80157a0:	4650      	mov	r0, sl
 80157a2:	f7ea fd15 	bl	80001d0 <memchr>
 80157a6:	b138      	cbz	r0, 80157b8 <_svfiprintf_r+0x150>
 80157a8:	9b04      	ldr	r3, [sp, #16]
 80157aa:	eba0 000a 	sub.w	r0, r0, sl
 80157ae:	2240      	movs	r2, #64	; 0x40
 80157b0:	4082      	lsls	r2, r0
 80157b2:	4313      	orrs	r3, r2
 80157b4:	3401      	adds	r4, #1
 80157b6:	9304      	str	r3, [sp, #16]
 80157b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157bc:	4825      	ldr	r0, [pc, #148]	; (8015854 <_svfiprintf_r+0x1ec>)
 80157be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157c2:	2206      	movs	r2, #6
 80157c4:	f7ea fd04 	bl	80001d0 <memchr>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d038      	beq.n	801583e <_svfiprintf_r+0x1d6>
 80157cc:	4b22      	ldr	r3, [pc, #136]	; (8015858 <_svfiprintf_r+0x1f0>)
 80157ce:	bb1b      	cbnz	r3, 8015818 <_svfiprintf_r+0x1b0>
 80157d0:	9b03      	ldr	r3, [sp, #12]
 80157d2:	3307      	adds	r3, #7
 80157d4:	f023 0307 	bic.w	r3, r3, #7
 80157d8:	3308      	adds	r3, #8
 80157da:	9303      	str	r3, [sp, #12]
 80157dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157de:	4433      	add	r3, r6
 80157e0:	9309      	str	r3, [sp, #36]	; 0x24
 80157e2:	e768      	b.n	80156b6 <_svfiprintf_r+0x4e>
 80157e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80157e8:	460c      	mov	r4, r1
 80157ea:	2001      	movs	r0, #1
 80157ec:	e7a6      	b.n	801573c <_svfiprintf_r+0xd4>
 80157ee:	2300      	movs	r3, #0
 80157f0:	3401      	adds	r4, #1
 80157f2:	9305      	str	r3, [sp, #20]
 80157f4:	4619      	mov	r1, r3
 80157f6:	f04f 0c0a 	mov.w	ip, #10
 80157fa:	4620      	mov	r0, r4
 80157fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015800:	3a30      	subs	r2, #48	; 0x30
 8015802:	2a09      	cmp	r2, #9
 8015804:	d903      	bls.n	801580e <_svfiprintf_r+0x1a6>
 8015806:	2b00      	cmp	r3, #0
 8015808:	d0c6      	beq.n	8015798 <_svfiprintf_r+0x130>
 801580a:	9105      	str	r1, [sp, #20]
 801580c:	e7c4      	b.n	8015798 <_svfiprintf_r+0x130>
 801580e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015812:	4604      	mov	r4, r0
 8015814:	2301      	movs	r3, #1
 8015816:	e7f0      	b.n	80157fa <_svfiprintf_r+0x192>
 8015818:	ab03      	add	r3, sp, #12
 801581a:	9300      	str	r3, [sp, #0]
 801581c:	462a      	mov	r2, r5
 801581e:	4b0f      	ldr	r3, [pc, #60]	; (801585c <_svfiprintf_r+0x1f4>)
 8015820:	a904      	add	r1, sp, #16
 8015822:	4638      	mov	r0, r7
 8015824:	f7fc fbdc 	bl	8011fe0 <_printf_float>
 8015828:	1c42      	adds	r2, r0, #1
 801582a:	4606      	mov	r6, r0
 801582c:	d1d6      	bne.n	80157dc <_svfiprintf_r+0x174>
 801582e:	89ab      	ldrh	r3, [r5, #12]
 8015830:	065b      	lsls	r3, r3, #25
 8015832:	f53f af2d 	bmi.w	8015690 <_svfiprintf_r+0x28>
 8015836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015838:	b01d      	add	sp, #116	; 0x74
 801583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801583e:	ab03      	add	r3, sp, #12
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	462a      	mov	r2, r5
 8015844:	4b05      	ldr	r3, [pc, #20]	; (801585c <_svfiprintf_r+0x1f4>)
 8015846:	a904      	add	r1, sp, #16
 8015848:	4638      	mov	r0, r7
 801584a:	f7fc fe6d 	bl	8012528 <_printf_i>
 801584e:	e7eb      	b.n	8015828 <_svfiprintf_r+0x1c0>
 8015850:	08046689 	.word	0x08046689
 8015854:	08046693 	.word	0x08046693
 8015858:	08011fe1 	.word	0x08011fe1
 801585c:	080155b5 	.word	0x080155b5
 8015860:	0804668f 	.word	0x0804668f

08015864 <__sfputc_r>:
 8015864:	6893      	ldr	r3, [r2, #8]
 8015866:	3b01      	subs	r3, #1
 8015868:	2b00      	cmp	r3, #0
 801586a:	b410      	push	{r4}
 801586c:	6093      	str	r3, [r2, #8]
 801586e:	da08      	bge.n	8015882 <__sfputc_r+0x1e>
 8015870:	6994      	ldr	r4, [r2, #24]
 8015872:	42a3      	cmp	r3, r4
 8015874:	db01      	blt.n	801587a <__sfputc_r+0x16>
 8015876:	290a      	cmp	r1, #10
 8015878:	d103      	bne.n	8015882 <__sfputc_r+0x1e>
 801587a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801587e:	f7fd bb4c 	b.w	8012f1a <__swbuf_r>
 8015882:	6813      	ldr	r3, [r2, #0]
 8015884:	1c58      	adds	r0, r3, #1
 8015886:	6010      	str	r0, [r2, #0]
 8015888:	7019      	strb	r1, [r3, #0]
 801588a:	4608      	mov	r0, r1
 801588c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015890:	4770      	bx	lr

08015892 <__sfputs_r>:
 8015892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015894:	4606      	mov	r6, r0
 8015896:	460f      	mov	r7, r1
 8015898:	4614      	mov	r4, r2
 801589a:	18d5      	adds	r5, r2, r3
 801589c:	42ac      	cmp	r4, r5
 801589e:	d101      	bne.n	80158a4 <__sfputs_r+0x12>
 80158a0:	2000      	movs	r0, #0
 80158a2:	e007      	b.n	80158b4 <__sfputs_r+0x22>
 80158a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158a8:	463a      	mov	r2, r7
 80158aa:	4630      	mov	r0, r6
 80158ac:	f7ff ffda 	bl	8015864 <__sfputc_r>
 80158b0:	1c43      	adds	r3, r0, #1
 80158b2:	d1f3      	bne.n	801589c <__sfputs_r+0xa>
 80158b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080158b8 <_vfiprintf_r>:
 80158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158bc:	460d      	mov	r5, r1
 80158be:	b09d      	sub	sp, #116	; 0x74
 80158c0:	4614      	mov	r4, r2
 80158c2:	4698      	mov	r8, r3
 80158c4:	4606      	mov	r6, r0
 80158c6:	b118      	cbz	r0, 80158d0 <_vfiprintf_r+0x18>
 80158c8:	6a03      	ldr	r3, [r0, #32]
 80158ca:	b90b      	cbnz	r3, 80158d0 <_vfiprintf_r+0x18>
 80158cc:	f7fd f9ea 	bl	8012ca4 <__sinit>
 80158d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158d2:	07d9      	lsls	r1, r3, #31
 80158d4:	d405      	bmi.n	80158e2 <_vfiprintf_r+0x2a>
 80158d6:	89ab      	ldrh	r3, [r5, #12]
 80158d8:	059a      	lsls	r2, r3, #22
 80158da:	d402      	bmi.n	80158e2 <_vfiprintf_r+0x2a>
 80158dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158de:	f7fd fc3e 	bl	801315e <__retarget_lock_acquire_recursive>
 80158e2:	89ab      	ldrh	r3, [r5, #12]
 80158e4:	071b      	lsls	r3, r3, #28
 80158e6:	d501      	bpl.n	80158ec <_vfiprintf_r+0x34>
 80158e8:	692b      	ldr	r3, [r5, #16]
 80158ea:	b99b      	cbnz	r3, 8015914 <_vfiprintf_r+0x5c>
 80158ec:	4629      	mov	r1, r5
 80158ee:	4630      	mov	r0, r6
 80158f0:	f7fd fb50 	bl	8012f94 <__swsetup_r>
 80158f4:	b170      	cbz	r0, 8015914 <_vfiprintf_r+0x5c>
 80158f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158f8:	07dc      	lsls	r4, r3, #31
 80158fa:	d504      	bpl.n	8015906 <_vfiprintf_r+0x4e>
 80158fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015900:	b01d      	add	sp, #116	; 0x74
 8015902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015906:	89ab      	ldrh	r3, [r5, #12]
 8015908:	0598      	lsls	r0, r3, #22
 801590a:	d4f7      	bmi.n	80158fc <_vfiprintf_r+0x44>
 801590c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801590e:	f7fd fc27 	bl	8013160 <__retarget_lock_release_recursive>
 8015912:	e7f3      	b.n	80158fc <_vfiprintf_r+0x44>
 8015914:	2300      	movs	r3, #0
 8015916:	9309      	str	r3, [sp, #36]	; 0x24
 8015918:	2320      	movs	r3, #32
 801591a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801591e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015922:	2330      	movs	r3, #48	; 0x30
 8015924:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015ad8 <_vfiprintf_r+0x220>
 8015928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801592c:	f04f 0901 	mov.w	r9, #1
 8015930:	4623      	mov	r3, r4
 8015932:	469a      	mov	sl, r3
 8015934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015938:	b10a      	cbz	r2, 801593e <_vfiprintf_r+0x86>
 801593a:	2a25      	cmp	r2, #37	; 0x25
 801593c:	d1f9      	bne.n	8015932 <_vfiprintf_r+0x7a>
 801593e:	ebba 0b04 	subs.w	fp, sl, r4
 8015942:	d00b      	beq.n	801595c <_vfiprintf_r+0xa4>
 8015944:	465b      	mov	r3, fp
 8015946:	4622      	mov	r2, r4
 8015948:	4629      	mov	r1, r5
 801594a:	4630      	mov	r0, r6
 801594c:	f7ff ffa1 	bl	8015892 <__sfputs_r>
 8015950:	3001      	adds	r0, #1
 8015952:	f000 80a9 	beq.w	8015aa8 <_vfiprintf_r+0x1f0>
 8015956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015958:	445a      	add	r2, fp
 801595a:	9209      	str	r2, [sp, #36]	; 0x24
 801595c:	f89a 3000 	ldrb.w	r3, [sl]
 8015960:	2b00      	cmp	r3, #0
 8015962:	f000 80a1 	beq.w	8015aa8 <_vfiprintf_r+0x1f0>
 8015966:	2300      	movs	r3, #0
 8015968:	f04f 32ff 	mov.w	r2, #4294967295
 801596c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015970:	f10a 0a01 	add.w	sl, sl, #1
 8015974:	9304      	str	r3, [sp, #16]
 8015976:	9307      	str	r3, [sp, #28]
 8015978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801597c:	931a      	str	r3, [sp, #104]	; 0x68
 801597e:	4654      	mov	r4, sl
 8015980:	2205      	movs	r2, #5
 8015982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015986:	4854      	ldr	r0, [pc, #336]	; (8015ad8 <_vfiprintf_r+0x220>)
 8015988:	f7ea fc22 	bl	80001d0 <memchr>
 801598c:	9a04      	ldr	r2, [sp, #16]
 801598e:	b9d8      	cbnz	r0, 80159c8 <_vfiprintf_r+0x110>
 8015990:	06d1      	lsls	r1, r2, #27
 8015992:	bf44      	itt	mi
 8015994:	2320      	movmi	r3, #32
 8015996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801599a:	0713      	lsls	r3, r2, #28
 801599c:	bf44      	itt	mi
 801599e:	232b      	movmi	r3, #43	; 0x2b
 80159a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159a4:	f89a 3000 	ldrb.w	r3, [sl]
 80159a8:	2b2a      	cmp	r3, #42	; 0x2a
 80159aa:	d015      	beq.n	80159d8 <_vfiprintf_r+0x120>
 80159ac:	9a07      	ldr	r2, [sp, #28]
 80159ae:	4654      	mov	r4, sl
 80159b0:	2000      	movs	r0, #0
 80159b2:	f04f 0c0a 	mov.w	ip, #10
 80159b6:	4621      	mov	r1, r4
 80159b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159bc:	3b30      	subs	r3, #48	; 0x30
 80159be:	2b09      	cmp	r3, #9
 80159c0:	d94d      	bls.n	8015a5e <_vfiprintf_r+0x1a6>
 80159c2:	b1b0      	cbz	r0, 80159f2 <_vfiprintf_r+0x13a>
 80159c4:	9207      	str	r2, [sp, #28]
 80159c6:	e014      	b.n	80159f2 <_vfiprintf_r+0x13a>
 80159c8:	eba0 0308 	sub.w	r3, r0, r8
 80159cc:	fa09 f303 	lsl.w	r3, r9, r3
 80159d0:	4313      	orrs	r3, r2
 80159d2:	9304      	str	r3, [sp, #16]
 80159d4:	46a2      	mov	sl, r4
 80159d6:	e7d2      	b.n	801597e <_vfiprintf_r+0xc6>
 80159d8:	9b03      	ldr	r3, [sp, #12]
 80159da:	1d19      	adds	r1, r3, #4
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	9103      	str	r1, [sp, #12]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	bfbb      	ittet	lt
 80159e4:	425b      	neglt	r3, r3
 80159e6:	f042 0202 	orrlt.w	r2, r2, #2
 80159ea:	9307      	strge	r3, [sp, #28]
 80159ec:	9307      	strlt	r3, [sp, #28]
 80159ee:	bfb8      	it	lt
 80159f0:	9204      	strlt	r2, [sp, #16]
 80159f2:	7823      	ldrb	r3, [r4, #0]
 80159f4:	2b2e      	cmp	r3, #46	; 0x2e
 80159f6:	d10c      	bne.n	8015a12 <_vfiprintf_r+0x15a>
 80159f8:	7863      	ldrb	r3, [r4, #1]
 80159fa:	2b2a      	cmp	r3, #42	; 0x2a
 80159fc:	d134      	bne.n	8015a68 <_vfiprintf_r+0x1b0>
 80159fe:	9b03      	ldr	r3, [sp, #12]
 8015a00:	1d1a      	adds	r2, r3, #4
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	9203      	str	r2, [sp, #12]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	bfb8      	it	lt
 8015a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a0e:	3402      	adds	r4, #2
 8015a10:	9305      	str	r3, [sp, #20]
 8015a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015ae8 <_vfiprintf_r+0x230>
 8015a16:	7821      	ldrb	r1, [r4, #0]
 8015a18:	2203      	movs	r2, #3
 8015a1a:	4650      	mov	r0, sl
 8015a1c:	f7ea fbd8 	bl	80001d0 <memchr>
 8015a20:	b138      	cbz	r0, 8015a32 <_vfiprintf_r+0x17a>
 8015a22:	9b04      	ldr	r3, [sp, #16]
 8015a24:	eba0 000a 	sub.w	r0, r0, sl
 8015a28:	2240      	movs	r2, #64	; 0x40
 8015a2a:	4082      	lsls	r2, r0
 8015a2c:	4313      	orrs	r3, r2
 8015a2e:	3401      	adds	r4, #1
 8015a30:	9304      	str	r3, [sp, #16]
 8015a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a36:	4829      	ldr	r0, [pc, #164]	; (8015adc <_vfiprintf_r+0x224>)
 8015a38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a3c:	2206      	movs	r2, #6
 8015a3e:	f7ea fbc7 	bl	80001d0 <memchr>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d03f      	beq.n	8015ac6 <_vfiprintf_r+0x20e>
 8015a46:	4b26      	ldr	r3, [pc, #152]	; (8015ae0 <_vfiprintf_r+0x228>)
 8015a48:	bb1b      	cbnz	r3, 8015a92 <_vfiprintf_r+0x1da>
 8015a4a:	9b03      	ldr	r3, [sp, #12]
 8015a4c:	3307      	adds	r3, #7
 8015a4e:	f023 0307 	bic.w	r3, r3, #7
 8015a52:	3308      	adds	r3, #8
 8015a54:	9303      	str	r3, [sp, #12]
 8015a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a58:	443b      	add	r3, r7
 8015a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8015a5c:	e768      	b.n	8015930 <_vfiprintf_r+0x78>
 8015a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a62:	460c      	mov	r4, r1
 8015a64:	2001      	movs	r0, #1
 8015a66:	e7a6      	b.n	80159b6 <_vfiprintf_r+0xfe>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	3401      	adds	r4, #1
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	4619      	mov	r1, r3
 8015a70:	f04f 0c0a 	mov.w	ip, #10
 8015a74:	4620      	mov	r0, r4
 8015a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a7a:	3a30      	subs	r2, #48	; 0x30
 8015a7c:	2a09      	cmp	r2, #9
 8015a7e:	d903      	bls.n	8015a88 <_vfiprintf_r+0x1d0>
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d0c6      	beq.n	8015a12 <_vfiprintf_r+0x15a>
 8015a84:	9105      	str	r1, [sp, #20]
 8015a86:	e7c4      	b.n	8015a12 <_vfiprintf_r+0x15a>
 8015a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a8c:	4604      	mov	r4, r0
 8015a8e:	2301      	movs	r3, #1
 8015a90:	e7f0      	b.n	8015a74 <_vfiprintf_r+0x1bc>
 8015a92:	ab03      	add	r3, sp, #12
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	462a      	mov	r2, r5
 8015a98:	4b12      	ldr	r3, [pc, #72]	; (8015ae4 <_vfiprintf_r+0x22c>)
 8015a9a:	a904      	add	r1, sp, #16
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	f7fc fa9f 	bl	8011fe0 <_printf_float>
 8015aa2:	4607      	mov	r7, r0
 8015aa4:	1c78      	adds	r0, r7, #1
 8015aa6:	d1d6      	bne.n	8015a56 <_vfiprintf_r+0x19e>
 8015aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015aaa:	07d9      	lsls	r1, r3, #31
 8015aac:	d405      	bmi.n	8015aba <_vfiprintf_r+0x202>
 8015aae:	89ab      	ldrh	r3, [r5, #12]
 8015ab0:	059a      	lsls	r2, r3, #22
 8015ab2:	d402      	bmi.n	8015aba <_vfiprintf_r+0x202>
 8015ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ab6:	f7fd fb53 	bl	8013160 <__retarget_lock_release_recursive>
 8015aba:	89ab      	ldrh	r3, [r5, #12]
 8015abc:	065b      	lsls	r3, r3, #25
 8015abe:	f53f af1d 	bmi.w	80158fc <_vfiprintf_r+0x44>
 8015ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ac4:	e71c      	b.n	8015900 <_vfiprintf_r+0x48>
 8015ac6:	ab03      	add	r3, sp, #12
 8015ac8:	9300      	str	r3, [sp, #0]
 8015aca:	462a      	mov	r2, r5
 8015acc:	4b05      	ldr	r3, [pc, #20]	; (8015ae4 <_vfiprintf_r+0x22c>)
 8015ace:	a904      	add	r1, sp, #16
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	f7fc fd29 	bl	8012528 <_printf_i>
 8015ad6:	e7e4      	b.n	8015aa2 <_vfiprintf_r+0x1ea>
 8015ad8:	08046689 	.word	0x08046689
 8015adc:	08046693 	.word	0x08046693
 8015ae0:	08011fe1 	.word	0x08011fe1
 8015ae4:	08015893 	.word	0x08015893
 8015ae8:	0804668f 	.word	0x0804668f

08015aec <__sflush_r>:
 8015aec:	898a      	ldrh	r2, [r1, #12]
 8015aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af2:	4605      	mov	r5, r0
 8015af4:	0710      	lsls	r0, r2, #28
 8015af6:	460c      	mov	r4, r1
 8015af8:	d458      	bmi.n	8015bac <__sflush_r+0xc0>
 8015afa:	684b      	ldr	r3, [r1, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	dc05      	bgt.n	8015b0c <__sflush_r+0x20>
 8015b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	dc02      	bgt.n	8015b0c <__sflush_r+0x20>
 8015b06:	2000      	movs	r0, #0
 8015b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b0e:	2e00      	cmp	r6, #0
 8015b10:	d0f9      	beq.n	8015b06 <__sflush_r+0x1a>
 8015b12:	2300      	movs	r3, #0
 8015b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b18:	682f      	ldr	r7, [r5, #0]
 8015b1a:	6a21      	ldr	r1, [r4, #32]
 8015b1c:	602b      	str	r3, [r5, #0]
 8015b1e:	d032      	beq.n	8015b86 <__sflush_r+0x9a>
 8015b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b22:	89a3      	ldrh	r3, [r4, #12]
 8015b24:	075a      	lsls	r2, r3, #29
 8015b26:	d505      	bpl.n	8015b34 <__sflush_r+0x48>
 8015b28:	6863      	ldr	r3, [r4, #4]
 8015b2a:	1ac0      	subs	r0, r0, r3
 8015b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b2e:	b10b      	cbz	r3, 8015b34 <__sflush_r+0x48>
 8015b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b32:	1ac0      	subs	r0, r0, r3
 8015b34:	2300      	movs	r3, #0
 8015b36:	4602      	mov	r2, r0
 8015b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b3a:	6a21      	ldr	r1, [r4, #32]
 8015b3c:	4628      	mov	r0, r5
 8015b3e:	47b0      	blx	r6
 8015b40:	1c43      	adds	r3, r0, #1
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	d106      	bne.n	8015b54 <__sflush_r+0x68>
 8015b46:	6829      	ldr	r1, [r5, #0]
 8015b48:	291d      	cmp	r1, #29
 8015b4a:	d82b      	bhi.n	8015ba4 <__sflush_r+0xb8>
 8015b4c:	4a29      	ldr	r2, [pc, #164]	; (8015bf4 <__sflush_r+0x108>)
 8015b4e:	410a      	asrs	r2, r1
 8015b50:	07d6      	lsls	r6, r2, #31
 8015b52:	d427      	bmi.n	8015ba4 <__sflush_r+0xb8>
 8015b54:	2200      	movs	r2, #0
 8015b56:	6062      	str	r2, [r4, #4]
 8015b58:	04d9      	lsls	r1, r3, #19
 8015b5a:	6922      	ldr	r2, [r4, #16]
 8015b5c:	6022      	str	r2, [r4, #0]
 8015b5e:	d504      	bpl.n	8015b6a <__sflush_r+0x7e>
 8015b60:	1c42      	adds	r2, r0, #1
 8015b62:	d101      	bne.n	8015b68 <__sflush_r+0x7c>
 8015b64:	682b      	ldr	r3, [r5, #0]
 8015b66:	b903      	cbnz	r3, 8015b6a <__sflush_r+0x7e>
 8015b68:	6560      	str	r0, [r4, #84]	; 0x54
 8015b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b6c:	602f      	str	r7, [r5, #0]
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	d0c9      	beq.n	8015b06 <__sflush_r+0x1a>
 8015b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b76:	4299      	cmp	r1, r3
 8015b78:	d002      	beq.n	8015b80 <__sflush_r+0x94>
 8015b7a:	4628      	mov	r0, r5
 8015b7c:	f7fe f982 	bl	8013e84 <_free_r>
 8015b80:	2000      	movs	r0, #0
 8015b82:	6360      	str	r0, [r4, #52]	; 0x34
 8015b84:	e7c0      	b.n	8015b08 <__sflush_r+0x1c>
 8015b86:	2301      	movs	r3, #1
 8015b88:	4628      	mov	r0, r5
 8015b8a:	47b0      	blx	r6
 8015b8c:	1c41      	adds	r1, r0, #1
 8015b8e:	d1c8      	bne.n	8015b22 <__sflush_r+0x36>
 8015b90:	682b      	ldr	r3, [r5, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d0c5      	beq.n	8015b22 <__sflush_r+0x36>
 8015b96:	2b1d      	cmp	r3, #29
 8015b98:	d001      	beq.n	8015b9e <__sflush_r+0xb2>
 8015b9a:	2b16      	cmp	r3, #22
 8015b9c:	d101      	bne.n	8015ba2 <__sflush_r+0xb6>
 8015b9e:	602f      	str	r7, [r5, #0]
 8015ba0:	e7b1      	b.n	8015b06 <__sflush_r+0x1a>
 8015ba2:	89a3      	ldrh	r3, [r4, #12]
 8015ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba8:	81a3      	strh	r3, [r4, #12]
 8015baa:	e7ad      	b.n	8015b08 <__sflush_r+0x1c>
 8015bac:	690f      	ldr	r7, [r1, #16]
 8015bae:	2f00      	cmp	r7, #0
 8015bb0:	d0a9      	beq.n	8015b06 <__sflush_r+0x1a>
 8015bb2:	0793      	lsls	r3, r2, #30
 8015bb4:	680e      	ldr	r6, [r1, #0]
 8015bb6:	bf08      	it	eq
 8015bb8:	694b      	ldreq	r3, [r1, #20]
 8015bba:	600f      	str	r7, [r1, #0]
 8015bbc:	bf18      	it	ne
 8015bbe:	2300      	movne	r3, #0
 8015bc0:	eba6 0807 	sub.w	r8, r6, r7
 8015bc4:	608b      	str	r3, [r1, #8]
 8015bc6:	f1b8 0f00 	cmp.w	r8, #0
 8015bca:	dd9c      	ble.n	8015b06 <__sflush_r+0x1a>
 8015bcc:	6a21      	ldr	r1, [r4, #32]
 8015bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015bd0:	4643      	mov	r3, r8
 8015bd2:	463a      	mov	r2, r7
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	47b0      	blx	r6
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	dc06      	bgt.n	8015bea <__sflush_r+0xfe>
 8015bdc:	89a3      	ldrh	r3, [r4, #12]
 8015bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015be2:	81a3      	strh	r3, [r4, #12]
 8015be4:	f04f 30ff 	mov.w	r0, #4294967295
 8015be8:	e78e      	b.n	8015b08 <__sflush_r+0x1c>
 8015bea:	4407      	add	r7, r0
 8015bec:	eba8 0800 	sub.w	r8, r8, r0
 8015bf0:	e7e9      	b.n	8015bc6 <__sflush_r+0xda>
 8015bf2:	bf00      	nop
 8015bf4:	dfbffffe 	.word	0xdfbffffe

08015bf8 <_fflush_r>:
 8015bf8:	b538      	push	{r3, r4, r5, lr}
 8015bfa:	690b      	ldr	r3, [r1, #16]
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	460c      	mov	r4, r1
 8015c00:	b913      	cbnz	r3, 8015c08 <_fflush_r+0x10>
 8015c02:	2500      	movs	r5, #0
 8015c04:	4628      	mov	r0, r5
 8015c06:	bd38      	pop	{r3, r4, r5, pc}
 8015c08:	b118      	cbz	r0, 8015c12 <_fflush_r+0x1a>
 8015c0a:	6a03      	ldr	r3, [r0, #32]
 8015c0c:	b90b      	cbnz	r3, 8015c12 <_fflush_r+0x1a>
 8015c0e:	f7fd f849 	bl	8012ca4 <__sinit>
 8015c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d0f3      	beq.n	8015c02 <_fflush_r+0xa>
 8015c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c1c:	07d0      	lsls	r0, r2, #31
 8015c1e:	d404      	bmi.n	8015c2a <_fflush_r+0x32>
 8015c20:	0599      	lsls	r1, r3, #22
 8015c22:	d402      	bmi.n	8015c2a <_fflush_r+0x32>
 8015c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c26:	f7fd fa9a 	bl	801315e <__retarget_lock_acquire_recursive>
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	4621      	mov	r1, r4
 8015c2e:	f7ff ff5d 	bl	8015aec <__sflush_r>
 8015c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c34:	07da      	lsls	r2, r3, #31
 8015c36:	4605      	mov	r5, r0
 8015c38:	d4e4      	bmi.n	8015c04 <_fflush_r+0xc>
 8015c3a:	89a3      	ldrh	r3, [r4, #12]
 8015c3c:	059b      	lsls	r3, r3, #22
 8015c3e:	d4e1      	bmi.n	8015c04 <_fflush_r+0xc>
 8015c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c42:	f7fd fa8d 	bl	8013160 <__retarget_lock_release_recursive>
 8015c46:	e7dd      	b.n	8015c04 <_fflush_r+0xc>

08015c48 <__swhatbuf_r>:
 8015c48:	b570      	push	{r4, r5, r6, lr}
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c50:	2900      	cmp	r1, #0
 8015c52:	b096      	sub	sp, #88	; 0x58
 8015c54:	4615      	mov	r5, r2
 8015c56:	461e      	mov	r6, r3
 8015c58:	da0d      	bge.n	8015c76 <__swhatbuf_r+0x2e>
 8015c5a:	89a3      	ldrh	r3, [r4, #12]
 8015c5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015c60:	f04f 0100 	mov.w	r1, #0
 8015c64:	bf0c      	ite	eq
 8015c66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015c6a:	2340      	movne	r3, #64	; 0x40
 8015c6c:	2000      	movs	r0, #0
 8015c6e:	6031      	str	r1, [r6, #0]
 8015c70:	602b      	str	r3, [r5, #0]
 8015c72:	b016      	add	sp, #88	; 0x58
 8015c74:	bd70      	pop	{r4, r5, r6, pc}
 8015c76:	466a      	mov	r2, sp
 8015c78:	f000 f874 	bl	8015d64 <_fstat_r>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	dbec      	blt.n	8015c5a <__swhatbuf_r+0x12>
 8015c80:	9901      	ldr	r1, [sp, #4]
 8015c82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015c86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015c8a:	4259      	negs	r1, r3
 8015c8c:	4159      	adcs	r1, r3
 8015c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c92:	e7eb      	b.n	8015c6c <__swhatbuf_r+0x24>

08015c94 <__smakebuf_r>:
 8015c94:	898b      	ldrh	r3, [r1, #12]
 8015c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c98:	079d      	lsls	r5, r3, #30
 8015c9a:	4606      	mov	r6, r0
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	d507      	bpl.n	8015cb0 <__smakebuf_r+0x1c>
 8015ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ca4:	6023      	str	r3, [r4, #0]
 8015ca6:	6123      	str	r3, [r4, #16]
 8015ca8:	2301      	movs	r3, #1
 8015caa:	6163      	str	r3, [r4, #20]
 8015cac:	b002      	add	sp, #8
 8015cae:	bd70      	pop	{r4, r5, r6, pc}
 8015cb0:	ab01      	add	r3, sp, #4
 8015cb2:	466a      	mov	r2, sp
 8015cb4:	f7ff ffc8 	bl	8015c48 <__swhatbuf_r>
 8015cb8:	9900      	ldr	r1, [sp, #0]
 8015cba:	4605      	mov	r5, r0
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f7fc f833 	bl	8011d28 <_malloc_r>
 8015cc2:	b948      	cbnz	r0, 8015cd8 <__smakebuf_r+0x44>
 8015cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cc8:	059a      	lsls	r2, r3, #22
 8015cca:	d4ef      	bmi.n	8015cac <__smakebuf_r+0x18>
 8015ccc:	f023 0303 	bic.w	r3, r3, #3
 8015cd0:	f043 0302 	orr.w	r3, r3, #2
 8015cd4:	81a3      	strh	r3, [r4, #12]
 8015cd6:	e7e3      	b.n	8015ca0 <__smakebuf_r+0xc>
 8015cd8:	89a3      	ldrh	r3, [r4, #12]
 8015cda:	6020      	str	r0, [r4, #0]
 8015cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ce0:	81a3      	strh	r3, [r4, #12]
 8015ce2:	9b00      	ldr	r3, [sp, #0]
 8015ce4:	6163      	str	r3, [r4, #20]
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	6120      	str	r0, [r4, #16]
 8015cea:	b15b      	cbz	r3, 8015d04 <__smakebuf_r+0x70>
 8015cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f000 f849 	bl	8015d88 <_isatty_r>
 8015cf6:	b128      	cbz	r0, 8015d04 <__smakebuf_r+0x70>
 8015cf8:	89a3      	ldrh	r3, [r4, #12]
 8015cfa:	f023 0303 	bic.w	r3, r3, #3
 8015cfe:	f043 0301 	orr.w	r3, r3, #1
 8015d02:	81a3      	strh	r3, [r4, #12]
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	431d      	orrs	r5, r3
 8015d08:	81a5      	strh	r5, [r4, #12]
 8015d0a:	e7cf      	b.n	8015cac <__smakebuf_r+0x18>

08015d0c <memmove>:
 8015d0c:	4288      	cmp	r0, r1
 8015d0e:	b510      	push	{r4, lr}
 8015d10:	eb01 0402 	add.w	r4, r1, r2
 8015d14:	d902      	bls.n	8015d1c <memmove+0x10>
 8015d16:	4284      	cmp	r4, r0
 8015d18:	4623      	mov	r3, r4
 8015d1a:	d807      	bhi.n	8015d2c <memmove+0x20>
 8015d1c:	1e43      	subs	r3, r0, #1
 8015d1e:	42a1      	cmp	r1, r4
 8015d20:	d008      	beq.n	8015d34 <memmove+0x28>
 8015d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d2a:	e7f8      	b.n	8015d1e <memmove+0x12>
 8015d2c:	4402      	add	r2, r0
 8015d2e:	4601      	mov	r1, r0
 8015d30:	428a      	cmp	r2, r1
 8015d32:	d100      	bne.n	8015d36 <memmove+0x2a>
 8015d34:	bd10      	pop	{r4, pc}
 8015d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d3e:	e7f7      	b.n	8015d30 <memmove+0x24>

08015d40 <strncmp>:
 8015d40:	b510      	push	{r4, lr}
 8015d42:	b16a      	cbz	r2, 8015d60 <strncmp+0x20>
 8015d44:	3901      	subs	r1, #1
 8015d46:	1884      	adds	r4, r0, r2
 8015d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d103      	bne.n	8015d5c <strncmp+0x1c>
 8015d54:	42a0      	cmp	r0, r4
 8015d56:	d001      	beq.n	8015d5c <strncmp+0x1c>
 8015d58:	2a00      	cmp	r2, #0
 8015d5a:	d1f5      	bne.n	8015d48 <strncmp+0x8>
 8015d5c:	1ad0      	subs	r0, r2, r3
 8015d5e:	bd10      	pop	{r4, pc}
 8015d60:	4610      	mov	r0, r2
 8015d62:	e7fc      	b.n	8015d5e <strncmp+0x1e>

08015d64 <_fstat_r>:
 8015d64:	b538      	push	{r3, r4, r5, lr}
 8015d66:	4d07      	ldr	r5, [pc, #28]	; (8015d84 <_fstat_r+0x20>)
 8015d68:	2300      	movs	r3, #0
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	4608      	mov	r0, r1
 8015d6e:	4611      	mov	r1, r2
 8015d70:	602b      	str	r3, [r5, #0]
 8015d72:	f000 fd65 	bl	8016840 <_fstat>
 8015d76:	1c43      	adds	r3, r0, #1
 8015d78:	d102      	bne.n	8015d80 <_fstat_r+0x1c>
 8015d7a:	682b      	ldr	r3, [r5, #0]
 8015d7c:	b103      	cbz	r3, 8015d80 <_fstat_r+0x1c>
 8015d7e:	6023      	str	r3, [r4, #0]
 8015d80:	bd38      	pop	{r3, r4, r5, pc}
 8015d82:	bf00      	nop
 8015d84:	20005cec 	.word	0x20005cec

08015d88 <_isatty_r>:
 8015d88:	b538      	push	{r3, r4, r5, lr}
 8015d8a:	4d06      	ldr	r5, [pc, #24]	; (8015da4 <_isatty_r+0x1c>)
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	4604      	mov	r4, r0
 8015d90:	4608      	mov	r0, r1
 8015d92:	602b      	str	r3, [r5, #0]
 8015d94:	f000 fd64 	bl	8016860 <_isatty>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d102      	bne.n	8015da2 <_isatty_r+0x1a>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <_isatty_r+0x1a>
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	bd38      	pop	{r3, r4, r5, pc}
 8015da4:	20005cec 	.word	0x20005cec

08015da8 <nan>:
 8015da8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015db0 <nan+0x8>
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop
 8015db0:	00000000 	.word	0x00000000
 8015db4:	7ff80000 	.word	0x7ff80000

08015db8 <__assert_func>:
 8015db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015dba:	4614      	mov	r4, r2
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	4b09      	ldr	r3, [pc, #36]	; (8015de4 <__assert_func+0x2c>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	68d8      	ldr	r0, [r3, #12]
 8015dc6:	b14c      	cbz	r4, 8015ddc <__assert_func+0x24>
 8015dc8:	4b07      	ldr	r3, [pc, #28]	; (8015de8 <__assert_func+0x30>)
 8015dca:	9100      	str	r1, [sp, #0]
 8015dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015dd0:	4906      	ldr	r1, [pc, #24]	; (8015dec <__assert_func+0x34>)
 8015dd2:	462b      	mov	r3, r5
 8015dd4:	f000 fb9a 	bl	801650c <fiprintf>
 8015dd8:	f000 fbaa 	bl	8016530 <abort>
 8015ddc:	4b04      	ldr	r3, [pc, #16]	; (8015df0 <__assert_func+0x38>)
 8015dde:	461c      	mov	r4, r3
 8015de0:	e7f3      	b.n	8015dca <__assert_func+0x12>
 8015de2:	bf00      	nop
 8015de4:	20000a44 	.word	0x20000a44
 8015de8:	080466a2 	.word	0x080466a2
 8015dec:	080466af 	.word	0x080466af
 8015df0:	080466dd 	.word	0x080466dd

08015df4 <_calloc_r>:
 8015df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015df6:	fba1 2402 	umull	r2, r4, r1, r2
 8015dfa:	b94c      	cbnz	r4, 8015e10 <_calloc_r+0x1c>
 8015dfc:	4611      	mov	r1, r2
 8015dfe:	9201      	str	r2, [sp, #4]
 8015e00:	f7fb ff92 	bl	8011d28 <_malloc_r>
 8015e04:	9a01      	ldr	r2, [sp, #4]
 8015e06:	4605      	mov	r5, r0
 8015e08:	b930      	cbnz	r0, 8015e18 <_calloc_r+0x24>
 8015e0a:	4628      	mov	r0, r5
 8015e0c:	b003      	add	sp, #12
 8015e0e:	bd30      	pop	{r4, r5, pc}
 8015e10:	220c      	movs	r2, #12
 8015e12:	6002      	str	r2, [r0, #0]
 8015e14:	2500      	movs	r5, #0
 8015e16:	e7f8      	b.n	8015e0a <_calloc_r+0x16>
 8015e18:	4621      	mov	r1, r4
 8015e1a:	f7fd f913 	bl	8013044 <memset>
 8015e1e:	e7f4      	b.n	8015e0a <_calloc_r+0x16>

08015e20 <rshift>:
 8015e20:	6903      	ldr	r3, [r0, #16]
 8015e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015e2e:	f100 0414 	add.w	r4, r0, #20
 8015e32:	dd45      	ble.n	8015ec0 <rshift+0xa0>
 8015e34:	f011 011f 	ands.w	r1, r1, #31
 8015e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015e40:	d10c      	bne.n	8015e5c <rshift+0x3c>
 8015e42:	f100 0710 	add.w	r7, r0, #16
 8015e46:	4629      	mov	r1, r5
 8015e48:	42b1      	cmp	r1, r6
 8015e4a:	d334      	bcc.n	8015eb6 <rshift+0x96>
 8015e4c:	1a9b      	subs	r3, r3, r2
 8015e4e:	009b      	lsls	r3, r3, #2
 8015e50:	1eea      	subs	r2, r5, #3
 8015e52:	4296      	cmp	r6, r2
 8015e54:	bf38      	it	cc
 8015e56:	2300      	movcc	r3, #0
 8015e58:	4423      	add	r3, r4
 8015e5a:	e015      	b.n	8015e88 <rshift+0x68>
 8015e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015e60:	f1c1 0820 	rsb	r8, r1, #32
 8015e64:	40cf      	lsrs	r7, r1
 8015e66:	f105 0e04 	add.w	lr, r5, #4
 8015e6a:	46a1      	mov	r9, r4
 8015e6c:	4576      	cmp	r6, lr
 8015e6e:	46f4      	mov	ip, lr
 8015e70:	d815      	bhi.n	8015e9e <rshift+0x7e>
 8015e72:	1a9a      	subs	r2, r3, r2
 8015e74:	0092      	lsls	r2, r2, #2
 8015e76:	3a04      	subs	r2, #4
 8015e78:	3501      	adds	r5, #1
 8015e7a:	42ae      	cmp	r6, r5
 8015e7c:	bf38      	it	cc
 8015e7e:	2200      	movcc	r2, #0
 8015e80:	18a3      	adds	r3, r4, r2
 8015e82:	50a7      	str	r7, [r4, r2]
 8015e84:	b107      	cbz	r7, 8015e88 <rshift+0x68>
 8015e86:	3304      	adds	r3, #4
 8015e88:	1b1a      	subs	r2, r3, r4
 8015e8a:	42a3      	cmp	r3, r4
 8015e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015e90:	bf08      	it	eq
 8015e92:	2300      	moveq	r3, #0
 8015e94:	6102      	str	r2, [r0, #16]
 8015e96:	bf08      	it	eq
 8015e98:	6143      	streq	r3, [r0, #20]
 8015e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e9e:	f8dc c000 	ldr.w	ip, [ip]
 8015ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8015ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8015eaa:	f849 7b04 	str.w	r7, [r9], #4
 8015eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015eb2:	40cf      	lsrs	r7, r1
 8015eb4:	e7da      	b.n	8015e6c <rshift+0x4c>
 8015eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8015eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8015ebe:	e7c3      	b.n	8015e48 <rshift+0x28>
 8015ec0:	4623      	mov	r3, r4
 8015ec2:	e7e1      	b.n	8015e88 <rshift+0x68>

08015ec4 <__hexdig_fun>:
 8015ec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015ec8:	2b09      	cmp	r3, #9
 8015eca:	d802      	bhi.n	8015ed2 <__hexdig_fun+0xe>
 8015ecc:	3820      	subs	r0, #32
 8015ece:	b2c0      	uxtb	r0, r0
 8015ed0:	4770      	bx	lr
 8015ed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015ed6:	2b05      	cmp	r3, #5
 8015ed8:	d801      	bhi.n	8015ede <__hexdig_fun+0x1a>
 8015eda:	3847      	subs	r0, #71	; 0x47
 8015edc:	e7f7      	b.n	8015ece <__hexdig_fun+0xa>
 8015ede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ee2:	2b05      	cmp	r3, #5
 8015ee4:	d801      	bhi.n	8015eea <__hexdig_fun+0x26>
 8015ee6:	3827      	subs	r0, #39	; 0x27
 8015ee8:	e7f1      	b.n	8015ece <__hexdig_fun+0xa>
 8015eea:	2000      	movs	r0, #0
 8015eec:	4770      	bx	lr
	...

08015ef0 <__gethex>:
 8015ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef4:	4617      	mov	r7, r2
 8015ef6:	680a      	ldr	r2, [r1, #0]
 8015ef8:	b085      	sub	sp, #20
 8015efa:	f102 0b02 	add.w	fp, r2, #2
 8015efe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015f02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015f06:	4681      	mov	r9, r0
 8015f08:	468a      	mov	sl, r1
 8015f0a:	9302      	str	r3, [sp, #8]
 8015f0c:	32fe      	adds	r2, #254	; 0xfe
 8015f0e:	eb02 030b 	add.w	r3, r2, fp
 8015f12:	46d8      	mov	r8, fp
 8015f14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8015f18:	9301      	str	r3, [sp, #4]
 8015f1a:	2830      	cmp	r0, #48	; 0x30
 8015f1c:	d0f7      	beq.n	8015f0e <__gethex+0x1e>
 8015f1e:	f7ff ffd1 	bl	8015ec4 <__hexdig_fun>
 8015f22:	4604      	mov	r4, r0
 8015f24:	2800      	cmp	r0, #0
 8015f26:	d138      	bne.n	8015f9a <__gethex+0xaa>
 8015f28:	49a7      	ldr	r1, [pc, #668]	; (80161c8 <__gethex+0x2d8>)
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	4640      	mov	r0, r8
 8015f2e:	f7ff ff07 	bl	8015d40 <strncmp>
 8015f32:	4606      	mov	r6, r0
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d169      	bne.n	801600c <__gethex+0x11c>
 8015f38:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015f3c:	465d      	mov	r5, fp
 8015f3e:	f7ff ffc1 	bl	8015ec4 <__hexdig_fun>
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d064      	beq.n	8016010 <__gethex+0x120>
 8015f46:	465a      	mov	r2, fp
 8015f48:	7810      	ldrb	r0, [r2, #0]
 8015f4a:	2830      	cmp	r0, #48	; 0x30
 8015f4c:	4690      	mov	r8, r2
 8015f4e:	f102 0201 	add.w	r2, r2, #1
 8015f52:	d0f9      	beq.n	8015f48 <__gethex+0x58>
 8015f54:	f7ff ffb6 	bl	8015ec4 <__hexdig_fun>
 8015f58:	2301      	movs	r3, #1
 8015f5a:	fab0 f480 	clz	r4, r0
 8015f5e:	0964      	lsrs	r4, r4, #5
 8015f60:	465e      	mov	r6, fp
 8015f62:	9301      	str	r3, [sp, #4]
 8015f64:	4642      	mov	r2, r8
 8015f66:	4615      	mov	r5, r2
 8015f68:	3201      	adds	r2, #1
 8015f6a:	7828      	ldrb	r0, [r5, #0]
 8015f6c:	f7ff ffaa 	bl	8015ec4 <__hexdig_fun>
 8015f70:	2800      	cmp	r0, #0
 8015f72:	d1f8      	bne.n	8015f66 <__gethex+0x76>
 8015f74:	4994      	ldr	r1, [pc, #592]	; (80161c8 <__gethex+0x2d8>)
 8015f76:	2201      	movs	r2, #1
 8015f78:	4628      	mov	r0, r5
 8015f7a:	f7ff fee1 	bl	8015d40 <strncmp>
 8015f7e:	b978      	cbnz	r0, 8015fa0 <__gethex+0xb0>
 8015f80:	b946      	cbnz	r6, 8015f94 <__gethex+0xa4>
 8015f82:	1c6e      	adds	r6, r5, #1
 8015f84:	4632      	mov	r2, r6
 8015f86:	4615      	mov	r5, r2
 8015f88:	3201      	adds	r2, #1
 8015f8a:	7828      	ldrb	r0, [r5, #0]
 8015f8c:	f7ff ff9a 	bl	8015ec4 <__hexdig_fun>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1f8      	bne.n	8015f86 <__gethex+0x96>
 8015f94:	1b73      	subs	r3, r6, r5
 8015f96:	009e      	lsls	r6, r3, #2
 8015f98:	e004      	b.n	8015fa4 <__gethex+0xb4>
 8015f9a:	2400      	movs	r4, #0
 8015f9c:	4626      	mov	r6, r4
 8015f9e:	e7e1      	b.n	8015f64 <__gethex+0x74>
 8015fa0:	2e00      	cmp	r6, #0
 8015fa2:	d1f7      	bne.n	8015f94 <__gethex+0xa4>
 8015fa4:	782b      	ldrb	r3, [r5, #0]
 8015fa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015faa:	2b50      	cmp	r3, #80	; 0x50
 8015fac:	d13d      	bne.n	801602a <__gethex+0x13a>
 8015fae:	786b      	ldrb	r3, [r5, #1]
 8015fb0:	2b2b      	cmp	r3, #43	; 0x2b
 8015fb2:	d02f      	beq.n	8016014 <__gethex+0x124>
 8015fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8015fb6:	d031      	beq.n	801601c <__gethex+0x12c>
 8015fb8:	1c69      	adds	r1, r5, #1
 8015fba:	f04f 0b00 	mov.w	fp, #0
 8015fbe:	7808      	ldrb	r0, [r1, #0]
 8015fc0:	f7ff ff80 	bl	8015ec4 <__hexdig_fun>
 8015fc4:	1e42      	subs	r2, r0, #1
 8015fc6:	b2d2      	uxtb	r2, r2
 8015fc8:	2a18      	cmp	r2, #24
 8015fca:	d82e      	bhi.n	801602a <__gethex+0x13a>
 8015fcc:	f1a0 0210 	sub.w	r2, r0, #16
 8015fd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015fd4:	f7ff ff76 	bl	8015ec4 <__hexdig_fun>
 8015fd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8015fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8015fe0:	f1bc 0f18 	cmp.w	ip, #24
 8015fe4:	d91d      	bls.n	8016022 <__gethex+0x132>
 8015fe6:	f1bb 0f00 	cmp.w	fp, #0
 8015fea:	d000      	beq.n	8015fee <__gethex+0xfe>
 8015fec:	4252      	negs	r2, r2
 8015fee:	4416      	add	r6, r2
 8015ff0:	f8ca 1000 	str.w	r1, [sl]
 8015ff4:	b1dc      	cbz	r4, 801602e <__gethex+0x13e>
 8015ff6:	9b01      	ldr	r3, [sp, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	bf14      	ite	ne
 8015ffc:	f04f 0800 	movne.w	r8, #0
 8016000:	f04f 0806 	moveq.w	r8, #6
 8016004:	4640      	mov	r0, r8
 8016006:	b005      	add	sp, #20
 8016008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600c:	4645      	mov	r5, r8
 801600e:	4626      	mov	r6, r4
 8016010:	2401      	movs	r4, #1
 8016012:	e7c7      	b.n	8015fa4 <__gethex+0xb4>
 8016014:	f04f 0b00 	mov.w	fp, #0
 8016018:	1ca9      	adds	r1, r5, #2
 801601a:	e7d0      	b.n	8015fbe <__gethex+0xce>
 801601c:	f04f 0b01 	mov.w	fp, #1
 8016020:	e7fa      	b.n	8016018 <__gethex+0x128>
 8016022:	230a      	movs	r3, #10
 8016024:	fb03 0002 	mla	r0, r3, r2, r0
 8016028:	e7d0      	b.n	8015fcc <__gethex+0xdc>
 801602a:	4629      	mov	r1, r5
 801602c:	e7e0      	b.n	8015ff0 <__gethex+0x100>
 801602e:	eba5 0308 	sub.w	r3, r5, r8
 8016032:	3b01      	subs	r3, #1
 8016034:	4621      	mov	r1, r4
 8016036:	2b07      	cmp	r3, #7
 8016038:	dc0a      	bgt.n	8016050 <__gethex+0x160>
 801603a:	4648      	mov	r0, r9
 801603c:	f7fd ff6e 	bl	8013f1c <_Balloc>
 8016040:	4604      	mov	r4, r0
 8016042:	b940      	cbnz	r0, 8016056 <__gethex+0x166>
 8016044:	4b61      	ldr	r3, [pc, #388]	; (80161cc <__gethex+0x2dc>)
 8016046:	4602      	mov	r2, r0
 8016048:	21e4      	movs	r1, #228	; 0xe4
 801604a:	4861      	ldr	r0, [pc, #388]	; (80161d0 <__gethex+0x2e0>)
 801604c:	f7ff feb4 	bl	8015db8 <__assert_func>
 8016050:	3101      	adds	r1, #1
 8016052:	105b      	asrs	r3, r3, #1
 8016054:	e7ef      	b.n	8016036 <__gethex+0x146>
 8016056:	f100 0a14 	add.w	sl, r0, #20
 801605a:	2300      	movs	r3, #0
 801605c:	495a      	ldr	r1, [pc, #360]	; (80161c8 <__gethex+0x2d8>)
 801605e:	f8cd a004 	str.w	sl, [sp, #4]
 8016062:	469b      	mov	fp, r3
 8016064:	45a8      	cmp	r8, r5
 8016066:	d342      	bcc.n	80160ee <__gethex+0x1fe>
 8016068:	9801      	ldr	r0, [sp, #4]
 801606a:	f840 bb04 	str.w	fp, [r0], #4
 801606e:	eba0 000a 	sub.w	r0, r0, sl
 8016072:	1080      	asrs	r0, r0, #2
 8016074:	6120      	str	r0, [r4, #16]
 8016076:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801607a:	4658      	mov	r0, fp
 801607c:	f7fe f840 	bl	8014100 <__hi0bits>
 8016080:	683d      	ldr	r5, [r7, #0]
 8016082:	eba8 0000 	sub.w	r0, r8, r0
 8016086:	42a8      	cmp	r0, r5
 8016088:	dd59      	ble.n	801613e <__gethex+0x24e>
 801608a:	eba0 0805 	sub.w	r8, r0, r5
 801608e:	4641      	mov	r1, r8
 8016090:	4620      	mov	r0, r4
 8016092:	f7fe fbcf 	bl	8014834 <__any_on>
 8016096:	4683      	mov	fp, r0
 8016098:	b1b8      	cbz	r0, 80160ca <__gethex+0x1da>
 801609a:	f108 33ff 	add.w	r3, r8, #4294967295
 801609e:	1159      	asrs	r1, r3, #5
 80160a0:	f003 021f 	and.w	r2, r3, #31
 80160a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80160a8:	f04f 0b01 	mov.w	fp, #1
 80160ac:	fa0b f202 	lsl.w	r2, fp, r2
 80160b0:	420a      	tst	r2, r1
 80160b2:	d00a      	beq.n	80160ca <__gethex+0x1da>
 80160b4:	455b      	cmp	r3, fp
 80160b6:	dd06      	ble.n	80160c6 <__gethex+0x1d6>
 80160b8:	f1a8 0102 	sub.w	r1, r8, #2
 80160bc:	4620      	mov	r0, r4
 80160be:	f7fe fbb9 	bl	8014834 <__any_on>
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d138      	bne.n	8016138 <__gethex+0x248>
 80160c6:	f04f 0b02 	mov.w	fp, #2
 80160ca:	4641      	mov	r1, r8
 80160cc:	4620      	mov	r0, r4
 80160ce:	f7ff fea7 	bl	8015e20 <rshift>
 80160d2:	4446      	add	r6, r8
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	42b3      	cmp	r3, r6
 80160d8:	da41      	bge.n	801615e <__gethex+0x26e>
 80160da:	4621      	mov	r1, r4
 80160dc:	4648      	mov	r0, r9
 80160de:	f7fd ff5d 	bl	8013f9c <_Bfree>
 80160e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160e4:	2300      	movs	r3, #0
 80160e6:	6013      	str	r3, [r2, #0]
 80160e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80160ec:	e78a      	b.n	8016004 <__gethex+0x114>
 80160ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80160f2:	2a2e      	cmp	r2, #46	; 0x2e
 80160f4:	d014      	beq.n	8016120 <__gethex+0x230>
 80160f6:	2b20      	cmp	r3, #32
 80160f8:	d106      	bne.n	8016108 <__gethex+0x218>
 80160fa:	9b01      	ldr	r3, [sp, #4]
 80160fc:	f843 bb04 	str.w	fp, [r3], #4
 8016100:	f04f 0b00 	mov.w	fp, #0
 8016104:	9301      	str	r3, [sp, #4]
 8016106:	465b      	mov	r3, fp
 8016108:	7828      	ldrb	r0, [r5, #0]
 801610a:	9303      	str	r3, [sp, #12]
 801610c:	f7ff feda 	bl	8015ec4 <__hexdig_fun>
 8016110:	9b03      	ldr	r3, [sp, #12]
 8016112:	f000 000f 	and.w	r0, r0, #15
 8016116:	4098      	lsls	r0, r3
 8016118:	ea4b 0b00 	orr.w	fp, fp, r0
 801611c:	3304      	adds	r3, #4
 801611e:	e7a1      	b.n	8016064 <__gethex+0x174>
 8016120:	45a8      	cmp	r8, r5
 8016122:	d8e8      	bhi.n	80160f6 <__gethex+0x206>
 8016124:	2201      	movs	r2, #1
 8016126:	4628      	mov	r0, r5
 8016128:	9303      	str	r3, [sp, #12]
 801612a:	f7ff fe09 	bl	8015d40 <strncmp>
 801612e:	4926      	ldr	r1, [pc, #152]	; (80161c8 <__gethex+0x2d8>)
 8016130:	9b03      	ldr	r3, [sp, #12]
 8016132:	2800      	cmp	r0, #0
 8016134:	d1df      	bne.n	80160f6 <__gethex+0x206>
 8016136:	e795      	b.n	8016064 <__gethex+0x174>
 8016138:	f04f 0b03 	mov.w	fp, #3
 801613c:	e7c5      	b.n	80160ca <__gethex+0x1da>
 801613e:	da0b      	bge.n	8016158 <__gethex+0x268>
 8016140:	eba5 0800 	sub.w	r8, r5, r0
 8016144:	4621      	mov	r1, r4
 8016146:	4642      	mov	r2, r8
 8016148:	4648      	mov	r0, r9
 801614a:	f7fe f941 	bl	80143d0 <__lshift>
 801614e:	eba6 0608 	sub.w	r6, r6, r8
 8016152:	4604      	mov	r4, r0
 8016154:	f100 0a14 	add.w	sl, r0, #20
 8016158:	f04f 0b00 	mov.w	fp, #0
 801615c:	e7ba      	b.n	80160d4 <__gethex+0x1e4>
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	42b3      	cmp	r3, r6
 8016162:	dd73      	ble.n	801624c <__gethex+0x35c>
 8016164:	1b9e      	subs	r6, r3, r6
 8016166:	42b5      	cmp	r5, r6
 8016168:	dc34      	bgt.n	80161d4 <__gethex+0x2e4>
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	2b02      	cmp	r3, #2
 801616e:	d023      	beq.n	80161b8 <__gethex+0x2c8>
 8016170:	2b03      	cmp	r3, #3
 8016172:	d025      	beq.n	80161c0 <__gethex+0x2d0>
 8016174:	2b01      	cmp	r3, #1
 8016176:	d115      	bne.n	80161a4 <__gethex+0x2b4>
 8016178:	42b5      	cmp	r5, r6
 801617a:	d113      	bne.n	80161a4 <__gethex+0x2b4>
 801617c:	2d01      	cmp	r5, #1
 801617e:	d10b      	bne.n	8016198 <__gethex+0x2a8>
 8016180:	9a02      	ldr	r2, [sp, #8]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6013      	str	r3, [r2, #0]
 8016186:	2301      	movs	r3, #1
 8016188:	6123      	str	r3, [r4, #16]
 801618a:	f8ca 3000 	str.w	r3, [sl]
 801618e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016190:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016194:	601c      	str	r4, [r3, #0]
 8016196:	e735      	b.n	8016004 <__gethex+0x114>
 8016198:	1e69      	subs	r1, r5, #1
 801619a:	4620      	mov	r0, r4
 801619c:	f7fe fb4a 	bl	8014834 <__any_on>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d1ed      	bne.n	8016180 <__gethex+0x290>
 80161a4:	4621      	mov	r1, r4
 80161a6:	4648      	mov	r0, r9
 80161a8:	f7fd fef8 	bl	8013f9c <_Bfree>
 80161ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161ae:	2300      	movs	r3, #0
 80161b0:	6013      	str	r3, [r2, #0]
 80161b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80161b6:	e725      	b.n	8016004 <__gethex+0x114>
 80161b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d1f2      	bne.n	80161a4 <__gethex+0x2b4>
 80161be:	e7df      	b.n	8016180 <__gethex+0x290>
 80161c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d1dc      	bne.n	8016180 <__gethex+0x290>
 80161c6:	e7ed      	b.n	80161a4 <__gethex+0x2b4>
 80161c8:	08046534 	.word	0x08046534
 80161cc:	080463cd 	.word	0x080463cd
 80161d0:	080466de 	.word	0x080466de
 80161d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80161d8:	f1bb 0f00 	cmp.w	fp, #0
 80161dc:	d133      	bne.n	8016246 <__gethex+0x356>
 80161de:	f1b8 0f00 	cmp.w	r8, #0
 80161e2:	d004      	beq.n	80161ee <__gethex+0x2fe>
 80161e4:	4641      	mov	r1, r8
 80161e6:	4620      	mov	r0, r4
 80161e8:	f7fe fb24 	bl	8014834 <__any_on>
 80161ec:	4683      	mov	fp, r0
 80161ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 80161f2:	2301      	movs	r3, #1
 80161f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80161f8:	f008 081f 	and.w	r8, r8, #31
 80161fc:	fa03 f308 	lsl.w	r3, r3, r8
 8016200:	4213      	tst	r3, r2
 8016202:	4631      	mov	r1, r6
 8016204:	4620      	mov	r0, r4
 8016206:	bf18      	it	ne
 8016208:	f04b 0b02 	orrne.w	fp, fp, #2
 801620c:	1bad      	subs	r5, r5, r6
 801620e:	f7ff fe07 	bl	8015e20 <rshift>
 8016212:	687e      	ldr	r6, [r7, #4]
 8016214:	f04f 0802 	mov.w	r8, #2
 8016218:	f1bb 0f00 	cmp.w	fp, #0
 801621c:	d04a      	beq.n	80162b4 <__gethex+0x3c4>
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	2b02      	cmp	r3, #2
 8016222:	d016      	beq.n	8016252 <__gethex+0x362>
 8016224:	2b03      	cmp	r3, #3
 8016226:	d018      	beq.n	801625a <__gethex+0x36a>
 8016228:	2b01      	cmp	r3, #1
 801622a:	d109      	bne.n	8016240 <__gethex+0x350>
 801622c:	f01b 0f02 	tst.w	fp, #2
 8016230:	d006      	beq.n	8016240 <__gethex+0x350>
 8016232:	f8da 3000 	ldr.w	r3, [sl]
 8016236:	ea4b 0b03 	orr.w	fp, fp, r3
 801623a:	f01b 0f01 	tst.w	fp, #1
 801623e:	d10f      	bne.n	8016260 <__gethex+0x370>
 8016240:	f048 0810 	orr.w	r8, r8, #16
 8016244:	e036      	b.n	80162b4 <__gethex+0x3c4>
 8016246:	f04f 0b01 	mov.w	fp, #1
 801624a:	e7d0      	b.n	80161ee <__gethex+0x2fe>
 801624c:	f04f 0801 	mov.w	r8, #1
 8016250:	e7e2      	b.n	8016218 <__gethex+0x328>
 8016252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016254:	f1c3 0301 	rsb	r3, r3, #1
 8016258:	930f      	str	r3, [sp, #60]	; 0x3c
 801625a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801625c:	2b00      	cmp	r3, #0
 801625e:	d0ef      	beq.n	8016240 <__gethex+0x350>
 8016260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016264:	f104 0214 	add.w	r2, r4, #20
 8016268:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801626c:	9301      	str	r3, [sp, #4]
 801626e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8016272:	2300      	movs	r3, #0
 8016274:	4694      	mov	ip, r2
 8016276:	f852 1b04 	ldr.w	r1, [r2], #4
 801627a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801627e:	d01e      	beq.n	80162be <__gethex+0x3ce>
 8016280:	3101      	adds	r1, #1
 8016282:	f8cc 1000 	str.w	r1, [ip]
 8016286:	f1b8 0f02 	cmp.w	r8, #2
 801628a:	f104 0214 	add.w	r2, r4, #20
 801628e:	d13d      	bne.n	801630c <__gethex+0x41c>
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	3b01      	subs	r3, #1
 8016294:	42ab      	cmp	r3, r5
 8016296:	d10b      	bne.n	80162b0 <__gethex+0x3c0>
 8016298:	1169      	asrs	r1, r5, #5
 801629a:	2301      	movs	r3, #1
 801629c:	f005 051f 	and.w	r5, r5, #31
 80162a0:	fa03 f505 	lsl.w	r5, r3, r5
 80162a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162a8:	421d      	tst	r5, r3
 80162aa:	bf18      	it	ne
 80162ac:	f04f 0801 	movne.w	r8, #1
 80162b0:	f048 0820 	orr.w	r8, r8, #32
 80162b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162b6:	601c      	str	r4, [r3, #0]
 80162b8:	9b02      	ldr	r3, [sp, #8]
 80162ba:	601e      	str	r6, [r3, #0]
 80162bc:	e6a2      	b.n	8016004 <__gethex+0x114>
 80162be:	4290      	cmp	r0, r2
 80162c0:	f842 3c04 	str.w	r3, [r2, #-4]
 80162c4:	d8d6      	bhi.n	8016274 <__gethex+0x384>
 80162c6:	68a2      	ldr	r2, [r4, #8]
 80162c8:	4593      	cmp	fp, r2
 80162ca:	db17      	blt.n	80162fc <__gethex+0x40c>
 80162cc:	6861      	ldr	r1, [r4, #4]
 80162ce:	4648      	mov	r0, r9
 80162d0:	3101      	adds	r1, #1
 80162d2:	f7fd fe23 	bl	8013f1c <_Balloc>
 80162d6:	4682      	mov	sl, r0
 80162d8:	b918      	cbnz	r0, 80162e2 <__gethex+0x3f2>
 80162da:	4b1b      	ldr	r3, [pc, #108]	; (8016348 <__gethex+0x458>)
 80162dc:	4602      	mov	r2, r0
 80162de:	2184      	movs	r1, #132	; 0x84
 80162e0:	e6b3      	b.n	801604a <__gethex+0x15a>
 80162e2:	6922      	ldr	r2, [r4, #16]
 80162e4:	3202      	adds	r2, #2
 80162e6:	f104 010c 	add.w	r1, r4, #12
 80162ea:	0092      	lsls	r2, r2, #2
 80162ec:	300c      	adds	r0, #12
 80162ee:	f7fc ff38 	bl	8013162 <memcpy>
 80162f2:	4621      	mov	r1, r4
 80162f4:	4648      	mov	r0, r9
 80162f6:	f7fd fe51 	bl	8013f9c <_Bfree>
 80162fa:	4654      	mov	r4, sl
 80162fc:	6922      	ldr	r2, [r4, #16]
 80162fe:	1c51      	adds	r1, r2, #1
 8016300:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016304:	6121      	str	r1, [r4, #16]
 8016306:	2101      	movs	r1, #1
 8016308:	6151      	str	r1, [r2, #20]
 801630a:	e7bc      	b.n	8016286 <__gethex+0x396>
 801630c:	6921      	ldr	r1, [r4, #16]
 801630e:	4559      	cmp	r1, fp
 8016310:	dd0b      	ble.n	801632a <__gethex+0x43a>
 8016312:	2101      	movs	r1, #1
 8016314:	4620      	mov	r0, r4
 8016316:	f7ff fd83 	bl	8015e20 <rshift>
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	3601      	adds	r6, #1
 801631e:	42b3      	cmp	r3, r6
 8016320:	f6ff aedb 	blt.w	80160da <__gethex+0x1ea>
 8016324:	f04f 0801 	mov.w	r8, #1
 8016328:	e7c2      	b.n	80162b0 <__gethex+0x3c0>
 801632a:	f015 051f 	ands.w	r5, r5, #31
 801632e:	d0f9      	beq.n	8016324 <__gethex+0x434>
 8016330:	9b01      	ldr	r3, [sp, #4]
 8016332:	441a      	add	r2, r3
 8016334:	f1c5 0520 	rsb	r5, r5, #32
 8016338:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801633c:	f7fd fee0 	bl	8014100 <__hi0bits>
 8016340:	42a8      	cmp	r0, r5
 8016342:	dbe6      	blt.n	8016312 <__gethex+0x422>
 8016344:	e7ee      	b.n	8016324 <__gethex+0x434>
 8016346:	bf00      	nop
 8016348:	080463cd 	.word	0x080463cd

0801634c <L_shift>:
 801634c:	f1c2 0208 	rsb	r2, r2, #8
 8016350:	0092      	lsls	r2, r2, #2
 8016352:	b570      	push	{r4, r5, r6, lr}
 8016354:	f1c2 0620 	rsb	r6, r2, #32
 8016358:	6843      	ldr	r3, [r0, #4]
 801635a:	6804      	ldr	r4, [r0, #0]
 801635c:	fa03 f506 	lsl.w	r5, r3, r6
 8016360:	432c      	orrs	r4, r5
 8016362:	40d3      	lsrs	r3, r2
 8016364:	6004      	str	r4, [r0, #0]
 8016366:	f840 3f04 	str.w	r3, [r0, #4]!
 801636a:	4288      	cmp	r0, r1
 801636c:	d3f4      	bcc.n	8016358 <L_shift+0xc>
 801636e:	bd70      	pop	{r4, r5, r6, pc}

08016370 <__match>:
 8016370:	b530      	push	{r4, r5, lr}
 8016372:	6803      	ldr	r3, [r0, #0]
 8016374:	3301      	adds	r3, #1
 8016376:	f811 4b01 	ldrb.w	r4, [r1], #1
 801637a:	b914      	cbnz	r4, 8016382 <__match+0x12>
 801637c:	6003      	str	r3, [r0, #0]
 801637e:	2001      	movs	r0, #1
 8016380:	bd30      	pop	{r4, r5, pc}
 8016382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016386:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801638a:	2d19      	cmp	r5, #25
 801638c:	bf98      	it	ls
 801638e:	3220      	addls	r2, #32
 8016390:	42a2      	cmp	r2, r4
 8016392:	d0f0      	beq.n	8016376 <__match+0x6>
 8016394:	2000      	movs	r0, #0
 8016396:	e7f3      	b.n	8016380 <__match+0x10>

08016398 <__hexnan>:
 8016398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639c:	680b      	ldr	r3, [r1, #0]
 801639e:	6801      	ldr	r1, [r0, #0]
 80163a0:	115e      	asrs	r6, r3, #5
 80163a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80163a6:	f013 031f 	ands.w	r3, r3, #31
 80163aa:	b087      	sub	sp, #28
 80163ac:	bf18      	it	ne
 80163ae:	3604      	addne	r6, #4
 80163b0:	2500      	movs	r5, #0
 80163b2:	1f37      	subs	r7, r6, #4
 80163b4:	4682      	mov	sl, r0
 80163b6:	4690      	mov	r8, r2
 80163b8:	9301      	str	r3, [sp, #4]
 80163ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80163be:	46b9      	mov	r9, r7
 80163c0:	463c      	mov	r4, r7
 80163c2:	9502      	str	r5, [sp, #8]
 80163c4:	46ab      	mov	fp, r5
 80163c6:	784a      	ldrb	r2, [r1, #1]
 80163c8:	1c4b      	adds	r3, r1, #1
 80163ca:	9303      	str	r3, [sp, #12]
 80163cc:	b342      	cbz	r2, 8016420 <__hexnan+0x88>
 80163ce:	4610      	mov	r0, r2
 80163d0:	9105      	str	r1, [sp, #20]
 80163d2:	9204      	str	r2, [sp, #16]
 80163d4:	f7ff fd76 	bl	8015ec4 <__hexdig_fun>
 80163d8:	2800      	cmp	r0, #0
 80163da:	d14f      	bne.n	801647c <__hexnan+0xe4>
 80163dc:	9a04      	ldr	r2, [sp, #16]
 80163de:	9905      	ldr	r1, [sp, #20]
 80163e0:	2a20      	cmp	r2, #32
 80163e2:	d818      	bhi.n	8016416 <__hexnan+0x7e>
 80163e4:	9b02      	ldr	r3, [sp, #8]
 80163e6:	459b      	cmp	fp, r3
 80163e8:	dd13      	ble.n	8016412 <__hexnan+0x7a>
 80163ea:	454c      	cmp	r4, r9
 80163ec:	d206      	bcs.n	80163fc <__hexnan+0x64>
 80163ee:	2d07      	cmp	r5, #7
 80163f0:	dc04      	bgt.n	80163fc <__hexnan+0x64>
 80163f2:	462a      	mov	r2, r5
 80163f4:	4649      	mov	r1, r9
 80163f6:	4620      	mov	r0, r4
 80163f8:	f7ff ffa8 	bl	801634c <L_shift>
 80163fc:	4544      	cmp	r4, r8
 80163fe:	d950      	bls.n	80164a2 <__hexnan+0x10a>
 8016400:	2300      	movs	r3, #0
 8016402:	f1a4 0904 	sub.w	r9, r4, #4
 8016406:	f844 3c04 	str.w	r3, [r4, #-4]
 801640a:	f8cd b008 	str.w	fp, [sp, #8]
 801640e:	464c      	mov	r4, r9
 8016410:	461d      	mov	r5, r3
 8016412:	9903      	ldr	r1, [sp, #12]
 8016414:	e7d7      	b.n	80163c6 <__hexnan+0x2e>
 8016416:	2a29      	cmp	r2, #41	; 0x29
 8016418:	d155      	bne.n	80164c6 <__hexnan+0x12e>
 801641a:	3102      	adds	r1, #2
 801641c:	f8ca 1000 	str.w	r1, [sl]
 8016420:	f1bb 0f00 	cmp.w	fp, #0
 8016424:	d04f      	beq.n	80164c6 <__hexnan+0x12e>
 8016426:	454c      	cmp	r4, r9
 8016428:	d206      	bcs.n	8016438 <__hexnan+0xa0>
 801642a:	2d07      	cmp	r5, #7
 801642c:	dc04      	bgt.n	8016438 <__hexnan+0xa0>
 801642e:	462a      	mov	r2, r5
 8016430:	4649      	mov	r1, r9
 8016432:	4620      	mov	r0, r4
 8016434:	f7ff ff8a 	bl	801634c <L_shift>
 8016438:	4544      	cmp	r4, r8
 801643a:	d934      	bls.n	80164a6 <__hexnan+0x10e>
 801643c:	f1a8 0204 	sub.w	r2, r8, #4
 8016440:	4623      	mov	r3, r4
 8016442:	f853 1b04 	ldr.w	r1, [r3], #4
 8016446:	f842 1f04 	str.w	r1, [r2, #4]!
 801644a:	429f      	cmp	r7, r3
 801644c:	d2f9      	bcs.n	8016442 <__hexnan+0xaa>
 801644e:	1b3b      	subs	r3, r7, r4
 8016450:	f023 0303 	bic.w	r3, r3, #3
 8016454:	3304      	adds	r3, #4
 8016456:	3e03      	subs	r6, #3
 8016458:	3401      	adds	r4, #1
 801645a:	42a6      	cmp	r6, r4
 801645c:	bf38      	it	cc
 801645e:	2304      	movcc	r3, #4
 8016460:	4443      	add	r3, r8
 8016462:	2200      	movs	r2, #0
 8016464:	f843 2b04 	str.w	r2, [r3], #4
 8016468:	429f      	cmp	r7, r3
 801646a:	d2fb      	bcs.n	8016464 <__hexnan+0xcc>
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	b91b      	cbnz	r3, 8016478 <__hexnan+0xe0>
 8016470:	4547      	cmp	r7, r8
 8016472:	d126      	bne.n	80164c2 <__hexnan+0x12a>
 8016474:	2301      	movs	r3, #1
 8016476:	603b      	str	r3, [r7, #0]
 8016478:	2005      	movs	r0, #5
 801647a:	e025      	b.n	80164c8 <__hexnan+0x130>
 801647c:	3501      	adds	r5, #1
 801647e:	2d08      	cmp	r5, #8
 8016480:	f10b 0b01 	add.w	fp, fp, #1
 8016484:	dd06      	ble.n	8016494 <__hexnan+0xfc>
 8016486:	4544      	cmp	r4, r8
 8016488:	d9c3      	bls.n	8016412 <__hexnan+0x7a>
 801648a:	2300      	movs	r3, #0
 801648c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016490:	2501      	movs	r5, #1
 8016492:	3c04      	subs	r4, #4
 8016494:	6822      	ldr	r2, [r4, #0]
 8016496:	f000 000f 	and.w	r0, r0, #15
 801649a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801649e:	6020      	str	r0, [r4, #0]
 80164a0:	e7b7      	b.n	8016412 <__hexnan+0x7a>
 80164a2:	2508      	movs	r5, #8
 80164a4:	e7b5      	b.n	8016412 <__hexnan+0x7a>
 80164a6:	9b01      	ldr	r3, [sp, #4]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d0df      	beq.n	801646c <__hexnan+0xd4>
 80164ac:	f1c3 0320 	rsb	r3, r3, #32
 80164b0:	f04f 32ff 	mov.w	r2, #4294967295
 80164b4:	40da      	lsrs	r2, r3
 80164b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80164ba:	4013      	ands	r3, r2
 80164bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80164c0:	e7d4      	b.n	801646c <__hexnan+0xd4>
 80164c2:	3f04      	subs	r7, #4
 80164c4:	e7d2      	b.n	801646c <__hexnan+0xd4>
 80164c6:	2004      	movs	r0, #4
 80164c8:	b007      	add	sp, #28
 80164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164ce <__ascii_mbtowc>:
 80164ce:	b082      	sub	sp, #8
 80164d0:	b901      	cbnz	r1, 80164d4 <__ascii_mbtowc+0x6>
 80164d2:	a901      	add	r1, sp, #4
 80164d4:	b142      	cbz	r2, 80164e8 <__ascii_mbtowc+0x1a>
 80164d6:	b14b      	cbz	r3, 80164ec <__ascii_mbtowc+0x1e>
 80164d8:	7813      	ldrb	r3, [r2, #0]
 80164da:	600b      	str	r3, [r1, #0]
 80164dc:	7812      	ldrb	r2, [r2, #0]
 80164de:	1e10      	subs	r0, r2, #0
 80164e0:	bf18      	it	ne
 80164e2:	2001      	movne	r0, #1
 80164e4:	b002      	add	sp, #8
 80164e6:	4770      	bx	lr
 80164e8:	4610      	mov	r0, r2
 80164ea:	e7fb      	b.n	80164e4 <__ascii_mbtowc+0x16>
 80164ec:	f06f 0001 	mvn.w	r0, #1
 80164f0:	e7f8      	b.n	80164e4 <__ascii_mbtowc+0x16>

080164f2 <__ascii_wctomb>:
 80164f2:	b149      	cbz	r1, 8016508 <__ascii_wctomb+0x16>
 80164f4:	2aff      	cmp	r2, #255	; 0xff
 80164f6:	bf85      	ittet	hi
 80164f8:	238a      	movhi	r3, #138	; 0x8a
 80164fa:	6003      	strhi	r3, [r0, #0]
 80164fc:	700a      	strbls	r2, [r1, #0]
 80164fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8016502:	bf98      	it	ls
 8016504:	2001      	movls	r0, #1
 8016506:	4770      	bx	lr
 8016508:	4608      	mov	r0, r1
 801650a:	4770      	bx	lr

0801650c <fiprintf>:
 801650c:	b40e      	push	{r1, r2, r3}
 801650e:	b503      	push	{r0, r1, lr}
 8016510:	4601      	mov	r1, r0
 8016512:	ab03      	add	r3, sp, #12
 8016514:	4805      	ldr	r0, [pc, #20]	; (801652c <fiprintf+0x20>)
 8016516:	f853 2b04 	ldr.w	r2, [r3], #4
 801651a:	6800      	ldr	r0, [r0, #0]
 801651c:	9301      	str	r3, [sp, #4]
 801651e:	f7ff f9cb 	bl	80158b8 <_vfiprintf_r>
 8016522:	b002      	add	sp, #8
 8016524:	f85d eb04 	ldr.w	lr, [sp], #4
 8016528:	b003      	add	sp, #12
 801652a:	4770      	bx	lr
 801652c:	20000a44 	.word	0x20000a44

08016530 <abort>:
 8016530:	b508      	push	{r3, lr}
 8016532:	2006      	movs	r0, #6
 8016534:	f000 f82c 	bl	8016590 <raise>
 8016538:	2001      	movs	r0, #1
 801653a:	f000 f9b1 	bl	80168a0 <_exit>

0801653e <_raise_r>:
 801653e:	291f      	cmp	r1, #31
 8016540:	b538      	push	{r3, r4, r5, lr}
 8016542:	4604      	mov	r4, r0
 8016544:	460d      	mov	r5, r1
 8016546:	d904      	bls.n	8016552 <_raise_r+0x14>
 8016548:	2316      	movs	r3, #22
 801654a:	6003      	str	r3, [r0, #0]
 801654c:	f04f 30ff 	mov.w	r0, #4294967295
 8016550:	bd38      	pop	{r3, r4, r5, pc}
 8016552:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016554:	b112      	cbz	r2, 801655c <_raise_r+0x1e>
 8016556:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801655a:	b94b      	cbnz	r3, 8016570 <_raise_r+0x32>
 801655c:	4620      	mov	r0, r4
 801655e:	f000 f831 	bl	80165c4 <_getpid_r>
 8016562:	462a      	mov	r2, r5
 8016564:	4601      	mov	r1, r0
 8016566:	4620      	mov	r0, r4
 8016568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801656c:	f000 b818 	b.w	80165a0 <_kill_r>
 8016570:	2b01      	cmp	r3, #1
 8016572:	d00a      	beq.n	801658a <_raise_r+0x4c>
 8016574:	1c59      	adds	r1, r3, #1
 8016576:	d103      	bne.n	8016580 <_raise_r+0x42>
 8016578:	2316      	movs	r3, #22
 801657a:	6003      	str	r3, [r0, #0]
 801657c:	2001      	movs	r0, #1
 801657e:	e7e7      	b.n	8016550 <_raise_r+0x12>
 8016580:	2400      	movs	r4, #0
 8016582:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016586:	4628      	mov	r0, r5
 8016588:	4798      	blx	r3
 801658a:	2000      	movs	r0, #0
 801658c:	e7e0      	b.n	8016550 <_raise_r+0x12>
	...

08016590 <raise>:
 8016590:	4b02      	ldr	r3, [pc, #8]	; (801659c <raise+0xc>)
 8016592:	4601      	mov	r1, r0
 8016594:	6818      	ldr	r0, [r3, #0]
 8016596:	f7ff bfd2 	b.w	801653e <_raise_r>
 801659a:	bf00      	nop
 801659c:	20000a44 	.word	0x20000a44

080165a0 <_kill_r>:
 80165a0:	b538      	push	{r3, r4, r5, lr}
 80165a2:	4d07      	ldr	r5, [pc, #28]	; (80165c0 <_kill_r+0x20>)
 80165a4:	2300      	movs	r3, #0
 80165a6:	4604      	mov	r4, r0
 80165a8:	4608      	mov	r0, r1
 80165aa:	4611      	mov	r1, r2
 80165ac:	602b      	str	r3, [r5, #0]
 80165ae:	f000 f95f 	bl	8016870 <_kill>
 80165b2:	1c43      	adds	r3, r0, #1
 80165b4:	d102      	bne.n	80165bc <_kill_r+0x1c>
 80165b6:	682b      	ldr	r3, [r5, #0]
 80165b8:	b103      	cbz	r3, 80165bc <_kill_r+0x1c>
 80165ba:	6023      	str	r3, [r4, #0]
 80165bc:	bd38      	pop	{r3, r4, r5, pc}
 80165be:	bf00      	nop
 80165c0:	20005cec 	.word	0x20005cec

080165c4 <_getpid_r>:
 80165c4:	f000 b944 	b.w	8016850 <_getpid>

080165c8 <expf>:
 80165c8:	b508      	push	{r3, lr}
 80165ca:	ed2d 8b02 	vpush	{d8}
 80165ce:	eef0 8a40 	vmov.f32	s17, s0
 80165d2:	f000 f85f 	bl	8016694 <__ieee754_expf>
 80165d6:	eeb0 8a40 	vmov.f32	s16, s0
 80165da:	eeb0 0a68 	vmov.f32	s0, s17
 80165de:	f000 f829 	bl	8016634 <finitef>
 80165e2:	b160      	cbz	r0, 80165fe <expf+0x36>
 80165e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016624 <expf+0x5c>
 80165e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80165ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f0:	dd0a      	ble.n	8016608 <expf+0x40>
 80165f2:	f7fc fd89 	bl	8013108 <__errno>
 80165f6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8016628 <expf+0x60>
 80165fa:	2322      	movs	r3, #34	; 0x22
 80165fc:	6003      	str	r3, [r0, #0]
 80165fe:	eeb0 0a48 	vmov.f32	s0, s16
 8016602:	ecbd 8b02 	vpop	{d8}
 8016606:	bd08      	pop	{r3, pc}
 8016608:	eddf 7a08 	vldr	s15, [pc, #32]	; 801662c <expf+0x64>
 801660c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016614:	d5f3      	bpl.n	80165fe <expf+0x36>
 8016616:	f7fc fd77 	bl	8013108 <__errno>
 801661a:	2322      	movs	r3, #34	; 0x22
 801661c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8016630 <expf+0x68>
 8016620:	6003      	str	r3, [r0, #0]
 8016622:	e7ec      	b.n	80165fe <expf+0x36>
 8016624:	42b17217 	.word	0x42b17217
 8016628:	7f800000 	.word	0x7f800000
 801662c:	c2cff1b5 	.word	0xc2cff1b5
 8016630:	00000000 	.word	0x00000000

08016634 <finitef>:
 8016634:	b082      	sub	sp, #8
 8016636:	ed8d 0a01 	vstr	s0, [sp, #4]
 801663a:	9801      	ldr	r0, [sp, #4]
 801663c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016640:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016644:	bfac      	ite	ge
 8016646:	2000      	movge	r0, #0
 8016648:	2001      	movlt	r0, #1
 801664a:	b002      	add	sp, #8
 801664c:	4770      	bx	lr

0801664e <with_errnof>:
 801664e:	b513      	push	{r0, r1, r4, lr}
 8016650:	4604      	mov	r4, r0
 8016652:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016656:	f7fc fd57 	bl	8013108 <__errno>
 801665a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801665e:	6004      	str	r4, [r0, #0]
 8016660:	b002      	add	sp, #8
 8016662:	bd10      	pop	{r4, pc}

08016664 <xflowf>:
 8016664:	b130      	cbz	r0, 8016674 <xflowf+0x10>
 8016666:	eef1 7a40 	vneg.f32	s15, s0
 801666a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801666e:	2022      	movs	r0, #34	; 0x22
 8016670:	f7ff bfed 	b.w	801664e <with_errnof>
 8016674:	eef0 7a40 	vmov.f32	s15, s0
 8016678:	e7f7      	b.n	801666a <xflowf+0x6>
	...

0801667c <__math_uflowf>:
 801667c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016684 <__math_uflowf+0x8>
 8016680:	f7ff bff0 	b.w	8016664 <xflowf>
 8016684:	10000000 	.word	0x10000000

08016688 <__math_oflowf>:
 8016688:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016690 <__math_oflowf+0x8>
 801668c:	f7ff bfea 	b.w	8016664 <xflowf>
 8016690:	70000000 	.word	0x70000000

08016694 <__ieee754_expf>:
 8016694:	ee10 2a10 	vmov	r2, s0
 8016698:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801669c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80166a0:	d902      	bls.n	80166a8 <__ieee754_expf+0x14>
 80166a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80166a6:	4770      	bx	lr
 80166a8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80166ac:	d106      	bne.n	80166bc <__ieee754_expf+0x28>
 80166ae:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80167e8 <__ieee754_expf+0x154>
 80166b2:	2900      	cmp	r1, #0
 80166b4:	bf18      	it	ne
 80166b6:	eeb0 0a67 	vmovne.f32	s0, s15
 80166ba:	4770      	bx	lr
 80166bc:	484b      	ldr	r0, [pc, #300]	; (80167ec <__ieee754_expf+0x158>)
 80166be:	4282      	cmp	r2, r0
 80166c0:	dd02      	ble.n	80166c8 <__ieee754_expf+0x34>
 80166c2:	2000      	movs	r0, #0
 80166c4:	f7ff bfe0 	b.w	8016688 <__math_oflowf>
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	da05      	bge.n	80166d8 <__ieee754_expf+0x44>
 80166cc:	4a48      	ldr	r2, [pc, #288]	; (80167f0 <__ieee754_expf+0x15c>)
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d902      	bls.n	80166d8 <__ieee754_expf+0x44>
 80166d2:	2000      	movs	r0, #0
 80166d4:	f7ff bfd2 	b.w	801667c <__math_uflowf>
 80166d8:	4a46      	ldr	r2, [pc, #280]	; (80167f4 <__ieee754_expf+0x160>)
 80166da:	4293      	cmp	r3, r2
 80166dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80166e0:	d952      	bls.n	8016788 <__ieee754_expf+0xf4>
 80166e2:	4a45      	ldr	r2, [pc, #276]	; (80167f8 <__ieee754_expf+0x164>)
 80166e4:	4293      	cmp	r3, r2
 80166e6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80166ea:	d834      	bhi.n	8016756 <__ieee754_expf+0xc2>
 80166ec:	4b43      	ldr	r3, [pc, #268]	; (80167fc <__ieee754_expf+0x168>)
 80166ee:	4413      	add	r3, r2
 80166f0:	ed93 7a00 	vldr	s14, [r3]
 80166f4:	4b42      	ldr	r3, [pc, #264]	; (8016800 <__ieee754_expf+0x16c>)
 80166f6:	4413      	add	r3, r2
 80166f8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80166fc:	f1c1 0201 	rsb	r2, r1, #1
 8016700:	edd3 7a00 	vldr	s15, [r3]
 8016704:	1a52      	subs	r2, r2, r1
 8016706:	ee37 0a67 	vsub.f32	s0, s14, s15
 801670a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801670e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016804 <__ieee754_expf+0x170>
 8016712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016808 <__ieee754_expf+0x174>
 8016716:	eee6 6a05 	vfma.f32	s13, s12, s10
 801671a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801680c <__ieee754_expf+0x178>
 801671e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016722:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016810 <__ieee754_expf+0x17c>
 8016726:	eee5 6a06 	vfma.f32	s13, s10, s12
 801672a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016814 <__ieee754_expf+0x180>
 801672e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016732:	eef0 6a40 	vmov.f32	s13, s0
 8016736:	eee5 6a46 	vfms.f32	s13, s10, s12
 801673a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801673e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8016742:	bb92      	cbnz	r2, 80167aa <__ieee754_expf+0x116>
 8016744:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8016748:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801674c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016750:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016754:	4770      	bx	lr
 8016756:	4b30      	ldr	r3, [pc, #192]	; (8016818 <__ieee754_expf+0x184>)
 8016758:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801681c <__ieee754_expf+0x188>
 801675c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016820 <__ieee754_expf+0x18c>
 8016760:	4413      	add	r3, r2
 8016762:	edd3 7a00 	vldr	s15, [r3]
 8016766:	eee0 7a07 	vfma.f32	s15, s0, s14
 801676a:	eeb0 7a40 	vmov.f32	s14, s0
 801676e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016772:	ee17 2a90 	vmov	r2, s15
 8016776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801677a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801677e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016824 <__ieee754_expf+0x190>
 8016782:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016786:	e7be      	b.n	8016706 <__ieee754_expf+0x72>
 8016788:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801678c:	d20b      	bcs.n	80167a6 <__ieee754_expf+0x112>
 801678e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016828 <__ieee754_expf+0x194>
 8016792:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016796:	eef4 6ae5 	vcmpe.f32	s13, s11
 801679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679e:	dd02      	ble.n	80167a6 <__ieee754_expf+0x112>
 80167a0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80167a4:	4770      	bx	lr
 80167a6:	2200      	movs	r2, #0
 80167a8:	e7af      	b.n	801670a <__ieee754_expf+0x76>
 80167aa:	ee36 6a66 	vsub.f32	s12, s12, s13
 80167ae:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80167b2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80167b6:	bfb8      	it	lt
 80167b8:	3264      	addlt	r2, #100	; 0x64
 80167ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167c2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80167c6:	ee17 3a90 	vmov	r3, s15
 80167ca:	bfab      	itete	ge
 80167cc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80167d0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80167d4:	ee00 3a10 	vmovge	s0, r3
 80167d8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801682c <__ieee754_expf+0x198>
 80167dc:	bfbc      	itt	lt
 80167de:	ee00 3a10 	vmovlt	s0, r3
 80167e2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80167e6:	4770      	bx	lr
 80167e8:	00000000 	.word	0x00000000
 80167ec:	42b17217 	.word	0x42b17217
 80167f0:	42cff1b5 	.word	0x42cff1b5
 80167f4:	3eb17218 	.word	0x3eb17218
 80167f8:	3f851591 	.word	0x3f851591
 80167fc:	08046748 	.word	0x08046748
 8016800:	08046750 	.word	0x08046750
 8016804:	3331bb4c 	.word	0x3331bb4c
 8016808:	b5ddea0e 	.word	0xb5ddea0e
 801680c:	388ab355 	.word	0x388ab355
 8016810:	bb360b61 	.word	0xbb360b61
 8016814:	3e2aaaab 	.word	0x3e2aaaab
 8016818:	08046740 	.word	0x08046740
 801681c:	3fb8aa3b 	.word	0x3fb8aa3b
 8016820:	3f317180 	.word	0x3f317180
 8016824:	3717f7d1 	.word	0x3717f7d1
 8016828:	7149f2ca 	.word	0x7149f2ca
 801682c:	0d800000 	.word	0x0d800000

08016830 <_close>:
 8016830:	4b02      	ldr	r3, [pc, #8]	; (801683c <_close+0xc>)
 8016832:	2258      	movs	r2, #88	; 0x58
 8016834:	601a      	str	r2, [r3, #0]
 8016836:	f04f 30ff 	mov.w	r0, #4294967295
 801683a:	4770      	bx	lr
 801683c:	20005cec 	.word	0x20005cec

08016840 <_fstat>:
 8016840:	4b02      	ldr	r3, [pc, #8]	; (801684c <_fstat+0xc>)
 8016842:	2258      	movs	r2, #88	; 0x58
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	f04f 30ff 	mov.w	r0, #4294967295
 801684a:	4770      	bx	lr
 801684c:	20005cec 	.word	0x20005cec

08016850 <_getpid>:
 8016850:	4b02      	ldr	r3, [pc, #8]	; (801685c <_getpid+0xc>)
 8016852:	2258      	movs	r2, #88	; 0x58
 8016854:	601a      	str	r2, [r3, #0]
 8016856:	f04f 30ff 	mov.w	r0, #4294967295
 801685a:	4770      	bx	lr
 801685c:	20005cec 	.word	0x20005cec

08016860 <_isatty>:
 8016860:	4b02      	ldr	r3, [pc, #8]	; (801686c <_isatty+0xc>)
 8016862:	2258      	movs	r2, #88	; 0x58
 8016864:	601a      	str	r2, [r3, #0]
 8016866:	2000      	movs	r0, #0
 8016868:	4770      	bx	lr
 801686a:	bf00      	nop
 801686c:	20005cec 	.word	0x20005cec

08016870 <_kill>:
 8016870:	4b02      	ldr	r3, [pc, #8]	; (801687c <_kill+0xc>)
 8016872:	2258      	movs	r2, #88	; 0x58
 8016874:	601a      	str	r2, [r3, #0]
 8016876:	f04f 30ff 	mov.w	r0, #4294967295
 801687a:	4770      	bx	lr
 801687c:	20005cec 	.word	0x20005cec

08016880 <_lseek>:
 8016880:	4b02      	ldr	r3, [pc, #8]	; (801688c <_lseek+0xc>)
 8016882:	2258      	movs	r2, #88	; 0x58
 8016884:	601a      	str	r2, [r3, #0]
 8016886:	f04f 30ff 	mov.w	r0, #4294967295
 801688a:	4770      	bx	lr
 801688c:	20005cec 	.word	0x20005cec

08016890 <_read>:
 8016890:	4b02      	ldr	r3, [pc, #8]	; (801689c <_read+0xc>)
 8016892:	2258      	movs	r2, #88	; 0x58
 8016894:	601a      	str	r2, [r3, #0]
 8016896:	f04f 30ff 	mov.w	r0, #4294967295
 801689a:	4770      	bx	lr
 801689c:	20005cec 	.word	0x20005cec

080168a0 <_exit>:
 80168a0:	e7fe      	b.n	80168a0 <_exit>
	...

080168a4 <_init>:
 80168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168a6:	bf00      	nop
 80168a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168aa:	bc08      	pop	{r3}
 80168ac:	469e      	mov	lr, r3
 80168ae:	4770      	bx	lr

080168b0 <_fini>:
 80168b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b2:	bf00      	nop
 80168b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168b6:	bc08      	pop	{r3}
 80168b8:	469e      	mov	lr, r3
 80168ba:	4770      	bx	lr
